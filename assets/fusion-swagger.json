{
  "swagger": "2.0",
  "info": {
    "description": "Available Swagger API:\n  - https://localhost/swagger/index.html?group=application\n  - https://localhost/swagger/index.html?group=oauth\n  - https://localhost/swagger/index.html?group=actuator\n",
    "version": "1.0",
    "title": "Fusion API",
    "contact": {}
  },
  "host": "localhost",
  "basePath": "/",
  "tags": [
    {
      "name": "about-me-controller",
      "description": "About Me Controller"
    },
    {
      "name": "account-controller",
      "description": "Account Controller"
    },
    {
      "name": "atg-provider-controller",
      "description": "Atg Provider Controller"
    },
    {
      "name": "chat-controller",
      "description": "Chat Controller"
    },
    {
      "name": "client-account-controller",
      "description": "Client Account Controller"
    },
    {
      "name": "client-account-investment-type-descriptor-controller",
      "description": "Client Account Investment Type Descriptor Controller"
    },
    {
      "name": "client-account-recurring-payment-controller",
      "description": "Client Account Recurring Payment Controller"
    },
    {
      "name": "client-account-transaction-controller",
      "description": "Client Account Transaction Controller"
    },
    {
      "name": "client-account-type-descriptor-controller",
      "description": "Client Account Type Descriptor Controller"
    },
    {
      "name": "client-communication-controller",
      "description": "API for operations with client communications"
    },
    {
      "name": "client-contact-person-controller",
      "description": "Client Contact Person Controller"
    },
    {
      "name": "client-controller",
      "description": "Client Controller"
    },
    {
      "name": "client-document-controller",
      "description": "Client Document Controller"
    },
    {
      "name": "client-goal-client-account-link-controller",
      "description": "API for operations with client account links"
    },
    {
      "name": "client-goal-controller",
      "description": "Client Goal Controller"
    },
    {
      "name": "client-import-task-controller",
      "description": "Client Import Task Controller"
    },
    {
      "name": "client-notification-controller",
      "description": "Client Notification Controller"
    },
    {
      "name": "client-prototype-controller",
      "description": "Client Prototype Controller"
    },
    {
      "name": "client-recurring-payment-controller",
      "description": "Client Recurring Payment Controller"
    },
    {
      "name": "client-registration-controller",
      "description": "Client Registration Controller"
    },
    {
      "name": "comment-controller",
      "description": "Comment Controller"
    },
    {
      "name": "company-controller",
      "description": "Company Controller"
    },
    {
      "name": "company-document-controller",
      "description": "Company Document Controller"
    },
    {
      "name": "competency-controller",
      "description": "API for operations with Competency"
    },
    {
      "name": "consultation-controller",
      "description": "Consultation Controller"
    },
    {
      "name": "country-controller",
      "description": "API for operations with Country"
    },
    {
      "name": "currency-controller",
      "description": "API for operations with Currency"
    },
    {
      "name": "dashboard-controller",
      "description": "Dashboard Controller"
    },
    {
      "name": "document-category-controller",
      "description": "Document Category Controller"
    },
    {
      "name": "document-controller",
      "description": "Document Controller"
    },
    {
      "name": "document-template-controller",
      "description": "Document Template Controller"
    },
    {
      "name": "docusign-web-hook-controller",
      "description": "Docusign Web Hook Controller"
    },
    {
      "name": "elasticsearch-controller",
      "description": "Elasticsearch Controller"
    },
    {
      "name": "employment-status-controller",
      "description": "API for operations with EmploymentStatus"
    },
    {
      "name": "event-logging-controller",
      "description": "API for get events log"
    },
    {
      "name": "fact-finding-controller",
      "description": "Fact Finding Controller"
    },
    {
      "name": "fee-and-service-client-controller",
      "description": "Fee And Service Client Controller"
    },
    {
      "name": "fee-and-service-company-controller",
      "description": "Fee And Service Company Controller"
    },
    {
      "name": "fee-and-service-system-controller",
      "description": "Fee And Service System Controller"
    },
    {
      "name": "financial-review-controller",
      "description": "Financial Review Controller"
    },
    {
      "name": "financial-review-goal-client-account-link-controller",
      "description": "API for operations with financial review account links"
    },
    {
      "name": "financial-review-goal-controller",
      "description": "Financial Review Goal Controller"
    },
    {
      "name": "investment-goal-controller",
      "description": "Investment Goal Controller"
    },
    {
      "name": "investment-type-controller",
      "description": "API for operations with InvestmentType"
    },
    {
      "name": "kyc-check-controller",
      "description": "Kyc Check Controller"
    },
    {
      "name": "kyc-document-controller",
      "description": "Kyc Document Controller"
    },
    {
      "name": "kyc-profile-controller",
      "description": "Kyc Profile Controller"
    },
    {
      "name": "kyc-web-hook-controller",
      "description": "Kyc Web Hook Controller"
    },
    {
      "name": "model-portfolio-controller",
      "description": "Model Portfolio Controller"
    },
    {
      "name": "model-portfolio-set-controller",
      "description": "Model Portfolio Set Controller"
    },
    {
      "name": "model-portfolio-theme-controller",
      "description": "Model Portfolio Theme Controller"
    },
    {
      "name": "notification-error-log-controller",
      "description": "API for operations with NotificationError"
    },
    {
      "name": "notification-log-controller",
      "description": "API for operations with NotificationLog"
    },
    {
      "name": "notification-template-controller",
      "description": "API for operations with notification templates"
    },
    {
      "name": "payment-management-controller",
      "description": "API for payment management with client money"
    },
    {
      "name": "pension-goal-controller",
      "description": "Pension Goal Controller"
    },
    {
      "name": "pension-type-controller",
      "description": "API for operations with PensionType"
    },
    {
      "name": "primary-company-controller",
      "description": "API for operations with primary company"
    },
    {
      "name": "projections-controller",
      "description": "Projections Controller"
    },
    {
      "name": "projections-investment-controller",
      "description": "Projections Investment Controller"
    },
    {
      "name": "projections-pension-controller",
      "description": "Projections Pension Controller"
    },
    {
      "name": "property-controller",
      "description": "Property API"
    },
    {
      "name": "risk-profiling-attempt-controller",
      "description": "Risk Profiling Attempt Controller"
    },
    {
      "name": "risk-profiling-result-controller",
      "description": "Risk Profiling Result Controller"
    },
    {
      "name": "risk-profiling-test-controller",
      "description": "Risk Profiling Test Controller"
    },
    {
      "name": "role-controller",
      "description": "API for operations with user role"
    },
    {
      "name": "role-type-controller",
      "description": "API for operations with user roleType"
    },
    {
      "name": "saving-purpose-controller",
      "description": "API for operations with SavingPurpose"
    },
    {
      "name": "seccl-web-hook-controller",
      "description": "Seccl Web Hook Controller"
    },
    {
      "name": "surfly-controller",
      "description": "Surfly Controller"
    },
    {
      "name": "system-settings-controller",
      "description": "System Settings Controller"
    },
    {
      "name": "task-controller",
      "description": "Task Controller"
    },
    {
      "name": "task-template-controller",
      "description": "API for operations with task templates"
    },
    {
      "name": "tax-position-type-controller",
      "description": "API for operations with TaxPositionType"
    },
    {
      "name": "user-controller",
      "description": "User Controller"
    },
    {
      "name": "user-task-controller",
      "description": "User Task Controller"
    },
    {
      "name": "webhook-controller",
      "description": "Webhook Controller"
    }
  ],
  "paths": {
    "/api/v1/account": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "Returns page of accounts",
        "operationId": "getAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type filter. True for accounts with type equal $type",
            "required": false,
            "type": "string"
          },
          {
            "name": "login",
            "in": "query",
            "description": "Login filter. True for accounts with login like $login",
            "required": false,
            "type": "string"
          },
          {
            "name": "locked",
            "in": "query",
            "description": "Locked filter. True for accounts with locked in ($locked)",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Enabled filter. True for accounts with enabled in ($enabled)",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email filter. True for accounts with email like $email",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/activation/activate": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Activate account (non-secured)",
        "operationId": "activateAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountActivationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/activation/check-token": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Check token for account activation process (non-secured)",
        "operationId": "checkAccountActivationProcessTokenUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/activation/resend-confirmation": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Resend confirmation link for account activation process (non-secured)",
        "operationId": "resendConfirmationLinkUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "email",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountType",
            "in": "query",
            "description": "accountType",
            "required": true,
            "type": "string",
            "enum": [
              "User",
              "Client"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/login": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "Get Account by email (non-secured)",
        "operationId": "getAccountByLoginUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email filter. True for accounts with email eq $email",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/non-secured": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "Get Account by email (non-secured)",
        "operationId": "getAccountByEmailUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email filter. True for accounts with email eq $email",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/non-secured/{id}/change-email/cancel": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Cancel change email request",
        "operationId": "cancelChangeEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/non-secured/{id}/change-email/check-token": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Check token for change email request (secured)",
        "operationId": "checkChangeEmailTokenUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/non-secured/{id}/change-email/confirm": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Confirm change email request",
        "operationId": "confirmChangeEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/password-restore": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Init restore password process (non-secured)",
        "operationId": "initPasswordRestoreProcessUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "email",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountType",
            "in": "query",
            "description": "accountType",
            "required": true,
            "type": "string",
            "enum": [
              "User",
              "Client"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/password-restore/change-password": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Change password via restore process (non-secured)",
        "operationId": "changePasswordViaPasswordRestoreProcessUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordRestoreRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/password-restore/check-token": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Check token for restore password process (non-secured)",
        "operationId": "checkPasswordRestoreProcessTokenUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/{id}": {
      "get": {
        "tags": [
          "account-controller"
        ],
        "summary": "Get Account",
        "operationId": "getAccountUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/{id}/change-email/request": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Create change email request (secured)",
        "operationId": "requestChangeEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeEmailRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/{id}/change-password": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Change password (secured)",
        "operationId": "changePasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "changePasswordRequest",
            "description": "changePasswordRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/account/{id}/enable": {
      "post": {
        "tags": [
          "account-controller"
        ],
        "summary": "Enable / Disable account (secured)",
        "operationId": "changeAccountEnableStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "changeStatusRequest",
            "description": "changeStatusRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeStatusRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/application-document": {
      "get": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Gets application documents page",
        "operationId": "getApplicationDocumentsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "Company ID",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Document category",
            "required": false,
            "type": "string",
            "enum": [
              "MANDATORY_DOCUMENTS",
              "GENERAL",
              "GENERAL_COMPANY_DOCUMENT",
              "SERVICE_AND_FEES_AGREEMENT",
              "SUITABILITY_REPORT",
              "RECOMMENDATION_LETTER",
              "STATEMENTS",
              "TRANSFER_FORM",
              "LETTER_OF_AUTHORITY",
              "DIRECT_DEBIT",
              "OTHER",
              "DROP_THRESHOLD",
              "PLATFORM",
              "TRANSACTIONS",
              "PENSION_APPLICATION_FORM",
              "ISA_DECLARATION_FORM",
              "ILLUSTRATION",
              "VALUATION_REPORT",
              "PLAN_INFORMATION"
            ]
          },
          {
            "name": "level",
            "in": "query",
            "description": "Document level",
            "required": false,
            "type": "string",
            "enum": [
              "FINANCIAL_REVIEW",
              "COMPANY",
              "SERVICE",
              "ACCOUNT",
              "REPORTS",
              "TRANSACTIONS",
              "PAYMENTS",
              "PLATFORM",
              "PENSION",
              "OTHER"
            ]
          },
          {
            "name": "source",
            "in": "query",
            "description": "Document source",
            "required": false,
            "type": "string",
            "enum": [
              "FILE_UPLOAD",
              "TEMPLATE_UPLOAD",
              "EXTERNAL",
              "PLATFORM_FILE",
              "PLATFORM_TEMPLATE"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfCompanyDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Creates application document",
        "operationId": "createApplicationDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "comment",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "templateId",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CompanyDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/application-document/{applicationDocumentId}": {
      "get": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Gets application document",
        "operationId": "getApplicationDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Updates application document",
        "operationId": "updateApplicationDocumentUsingPUT",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "comment",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "generationSource",
            "type": "string",
            "enum": [
              "FILE_UPLOAD",
              "TEMPLATE_UPLOAD",
              "EXTERNAL",
              "PLATFORM_FILE",
              "PLATFORM_TEMPLATE"
            ]
          },
          {
            "in": "formData",
            "name": "isMajor",
            "type": "boolean"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Deletes application document",
        "operationId": "deleteCompanyDocumentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/application-document/{applicationDocumentId}/download": {
      "get": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Downloads application document with ID = {applicationDocumentId}",
        "operationId": "downloadApplicationDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/application-document/{applicationDocumentId}/history": {
      "get": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Gets company document template history",
        "operationId": "getApplicationDocumentTemplateHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyDocumentTemplate"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/application-document/{applicationDocumentId}/history/{documentId}/download": {
      "get": {
        "tags": [
          "company-document-controller"
        ],
        "summary": "Downloads company document template with ID = {templateId}",
        "operationId": "downloadApplicationDocumentByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Company Document ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/atg-provider/list": {
      "get": {
        "tags": [
          "atg-provider-controller"
        ],
        "summary": "Returns list of ATG providers",
        "operationId": "getAtgProvidersListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "supportsPensions",
            "in": "query",
            "description": "True for ATG providers which are support pension",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "description": "True for ATG providers that are in \"active\" status",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AtgProvider"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/atg-provider/page": {
      "get": {
        "tags": [
          "atg-provider-controller"
        ],
        "summary": "Returns page of ATG providers",
        "operationId": "getAtgProvidersPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "True for ATG providers that are in \"active\" status",
            "required": false,
            "type": "string"
          },
          {
            "name": "supportsPensions",
            "in": "query",
            "description": "True for ATG providers which are support pension",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfAtgProvider"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/atg-provider/update": {
      "post": {
        "tags": [
          "atg-provider-controller"
        ],
        "summary": "updateAtgProviders",
        "operationId": "updateAtgProvidersUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AtgProvider"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/chat/client/{clientId}/history": {
      "get": {
        "tags": [
          "chat-controller"
        ],
        "summary": "Gets client's chat history",
        "operationId": "getChatHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfChatLogEntry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/chat/client/{clientId}/ifa-list": {
      "get": {
        "tags": [
          "chat-controller"
        ],
        "summary": "Gets chat adviser list",
        "operationId": "getChatIfaListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ChatIfaListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/chat/documents": {
      "post": {
        "tags": [
          "chat-controller"
        ],
        "summary": "Uploads chat document",
        "operationId": "uploadChatDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "comment",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "recipientId",
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ChatDocumentResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/chat/documents/{documentId}": {
      "get": {
        "tags": [
          "chat-controller"
        ],
        "summary": "Downloads chat document",
        "operationId": "downloadChatDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "documentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/chat/ifa/{userId}/client-list": {
      "get": {
        "tags": [
          "chat-controller"
        ],
        "summary": "Gets chat client list",
        "operationId": "getChatClientListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ChatClientListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/chat/users/online": {
      "get": {
        "tags": [
          "chat-controller"
        ],
        "summary": "Gets online user list",
        "operationId": "getOnlineUsersListUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ChatUserListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/chat/{firstUserId}/{secondUserId}": {
      "get": {
        "tags": [
          "chat-controller"
        ],
        "summary": "User chat history",
        "operationId": "getUserChatHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "firstUserId",
            "in": "path",
            "description": "firstUserId",
            "required": true,
            "type": "string"
          },
          {
            "name": "secondUserId",
            "in": "path",
            "description": "secondUserId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfChatLogEntry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client": {
      "get": {
        "tags": [
          "client-controller"
        ],
        "summary": "Returns page of clients",
        "operationId": "getClientPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "query",
            "description": "Company filter. True for clients with company id in ($company)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email filter. True for clients with email equal ($email)",
            "required": false,
            "type": "string"
          },
          {
            "name": "primaryCompanyId",
            "in": "query",
            "description": "Primary Company ID filer. True for clients with primary company ID equal ($primaryCompanyId)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "displayCompanyId",
            "in": "query",
            "description": "Display Company ID filer. True for clients with display company ID equal ($displayCompanyId)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "adviserId",
            "in": "query",
            "description": "Adviser ID filer. True for clients with adviser ID in ($adviserId)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-account-investment-type-descriptor": {
      "get": {
        "tags": [
          "client-account-investment-type-descriptor-controller"
        ],
        "summary": "getClientAccountInvestmentTypeDescriptorList",
        "operationId": "getClientAccountInvestmentTypeDescriptorListUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientAccountInvestmentTypeDescriptor"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-account-type-descriptor": {
      "get": {
        "tags": [
          "client-account-type-descriptor-controller"
        ],
        "summary": "getClientAccountTypeDescriptorPage",
        "operationId": "getClientAccountTypeDescriptorPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Indicates the account type",
            "required": false,
            "type": "string",
            "enum": [
              "Investment",
              "Pension",
              "Cash"
            ]
          },
          {
            "name": "internal",
            "in": "query",
            "description": "Indicates whether these are internal accounts",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountTypeDescriptor"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-account-type-descriptor/investment": {
      "get": {
        "tags": [
          "client-account-type-descriptor-controller"
        ],
        "summary": "getInvestmentClientAccountTypeDescriptorPage",
        "operationId": "getInvestmentClientAccountTypeDescriptorPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountTypeDescriptor"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-account-type-descriptor/pension": {
      "get": {
        "tags": [
          "client-account-type-descriptor-controller"
        ],
        "summary": "getPensionClientAccountTypeDescriptorPage",
        "operationId": "getPensionClientAccountTypeDescriptorPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountTypeDescriptor"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-account-type-descriptor/{id}": {
      "get": {
        "tags": [
          "client-account-type-descriptor-controller"
        ],
        "summary": "Get account type descriptor by id",
        "operationId": "getClientAccountTypeDescriptorUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTypeDescriptor"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-create-task/{importTaskId}/client-prototype": {
      "get": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Returns page of client prototypes",
        "operationId": "getClientPrototypePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. True for prototypes with status in ($status)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientPrototype"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Create new client prototype via request",
        "operationId": "createClientPrototypeViaRequestUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "createRequest",
            "description": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientPrototypeCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientPrototype"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Delete client prototypes by importTaskId",
        "operationId": "deleteClientPrototypesByImportTaskIdUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-create-task/{importTaskId}/client-prototype/file": {
      "post": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Create new client prototypes via file",
        "operationId": "createClientPrototypesViaFileUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DeferredResultOfImportFileResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-create-task/{importTaskId}/client-prototype/file/{fileId}": {
      "delete": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Delete client prototypes by fileId",
        "operationId": "deleteClientPrototypesByFileIdUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "fileId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-create-task/{importTaskId}/client-prototype/import": {
      "post": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Create new clients from prototypes",
        "operationId": "importClientPrototypesUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-create-task/{importTaskId}/client-prototype/{id}": {
      "put": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Change client prototype via request",
        "operationId": "changeClientPrototypeUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "changeRequest",
            "description": "changeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientPrototypeChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientPrototype"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Delete client prototype by id",
        "operationId": "deleteClientPrototypeByIdUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-create-task/{importTaskId}/client-prototype/{id}/ignore": {
      "post": {
        "tags": [
          "client-prototype-controller"
        ],
        "summary": "Ignore/unignore client prototype via request",
        "operationId": "ignoreClientPrototypeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "importTaskId",
            "in": "path",
            "description": "importTaskId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "changeStatusRequest",
            "description": "changeStatusRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-import-task": {
      "get": {
        "tags": [
          "client-import-task-controller"
        ],
        "summary": "Returns page of client import tasks",
        "operationId": "getImportTaskPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. True for import task with status in $status",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "description": "Created at filter. True for notification log with createdAt more or equal $createdAtFrom",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "description": "Created at filter. True for notification log with createdAt less or equal $createdAtTo",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientImportTask"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "client-import-task-controller"
        ],
        "summary": "Create new client import task",
        "operationId": "createImportTaskUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createRequest",
            "description": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientImportTaskRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientImportTask"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client-import-task/{id}": {
      "get": {
        "tags": [
          "client-import-task-controller"
        ],
        "summary": "Get client import task by id",
        "operationId": "getImportTaskByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientImportTask"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/registration/register": {
      "post": {
        "tags": [
          "client-registration-controller"
        ],
        "summary": "Registers new client",
        "operationId": "registerClientUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientRegistrationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/search": {
      "get": {
        "tags": [
          "elasticsearch-controller"
        ],
        "summary": "Returns page of clients",
        "operationId": "clientSearchUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "fullName",
            "in": "query",
            "description": "Full name filter. True for client with name $fullName",
            "required": false,
            "type": "string"
          },
          {
            "name": "primaryCompanyId",
            "in": "query",
            "description": "Primary Company ID filer. True for clients with primary company ID equal ($primaryCompanyId)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "displayCompanyId",
            "in": "query",
            "description": "Display Company ID filer. True for clients with display company ID equal ($displayCompanyId)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "adviserIDs",
            "in": "query",
            "description": "Adviser ID list filter. True for user with adviser ID in $adviserIDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfEsClient"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction": {
      "get": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Returns page of client account transactions",
        "operationId": "getClientAccountTransactionsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "query",
            "description": "Goal ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentType",
            "in": "query",
            "description": "Payment type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "transactionType",
            "in": "query",
            "description": "Transaction type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "transactionSubType",
            "in": "query",
            "description": "Transaction subtype filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "movementType",
            "in": "query",
            "description": "Movement type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "method",
            "in": "query",
            "description": "Method filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "investToModel",
            "in": "query",
            "description": "Invest to model filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Transaction status filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "purpose",
            "in": "query",
            "description": "Purpose of a transaction filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "relatedEntityId",
            "in": "query",
            "description": "Related entity ID filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "relatedEntityType",
            "in": "query",
            "description": "Related entity type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date from type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountTransaction"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/payments": {
      "get": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Returns page of client account \"payment\" transactions",
        "operationId": "getClientAccountPaymentsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "dateFrom",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "dateTo",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "goalId",
            "in": "query",
            "description": "Goal ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentType",
            "in": "query",
            "description": "Payment type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "movementType",
            "in": "query",
            "description": "Movement type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountTransaction"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/refresh": {
      "post": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Refreshes client account transactions",
        "operationId": "refreshClientTransactionsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/cash": {
      "post": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Creates client account cash transaction",
        "operationId": "createClientAccountCashTransactionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountCashTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/cash-transfer": {
      "post": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Creates client cash transfer transaction",
        "operationId": "createClientAccountCashTransferTransactionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountCashTransferTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/external-transfer": {
      "post": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Creates client external transfer transaction",
        "operationId": "createClientAccountExternalTransferTransactionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountExternalTransferTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/order": {
      "post": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Creates client order transaction",
        "operationId": "createClientAccountOrderTransactionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountOrderTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/payment": {
      "post": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Creates client account payment transaction",
        "operationId": "createClientAccountPaymentTransactionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountPaymentTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/payment/{transactionId}": {
      "put": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Creates client account payment transaction",
        "operationId": "updateClientAccountPaymentTransactionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountPaymentTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/{transactionId}": {
      "get": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Gets client account transaction",
        "operationId": "getClientAccountTransactionUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Deletes client external transfer transaction",
        "operationId": "deleteClientAccountTransactionUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/account-transaction/{accountId}/{transactionId}/status": {
      "post": {
        "tags": [
          "client-account-transaction-controller"
        ],
        "summary": "Changes client account transaction status",
        "operationId": "changeClientAccountTransactionStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountTransactionStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountTransaction"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Returns page of client accounts",
        "operationId": "getClientAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "query",
            "description": "The account goal ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "internal",
            "in": "query",
            "description": "Indicates whether these are internal accounts",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "The account type",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The account status",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Creates client account",
        "operationId": "createClientAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/external": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Returns page of external client accounts",
        "operationId": "getExternalClientAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/internal": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Returns page of internal client accounts",
        "operationId": "getInternalClientAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Returns client account",
        "operationId": "getClientAccountUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Updates client account",
        "operationId": "updateClientAccountUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Delete client account",
        "operationId": "deleteClientAccountUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/documents/letter-of-authority": {
      "patch": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Generates letter of authority document for a client account",
        "operationId": "generateClientAccountLetterOfAuthorityUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/rebalance": {
      "post": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Rebalances client account",
        "operationId": "rebalanceClientAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountRebalanceResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/refresh": {
      "put": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Refreshes client account",
        "operationId": "refreshClientAccountUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/status": {
      "post": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Change status for client account with id = {id}",
        "operationId": "changeClientAccountStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/valiation-report": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Gets client account report",
        "operationId": "getClientAccountReportUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "From date",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "To date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/valuation": {
      "post": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Creates external client account valuation",
        "operationId": "createExternalClientAccountValuationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountValuationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountValuation"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/valuation-history/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Retrieves account's valuation history",
        "operationId": "getClientAccountValuationHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "fromDate",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "toDate",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DateValuePairOfbigdecimal"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/valuation-page": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Retrieves account's valuation history",
        "operationId": "getExternalClientAccountValuationPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountValuation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-accounts/{id}/valuation/{valuationId}": {
      "get": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Retrieves client account valuation",
        "operationId": "getExternalClientAccountValuationUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "valuationId",
            "in": "path",
            "description": "valuationId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountValuation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Updates external client account valuation",
        "operationId": "updateExternalClientAccountValuationUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "valuationId",
            "in": "path",
            "description": "valuationId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountValuationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountValuation"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client-account-controller"
        ],
        "summary": "Deletes external client account valuation",
        "operationId": "deleteExternalClientAccountValuationUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "valuationId",
            "in": "path",
            "description": "valuationId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-goal/{clientGoalId}/account-links/linked": {
      "get": {
        "tags": [
          "client-goal-client-account-link-controller"
        ],
        "summary": "Returns page of linked client accounts",
        "operationId": "getLinkedClientAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientGoalId",
            "in": "path",
            "description": "clientGoalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/client-goal/{clientGoalId}/account-links/not-linked": {
      "get": {
        "tags": [
          "client-goal-client-account-link-controller"
        ],
        "summary": "Returns page of not linked client accounts",
        "operationId": "getNonLinkedClientAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientGoalId",
            "in": "path",
            "description": "clientGoalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents": {
      "get": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "Return page of client documents",
        "operationId": "getClientDocumentPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "in": "query",
            "description": "Document level filter. True for documents with level equal $level",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Document status. True for documents with status equal status",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfEntityDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents/check-singed-terms-of-business": {
      "get": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "checkIfClientSignedMandatoryDocuments",
        "operationId": "checkIfClientSignedMandatoryDocumentsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents/policy-numbers": {
      "get": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "Returns client's provider policy numbers",
        "operationId": "getClientFactFindingProviderPolicyNumbersUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerName",
            "in": "query",
            "description": "Provider Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerAddress",
            "in": "query",
            "description": "Provider Address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StringListResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents/providers": {
      "get": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "getClientFactFindingProviderInfo",
        "operationId": "getClientFactFindingProviderInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderInfo"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents/update-external-documents": {
      "post": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "Updates client's external documents",
        "operationId": "updateClientExternalDocumentsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateExternalDocumentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents/update-external-documents-by-level": {
      "post": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "Updates client's external documents by level",
        "operationId": "updateClientExternalDocumentsByLevelUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateExternalDocumentsByLevelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents/{documentId}/client-access": {
      "put": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "Changes document's client access)",
        "operationId": "changeClientDocumentAccessUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "documentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentClientAccessRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/documents/{documentId}/notify": {
      "post": {
        "tags": [
          "client-document-controller"
        ],
        "summary": "Notifies the client about creation of the new document)",
        "operationId": "sendClientDocumentNotificationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "documentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal": {
      "get": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Returns the list of client goals",
        "operationId": "getClientGoalPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type filter. True for goals with type in ($type)",
            "required": false,
            "type": "string"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Archived filter. True for goals with archived in ($archived)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}": {
      "get": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Returns client goal detail for given client {clientId} and goal {id}",
        "operationId": "getClientGoalUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/accounts/close": {
      "post": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Close client account for given client {clientId} and goal {id}",
        "operationId": "closeClientGoalAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountCloseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/accounts/link": {
      "post": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Link client account for given client {clientId} and goal {id}",
        "operationId": "linkClientAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/accounts/linked": {
      "get": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Returns linked client accounts for given client {clientId} and goal {id}",
        "operationId": "getClientGoalLinkedAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "internal",
            "in": "query",
            "description": "Internal filter. True for client account with internal field set",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/accounts/not-linked": {
      "get": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Returns not linked client accounts for given client {clientId} and goal {id}",
        "operationId": "getNotLinkedClientAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/accounts/unlink": {
      "post": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Unlink client account for given client {clientId} and goal {id}",
        "operationId": "unlinkClientAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccount"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/archive": {
      "post": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Change client goal status to archive",
        "operationId": "archiveClientGoalUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientGoal"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/client-account-transactions": {
      "get": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Returns client goal transactions page",
        "operationId": "getClientGoalTransactionsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionType",
            "in": "query",
            "description": "Transaction type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "movementType",
            "in": "query",
            "description": "Movement type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountTransaction"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/fee": {
      "get": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Returns fee",
        "operationId": "getClientGoalFeeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Fee"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Update fee",
        "operationId": "changeClientGoalFeeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "fee",
            "description": "fee",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Fee"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/portfolio-theme": {
      "patch": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Review goal",
        "operationId": "setClientGoalPortfolioThemeUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoalPortfolioThemeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientGoal"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/goal/{id}/valuation-report": {
      "get": {
        "tags": [
          "client-goal-controller"
        ],
        "summary": "Retrieves client goal valuation report",
        "operationId": "getClientGoalReportUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "From date filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "To date filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientGoalReport"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc-check": {
      "get": {
        "tags": [
          "kyc-check-controller"
        ],
        "summary": "Returns page of KYC checks",
        "operationId": "getKycCheckPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "initiatedBy",
            "in": "query",
            "description": "Initiator ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Check status",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfKycCheck"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "kyc-check-controller"
        ],
        "summary": "Initiates KYC check for a client",
        "operationId": "createKycCheckUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycCheckRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KycCheck"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc-check/{checkId}": {
      "get": {
        "tags": [
          "kyc-check-controller"
        ],
        "summary": "Returns KYC check detail with the given id = {checkId}",
        "operationId": "getKycCheckUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "checkId",
            "in": "path",
            "description": "checkId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KycCheck"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc/document/history": {
      "get": {
        "tags": [
          "kyc-document-controller"
        ],
        "summary": "Gets a client's KYC document history",
        "operationId": "getKycDocumentHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of a document",
            "required": false,
            "type": "string",
            "enum": [
              "PASSPORT",
              "DRIVING_LICENCE",
              "UTILITY_BILL",
              "COUNCIL_TAX",
              "BANK_BUILDING_SOCIETY_STATEMENT",
              "BENEFIT_LETTERS"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of a document",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KycDocument"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc/document/list": {
      "get": {
        "tags": [
          "kyc-document-controller"
        ],
        "summary": "Gets client's KYC documents",
        "operationId": "getKycDocumentsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KycDocument"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc/document/upload": {
      "post": {
        "tags": [
          "kyc-document-controller"
        ],
        "summary": "Upload client's KYC document",
        "operationId": "uploadKycDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "type",
            "description": "Document type",
            "required": true,
            "type": "string",
            "enum": [
              "PASSPORT",
              "DRIVING_LICENCE",
              "UTILITY_BILL",
              "COUNCIL_TAX",
              "BANK_BUILDING_SOCIETY_STATEMENT",
              "BENEFIT_LETTERS"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc/document/{documentId}": {
      "delete": {
        "tags": [
          "kyc-document-controller"
        ],
        "summary": "Deletes client's KYC document",
        "operationId": "deleteKycDocumentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc/document/{documentId}/download": {
      "get": {
        "tags": [
          "kyc-document-controller"
        ],
        "summary": "Download document with ID = {documentId}",
        "operationId": "downloadKycDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{clientId}/kyc/document/{documentId}/status": {
      "post": {
        "tags": [
          "kyc-document-controller"
        ],
        "summary": "Changes client's KYC document status",
        "operationId": "changeKycDocumentStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycDocumentStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}": {
      "get": {
        "tags": [
          "client-controller"
        ],
        "summary": "Returns client detail for given client {id}",
        "operationId": "getClientUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "client-controller"
        ],
        "summary": "Edit client for given id = {id}",
        "operationId": "changeClientUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/assign-ifa": {
      "post": {
        "tags": [
          "client-controller"
        ],
        "summary": "Assigns an adviser to the client for given id = {id}",
        "operationId": "assignIfaToClientUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAssignIfaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/bank-details": {
      "get": {
        "tags": [
          "client-controller"
        ],
        "summary": "Returns client bank details for given client {id}",
        "operationId": "getClientBankDetailsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientBankDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "client-controller"
        ],
        "summary": "Edit client for given id = {id}",
        "operationId": "changeClientBankDetailsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientBankDetailsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientBankDetails"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/company": {
      "get": {
        "tags": [
          "client-controller"
        ],
        "summary": "Returns company detail for given clientId = {id}",
        "operationId": "getClientCompanyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/dashboard-data": {
      "get": {
        "tags": [
          "client-controller"
        ],
        "summary": "Returns dashboard data for given clientId = {id}",
        "operationId": "getClientDashboardDataUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientDashboardData"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/direct-debit-mandate-status": {
      "put": {
        "tags": [
          "client-controller"
        ],
        "summary": "Changes DD mandate approval status",
        "operationId": "changeClientDirectDebitMandateStatusUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientDirectDebitMandateStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/financial-review-date": {
      "post": {
        "tags": [
          "client-controller"
        ],
        "summary": "Edit client financial review date for given id = {id}",
        "operationId": "changeClientFinancialReviewDateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientFinancialReviewDateChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/ifa": {
      "get": {
        "tags": [
          "client-controller"
        ],
        "summary": "Client adviser Full Info",
        "operationId": "getClientIfaUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientIFAFullInfoResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/ifa-list": {
      "post": {
        "tags": [
          "client-controller"
        ],
        "summary": "Edit client adviser list for given id = {id}",
        "operationId": "changeClientIfaListUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientIfaListChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/kyc-status": {
      "post": {
        "tags": [
          "client-controller"
        ],
        "summary": "Changes client's KYC status",
        "operationId": "changeClientKycStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientKycStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/planning-mode": {
      "post": {
        "tags": [
          "client-controller"
        ],
        "summary": "Switches client's planning mode",
        "operationId": "switchClientPlanningModeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientPlanningModeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/client/{id}/welcome-message-viewed": {
      "patch": {
        "tags": [
          "client-controller"
        ],
        "summary": "Sets a value indicating whether the welcome message was viewed",
        "operationId": "setClientWelcomeMessageViewedUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientWelcomeMessageViewedRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/client-accounts/{accountId}/recurring-payments": {
      "get": {
        "tags": [
          "client-account-recurring-payment-controller"
        ],
        "summary": "Gets page of a client account recurring payments",
        "operationId": "getClientAccountRecurringPaymentsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountRecurringPayment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "client-account-recurring-payment-controller"
        ],
        "summary": "Creates client account recurring payment",
        "operationId": "createClientAccountRecurringPaymentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountRecurringPaymentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientAccountRecurringPayment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/client-accounts/{accountId}/recurring-payments/{paymentId}": {
      "put": {
        "tags": [
          "client-account-recurring-payment-controller"
        ],
        "summary": "Updates client account recurring payment",
        "operationId": "updateClientAccountRecurringPaymentUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "paymentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountRecurringPaymentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountRecurringPayment"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client-account-recurring-payment-controller"
        ],
        "summary": "Deletes a client account recurring payment",
        "operationId": "deleteClientAccountRecurringPaymentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "paymentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "client-account-recurring-payment-controller"
        ],
        "summary": "Changes status of a client account recurring payment",
        "operationId": "changeClientAccountRecurringPaymentStatusUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "accountId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "paymentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountRecurringPaymentStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientAccountRecurringPayment"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/contact-persons": {
      "get": {
        "tags": [
          "client-contact-person-controller"
        ],
        "summary": "getClientContactPersonPage",
        "operationId": "getClientContactPersonPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientContactPerson"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/contact-persons/list": {
      "get": {
        "tags": [
          "client-contact-person-controller"
        ],
        "summary": "getClientContactPersonList",
        "operationId": "getClientContactPersonListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientContactPerson"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "client-contact-person-controller"
        ],
        "summary": "Edit client contact person list for given clientId = {clientId}",
        "operationId": "changeClientContactPersonListUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientContactPersonListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientContactPerson"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/contact-persons/primary": {
      "post": {
        "tags": [
          "client-contact-person-controller"
        ],
        "summary": "Create client contact person",
        "operationId": "createClientContactPersonUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientContactPersonRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientContactPerson"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/contact-persons/{contactPersonId}/mark-as-preferred": {
      "post": {
        "tags": [
          "client-contact-person-controller"
        ],
        "summary": "Mark client contact person as preferred",
        "operationId": "markClientContactPersonAsPreferredUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "contactPersonId",
            "in": "path",
            "description": "contactPersonId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/ClientContactPerson"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/contact-persons/{userId}": {
      "get": {
        "tags": [
          "client-contact-person-controller"
        ],
        "summary": "getClientContactPerson",
        "operationId": "getClientContactPersonUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientContactPerson"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client-contact-person-controller"
        ],
        "summary": "Delete client contact person",
        "operationId": "deleteClientContactPersonUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service": {
      "get": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Returns page of client services",
        "operationId": "getClientFeeAndServicePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfFeeAndServiceClientPageResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Create company's service for a client",
        "operationId": "createFeeAndServiceClientUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientRequestOfFeeAndServicePaymentStructureAndFeeAndServiceSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/bespoke": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Create bespoke service for a client",
        "operationId": "createFeeAndServiceBespokeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceBespokeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceBespokeResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/check-creation-ability": {
      "get": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Checks service creation ability",
        "operationId": "checkServiceCreationAbilityUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCreationAbilityResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/client-account": {
      "get": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Returns page of ongoing client account services in the status of \"Active\" or \"Being Provided\"",
        "operationId": "getClientAccountFeeAndServiceListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeeAndServiceClientResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/one-off": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Create service for a client",
        "operationId": "createFeeAndServiceClientOneOffUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientOneOffRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/ongoing": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Create service for a client",
        "operationId": "createFeeAndServiceClientOngoingUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientOngoingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/recommendation-letter/initial-services": {
      "get": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Returns page of client initial services for a recommendation letter",
        "operationId": "getClientRecommendationLetterInitialFeeAndServicePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeeAndService"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}": {
      "get": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Returns client service details",
        "operationId": "getClientServiceByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Updates a client service",
        "operationId": "updateFeeAndServiceClientUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientRequestOfFeeAndServicePaymentStructureAndFeeAndServiceSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/approve": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Approves a client's bespoke service",
        "operationId": "approveClientFeeAndServiceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/bespoke": {
      "put": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Updates a client bespoke service",
        "operationId": "updateFeeAndServiceBespokeUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceBespokeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceBespokeResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/consolidated-fee-structure/confirm": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Confirms the consolidated fee structure",
        "operationId": "confirmConsolidatedFeeStructureUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceConsolidatedFeeStructureRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndService"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/consolidated-fee-structure/recalculate": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Recalculates the consolidated fee structure",
        "operationId": "recalculateConsolidatedFeeStructureUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceConsolidatedFeeCalculationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceConsolidatedFeeStructure"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/delete": {
      "delete": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Deletes client service",
        "operationId": "deleteClientFeeAndServiceUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/reject": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Rejects a client service",
        "operationId": "rejectClientFeeAndServiceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/release": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Release client service",
        "operationId": "releaseClientFeeAndServiceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/fee-and-service/{id}/status": {
      "post": {
        "tags": [
          "fee-and-service-client-controller"
        ],
        "summary": "Changes status for client service",
        "operationId": "changeClientFeeAndServiceStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceClientResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/clients/{clientId}/recurring-payments": {
      "get": {
        "tags": [
          "client-recurring-payment-controller"
        ],
        "summary": "Gets page of a client account recurring payments",
        "operationId": "getClientRecurringPaymentsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "query",
            "description": "goalId",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "accountId",
            "required": false,
            "type": "string"
          },
          {
            "name": "method",
            "in": "query",
            "description": "method",
            "required": false,
            "type": "string"
          },
          {
            "name": "movementType",
            "in": "query",
            "description": "movementType",
            "required": false,
            "type": "string"
          },
          {
            "name": "autoInvest",
            "in": "query",
            "description": "autoInvest",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccountRecurringPayment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/comment": {
      "get": {
        "tags": [
          "comment-controller"
        ],
        "summary": "Returns page of client's financial reviews",
        "operationId": "getCommentsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "description": "Entity id filter. True for comment with entity id equal $entityId",
            "required": true,
            "type": "string"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Entity type filter. True for comment with entity type equal $entityType",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfComment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "comment-controller"
        ],
        "summary": "Create comment",
        "operationId": "createCommentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/comment/{id}": {
      "put": {
        "tags": [
          "comment-controller"
        ],
        "summary": "Update comment",
        "operationId": "updateCommentUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "comment-controller"
        ],
        "summary": "Delete comment",
        "operationId": "deleteCommentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/communication/delete": {
      "post": {
        "tags": [
          "client-communication-controller"
        ],
        "summary": "Deletes client's communications",
        "operationId": "deleteClientCommunicationsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientCommunicationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/communication/mark-as-read": {
      "post": {
        "tags": [
          "client-communication-controller"
        ],
        "summary": "Marks client's communications as read",
        "operationId": "markClientCommunicationsAsReadUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientCommunicationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientCommunication"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/communication/{minSendDate}/{maxSendDate}": {
      "get": {
        "tags": [
          "client-communication-controller"
        ],
        "summary": "Returns page of client communications",
        "operationId": "getClientCommunicationsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "User filter. True for communications with user ID in ($userId)",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Channel filter. True for communications with status in ($channel)",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. True for task communications status in ($status)",
            "required": false,
            "type": "string"
          },
          {
            "name": "minSendDate",
            "in": "path",
            "description": "Min sent date filter. True for communications with sendDate greater than or equal ($minSendDate)",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxSendDate",
            "in": "path",
            "description": "Max sent date filter. True for communications with sendDate greater than or equal ($maxSendDate)",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientCommunication"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service": {
      "get": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Returns page of company services",
        "operationId": "getFeeAndServiceCompanyPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "continuation",
            "in": "query",
            "description": "Continuation",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status",
            "required": false,
            "type": "string"
          },
          {
            "name": "operationStatus",
            "in": "query",
            "description": "Operation Status",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfFeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/name": {
      "get": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Returns page of services by name",
        "operationId": "getFeeAndServiceByNameUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeeAndServiceByNameResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/non-standard": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Creates new company non standard service",
        "operationId": "createFeeAndServiceNonStandardUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyNonStandardRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/non-standard-fixed-fee-structure": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Creates new company non standard service with fixed fee structure",
        "operationId": "createFeeAndServiceNonStandardFixedFeeStructureUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyNonStandardFixedFeeStructureRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/non-standard-percentage-of-aum-fee-structure": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Creates new company non standard service with percentage of AUM fee structure",
        "operationId": "createFeeAndServiceNonStandardPercentageOfAumFeeStructureUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyNonStandardPercentageOfAumFeeStructureRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/non-standard-percentage-of-aum-tired-fee-structure": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Creates new company non standard service with percentage of AUM tired fee structure",
        "operationId": "createFeeAndServiceNonStandardPercentageOfAumTiredFeeStructureUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyNonStandardPercentageOfAumTiredFeeStructureRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/non-standard/{id}/operation-status": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Changes operation status for non-standard service",
        "operationId": "changeCompanyServiceOperationStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceChangeOperationStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/standard": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Creates new company standard service",
        "operationId": "createFeeAndServiceStandardUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyStandardRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/standard-fixed-fee-structure": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Creates new company standard service with fixed fee structure",
        "operationId": "createFeeAndServiceStandardFixedFeeStructureUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyStandardFixedFeeStructureRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/standard-percentage-of-aum-fee-structure": {
      "post": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Creates new company standard service with percentage of AUM fee structure",
        "operationId": "createFeeAndServiceStandardPercentageOfAumFeeStructureUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyStandardPercentageOfAumFeeStructureRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/unassigned/{clientId}": {
      "get": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Returns page of company services available for a client",
        "operationId": "getUnassignedCompanyServicePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfFeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/{id}": {
      "get": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Returns company service details",
        "operationId": "getCompanyServiceByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/{id}/non-standard": {
      "put": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Updates a company non standard service",
        "operationId": "updateFeeAndServiceNonStandardUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyNonStandardRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/companies/{companyId}/fee-and-service/{id}/standard": {
      "put": {
        "tags": [
          "fee-and-service-company-controller"
        ],
        "summary": "Updates a company standard service",
        "operationId": "updateFeeAndServiceStandardUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyStandardRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceCompanyResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Returns page of companies",
        "operationId": "getCompanyPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id filter. True for companies with id in $id",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for companies with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone filter. True for companies with phone like $phone",
            "required": false,
            "type": "string"
          },
          {
            "name": "locked",
            "in": "query",
            "description": "Locked filter. True for companies with locked in ($locked)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfCompany"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "company-controller"
        ],
        "summary": "Create new company",
        "operationId": "createCompanyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createRequest",
            "description": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/main": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Returns main company details",
        "operationId": "getMainCompanyUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/search": {
      "get": {
        "tags": [
          "elasticsearch-controller"
        ],
        "summary": "Returns page of companies",
        "operationId": "companySearchUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Company name filter. True for companies with name $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfEsCompany"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/{id}": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Returns company detail with given id = {id}",
        "operationId": "getCompanyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "company-controller"
        ],
        "summary": "Change company with given id = {id}",
        "operationId": "changeCompanyUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "changeRequest",
            "description": "changeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/{id}/documents/advisory": {
      "post": {
        "tags": [
          "company-controller"
        ],
        "summary": "Uploads an advisory company document",
        "operationId": "uploadAdvisoryCompanyDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "formData",
            "name": "type",
            "type": "string",
            "enum": [
                "LOGO"
              ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdvisoryCompanyDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/{id}/documents/advisory/{documentId}": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Downloads an advisory company document with ID = {documentId}",
        "operationId": "downloadAdvisoryCompanyDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/{id}/lock": {
      "post": {
        "tags": [
          "company-controller"
        ],
        "summary": "Change lock status for company with id = {id}",
        "operationId": "changeCompanyLockStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "statusRequest",
            "description": "statusRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/{id}/model-portfolio-sets": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Returns list of company model portfolio sets",
        "operationId": "getCompanyModelPortfolioSetsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolioSet"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/{id}/model-portfolio-themes": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Returns list of company model portfolio themes",
        "operationId": "getCompanyModelPortfolioThemesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolioTheme"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/company/{id}/model-portfolios": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Returns company company model portfolios",
        "operationId": "getCompanyModelPortfoliosUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolio"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/competencies": {
      "get": {
        "tags": [
          "competency-controller"
        ],
        "summary": "Returns page of competencies",
        "operationId": "getCompetencyPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for competency with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfCompetency"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/competencies/{id}": {
      "get": {
        "tags": [
          "competency-controller"
        ],
        "summary": "Get competency by id",
        "operationId": "getCompetencyByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Competency"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/consultation": {
      "get": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Returns page of consultation",
        "operationId": "getConsultationsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfConsultation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Create consultation",
        "operationId": "createConsultationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateConsultationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Consultation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/consultation/client/{id}/consultations-list": {
      "get": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Returns page of client's consultations",
        "operationId": "getClientConsultationPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "ifaId",
            "in": "query",
            "description": "Adviser filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfConsultation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/consultation/request": {
      "post": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Create consultation",
        "operationId": "requestConsultationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsultationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/consultation/user/{id}/consultations-list": {
      "get": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Returns page of user's consultations",
        "operationId": "getUserConsultationPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "Client filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfConsultation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/consultation/{id}": {
      "get": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Get consultation by ID",
        "operationId": "getConsultationUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Consultation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Update consultation",
        "operationId": "updateConsultationUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConsultationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Consultation"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/consultation/{id}/reschedule": {
      "post": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Reschedule consultation",
        "operationId": "rescheduleConsultationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RescheduleConsultationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Consultation"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/consultation/{id}/status": {
      "post": {
        "tags": [
          "consultation-controller"
        ],
        "summary": "Update consultation",
        "operationId": "changeConsultationStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsultationStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Consultation"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/country": {
      "get": {
        "tags": [
          "country-controller"
        ],
        "summary": "Returns page of countries",
        "operationId": "getCountryPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for country with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Code filter. True for country with code like $code",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfCountry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/country/{id}": {
      "get": {
        "tags": [
          "country-controller"
        ],
        "summary": "Get country by id",
        "operationId": "getCountryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Country"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/currency": {
      "get": {
        "tags": [
          "currency-controller"
        ],
        "summary": "Returns page of currencies",
        "operationId": "getCurrencyPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for currency with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Code filter. True for currency with code like $code",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfCurrency"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/currency/{id}": {
      "get": {
        "tags": [
          "currency-controller"
        ],
        "summary": "Get currency by id",
        "operationId": "getCurrencyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document": {
      "get": {
        "tags": [
          "document-controller"
        ],
        "summary": "Return page of documents",
        "operationId": "getDocumentPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "Company ID filter. True for documents with company ID $companyId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "Client ID filter. True for documents with client ID $clientId",
            "required": false,
            "type": "string"
          },
          {
            "name": "level",
            "in": "query",
            "description": "Document level filter. True for documents with level equal $level",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Entity id filter. True for document with entity id equal $entityId",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Entity type filter. True for document with entity type equal $entityType",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Document status filter. True for document with type equal $status",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientAccess",
            "in": "query",
            "description": "Client access filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Document category filter. True for document with type equal $category",
            "required": false,
            "type": "string",
            "enum": [
              "MANDATORY_DOCUMENTS",
              "GENERAL",
              "GENERAL_COMPANY_DOCUMENT",
              "SERVICE_AND_FEES_AGREEMENT",
              "SUITABILITY_REPORT",
              "RECOMMENDATION_LETTER",
              "STATEMENTS",
              "TRANSFER_FORM",
              "LETTER_OF_AUTHORITY",
              "DIRECT_DEBIT",
              "OTHER",
              "DROP_THRESHOLD",
              "PLATFORM",
              "TRANSACTIONS",
              "PENSION_APPLICATION_FORM",
              "ISA_DECLARATION_FORM",
              "ILLUSTRATION",
              "VALUATION_REPORT",
              "PLAN_INFORMATION"
            ]
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date filter. True for documents with creation date greater than or equal ($startDate)",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date filter. True for documents with creation date less than or equal ($endDate)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfEntityDocumentDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document-category": {
      "get": {
        "tags": [
          "document-category-controller"
        ],
        "summary": "Gets page of document categories",
        "operationId": "getDocumentCategoriesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfDocumentCategoryDescriptor"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document-type": {
      "get": {
        "tags": [
          "document-template-controller"
        ],
        "summary": "Returns page document types",
        "operationId": "getDocumentTypePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "description": "Level filter. True for document types with level equal $level",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. True for document types with status equal $status",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Scope filter. True for document types with scope equal $scope",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category filter. True for document types with document category equal $category",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasPreUploadedDocument",
            "in": "query",
            "description": "Pre-uploadedDocument filter. True for document types that has a pre-uploaded documents",
            "required": false,
            "type": "string"
          },
          {
            "name": "excludeCategory",
            "in": "query",
            "description": "Exclude category filter. True for document types with category not equal excludeCategory",
            "required": false,
            "type": "string",
            "enum": [
              "MANDATORY_DOCUMENTS",
              "GENERAL",
              "GENERAL_COMPANY_DOCUMENT",
              "SERVICE_AND_FEES_AGREEMENT",
              "SUITABILITY_REPORT",
              "RECOMMENDATION_LETTER",
              "STATEMENTS",
              "TRANSFER_FORM",
              "LETTER_OF_AUTHORITY",
              "DIRECT_DEBIT",
              "OTHER",
              "DROP_THRESHOLD",
              "PLATFORM",
              "TRANSACTIONS",
              "PENSION_APPLICATION_FORM",
              "ISA_DECLARATION_FORM",
              "ILLUSTRATION",
              "VALUATION_REPORT",
              "PLAN_INFORMATION"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfDocumentTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "document-template-controller"
        ],
        "summary": "Creates a new document type",
        "operationId": "createDocumentTypeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DocumentTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document-type/{templateId}": {
      "get": {
        "tags": [
          "document-template-controller"
        ],
        "summary": "Gets document type",
        "operationId": "getDocumentTypeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "document-template-controller"
        ],
        "summary": "Updates document type with ID = {templateId}",
        "operationId": "updateDocumentTypeUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentTemplate"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "document-template-controller"
        ],
        "summary": "Deletes company document type with ID = {templateId}",
        "operationId": "deleteDocumentTypeUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document-type/{templateId}/status": {
      "post": {
        "tags": [
          "document-template-controller"
        ],
        "summary": "Changes status of document type with ID = {templateId}",
        "operationId": "changeDocumentTypeStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTemplateStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentTemplate"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/financial-review/{financialReviewId}/{documentTypeId}/preview": {
      "get": {
        "tags": [
          "document-controller"
        ],
        "summary": "Downloads financial review document preview",
        "operationId": "downloadFinancialReviewDocumentPreviewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentTypeId",
            "in": "path",
            "description": "Document Type ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/generate": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Generate document",
        "operationId": "generateDocumentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/platform/non-secured/{typeName}": {
      "get": {
        "tags": [
          "document-controller"
        ],
        "summary": "Downloads platform document with type name = {typeName}",
        "operationId": "downloadPlatformDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "typeName",
            "in": "path",
            "description": "Type name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/service/document-preview": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Downloads service agreement preview",
        "operationId": "downloadServiceAgreementPreviewUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Service Agreement Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceAgreementRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/update-external-documents": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Returns client's provider policy numbers",
        "operationId": "updateExternalDocumentsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/upload/source": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Upload source document",
        "operationId": "uploadSourceDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          },
          {
            "in": "formData",
            "name": "comment",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "documentName",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "entityId",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "entityType",
            "type": "string",
            "enum": [
              "FINANCIAL_REVIEW",
              "FINANCIAL_REVIEW_GOAL",
              "COMPANY",
              "SERVICE",
              "CLIENT",
              "CLIENT_ACCOUNT",
              "TRANSACTION"
            ]
          },
          {
            "in": "formData",
            "name": "level",
            "type": "string",
            "enum": [
              "FINANCIAL_REVIEW",
              "COMPANY",
              "SERVICE",
              "ACCOUNT",
              "REPORTS",
              "TRANSACTIONS",
              "PAYMENTS",
              "PLATFORM",
              "PENSION",
              "OTHER"
            ]
          },
          {
            "in": "formData",
            "name": "provider",
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          {
            "in": "formData",
            "name": "signatureType",
            "type": "string",
            "enum": [
              "NO_SIGNATURE",
              "CONFIRMATION",
              "DOCU_SIGN",
              "UPLOAD"
            ]
          },
          {
            "in": "formData",
            "name": "typeId",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}": {
      "get": {
        "tags": [
          "document-controller"
        ],
        "summary": "Gets document by ID",
        "operationId": "getDocumentByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/confirm": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Confirm document (for Confirmation signature type)",
        "operationId": "confirmDocumentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/confirm/signing": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Confirm document signing",
        "operationId": "confirmSigningUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/delete/signed": {
      "delete": {
        "tags": [
          "document-controller"
        ],
        "summary": "Delete signed document",
        "operationId": "deleteSignedDocumentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/delete/source": {
      "delete": {
        "tags": [
          "document-controller"
        ],
        "summary": "Delete source document",
        "operationId": "deleteSourceDocumentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/docusign-signing-ceremony": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Confirm document (for Confirmation signature type)",
        "operationId": "beginDocusignSigningCeremonyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/download/signed": {
      "get": {
        "tags": [
          "document-controller"
        ],
        "summary": "Download signed document",
        "operationId": "downloadSignedDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/download/source": {
      "get": {
        "tags": [
          "document-controller"
        ],
        "summary": "Download source document",
        "operationId": "downloadSourceDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/upload/signed": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Upload signed document",
        "operationId": "uploadSignedDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/document/{id}/viewed": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "documentViewed",
        "operationId": "documentViewedUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/docusign/web-hook": {
      "post": {
        "tags": [
          "docusign-web-hook-controller"
        ],
        "summary": "Ducusign webhook handler",
        "operationId": "handleWebHookUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "xml",
            "description": "xml",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/elasticsearch/rebuild": {
      "post": {
        "tags": [
          "elasticsearch-controller"
        ],
        "summary": "Rebuild indexes",
        "operationId": "rebuildIndexesUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/employment-status": {
      "get": {
        "tags": [
          "employment-status-controller"
        ],
        "summary": "Returns page of employment statuses",
        "operationId": "getEmploymentStatusPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for EmploymentStatus with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfEmploymentStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/employment-status/{id}": {
      "get": {
        "tags": [
          "employment-status-controller"
        ],
        "summary": "Get employment status by id",
        "operationId": "getEmploymentStatusUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmploymentStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/event/log": {
      "get": {
        "tags": [
          "event-logging-controller"
        ],
        "summary": "Get events log",
        "operationId": "getEventsLogUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "performerId",
            "in": "query",
            "description": "Performer filter. True for events with performer id in ($performerId)",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "Event log type filter. True for events with type in ($eventType)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfEventLog"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/fee-and-service": {
      "get": {
        "tags": [
          "fee-and-service-system-controller"
        ],
        "summary": "Returns page of services",
        "operationId": "getSystemFeeAndServicePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfFeeAndServiceResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "fee-and-service-system-controller"
        ],
        "summary": "Creates new system level standard service",
        "operationId": "createFeeAndServiceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/fee-and-service/name": {
      "get": {
        "tags": [
          "fee-and-service-system-controller"
        ],
        "summary": "Returns list of services by name",
        "operationId": "getServiceByNameUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for services with name equal $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Id filter. True for services with id not equal $id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeeAndServiceResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/fee-and-service/not-assigned": {
      "get": {
        "tags": [
          "fee-and-service-system-controller"
        ],
        "summary": "Returns page of services not assigned to company yet",
        "operationId": "getFeeAndServicePageNotAssignedToCompanyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "operatedBy",
            "in": "query",
            "description": "operatedBy",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfFeeAndServiceResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/fee-and-service/{id}": {
      "get": {
        "tags": [
          "fee-and-service-system-controller"
        ],
        "summary": "Returns service details",
        "operationId": "getServiceByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fee-and-service-system-controller"
        ],
        "summary": "Updates new system level standard service",
        "operationId": "updateFeeAndServiceUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/fee-and-service/{id}/operation-status": {
      "post": {
        "tags": [
          "fee-and-service-system-controller"
        ],
        "summary": "Changes operation status for system service",
        "operationId": "changeSystemServiceOperationStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeeAndServiceChangeOperationStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FeeAndServiceResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review": {
      "get": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Returns page of client's financial reviews",
        "operationId": "getFinancialReviewPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "client",
            "in": "query",
            "description": "Client filter. True for financial review with client id equal $client",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. True for financial review with status in ($status)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfFinancialReview"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Create draft financial review",
        "operationId": "createDraftFinancialReviewUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createRequest",
            "description": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialReviewRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FinancialReview"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{financialReviewGoalId}/account-links": {
      "post": {
        "tags": [
          "financial-review-goal-client-account-link-controller"
        ],
        "summary": "createLink",
        "operationId": "createLinkUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewGoalId",
            "in": "path",
            "description": "financialReviewGoalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientAccountLinkRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientAccountLink"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{financialReviewGoalId}/account-links/linked": {
      "get": {
        "tags": [
          "financial-review-goal-client-account-link-controller"
        ],
        "summary": "getLinkedAccountPage",
        "operationId": "getLinkedAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "financialReviewGoalId",
            "in": "path",
            "description": "financialReviewGoalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{financialReviewGoalId}/account-links/not-linked": {
      "get": {
        "tags": [
          "financial-review-goal-client-account-link-controller"
        ],
        "summary": "getNotLinkedAccountPage",
        "operationId": "getNotLinkedAccountPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "financialReviewGoalId",
            "in": "path",
            "description": "financialReviewGoalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections": {
      "get": {
        "tags": [
          "projections-controller"
        ],
        "summary": "Returns projections page",
        "operationId": "getProjectionsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfProjectionsPageResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/investment": {
      "get": {
        "tags": [
          "projections-investment-controller"
        ],
        "summary": "Returns default values",
        "operationId": "getDefaultParametersForInvestmentCalculatorUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectionsInvestmentGetDefaultResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "projections-investment-controller"
        ],
        "summary": "Saves projections parameters for investment calculator",
        "operationId": "saveProjectionsForInvestmentCalculatorUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectionsInvestmentCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProjectionsInvestmentCreateResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/investment/calculate": {
      "post": {
        "tags": [
          "projections-investment-controller"
        ],
        "summary": "Calculates projections for investment calculator",
        "operationId": "calculateProjectionsForInvestmentCalculatorUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectionsInvestmentCalculateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProjectionsPrototypeInvestmentCalculateResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/investment/calculate/{prototypeId}": {
      "get": {
        "tags": [
          "projections-investment-controller"
        ],
        "summary": "Returns result of calculation projections for investment calculator",
        "operationId": "getCalculationResultProjectionsForInvestmentCalculatorUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "prototypeId",
            "in": "path",
            "description": "prototypeId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectionsPrototypeInvestmentCalculateResultResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/investment/{id}": {
      "get": {
        "tags": [
          "projections-investment-controller"
        ],
        "summary": "Returns projections by id",
        "operationId": "getParametersForInvestmentCalculatorUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectionsInvestmentResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/pension": {
      "get": {
        "tags": [
          "projections-pension-controller"
        ],
        "summary": "Returns default values",
        "operationId": "cUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectionsPensionGetDefaultResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "projections-pension-controller"
        ],
        "summary": "Saves projections parameters for pension calculator",
        "operationId": "saveProjectionsForPensionCalculatorUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectionsPensionCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProjectionsPensionCreateResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/pension/calculate": {
      "post": {
        "tags": [
          "projections-pension-controller"
        ],
        "summary": "Calculates projections for pension calculator",
        "operationId": "calculateProjectionsForPensionCalculatorUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectionsPensionCalculateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProjectionsPrototypePensionCalculateResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/pension/calculate/{prototypeId}": {
      "get": {
        "tags": [
          "projections-pension-controller"
        ],
        "summary": "Returns result of calculation projections for pension calculator",
        "operationId": "getCalculationResultProjectionsForPensionCalculatorUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "prototypeId",
            "in": "path",
            "description": "prototypeId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectionsPrototypePensionCalculateResultResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/pension/{id}": {
      "get": {
        "tags": [
          "projections-pension-controller"
        ],
        "summary": "Returns projections by id",
        "operationId": "getByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectionsPensionResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/financial-review-goal/{goalId}/projections/{id}": {
      "get": {
        "tags": [
          "projections-controller"
        ],
        "summary": "Gets projections by id",
        "operationId": "getProjectionsByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Projections"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "projections-controller"
        ],
        "summary": "Deletes projections by id",
        "operationId": "deleteProjectionsByIdUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts": {
      "get": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Returns list of risk profiling attempts",
        "operationId": "getRiskProfilingAttemptsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskProfilingAttempt"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Starts a New Test at Risk Profiling Version",
        "operationId": "startNewTestUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Uses Previous Results at Risk Profiling Version",
        "operationId": "usePreviousResultsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsePreviousResultRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}": {
      "get": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Returns risk profiling attempt with test",
        "operationId": "getRiskProfilingAttemptUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/capacitity-for-loss": {
      "patch": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Retakes capacity for loss test",
        "operationId": "resetCapacityForLossUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptResponse"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/capacity-for-loss/inconsistencies/{inconsistencyId}/answers": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Gives a answer to inconsistency for Capacity For Loss",
        "operationId": "giveAnswerToInconsistencyForCapacityForLossUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inconsistencyId",
            "in": "path",
            "description": "inconsistencyId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InconsistencyAnswerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/capacity-for-loss/level": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Confirms Capacity For Loss Level",
        "operationId": "confirmCapacityForLossLevelUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/capacity-for-loss/questions/{questionId}/answers": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Gives a answer to question for Capacity for Loss",
        "operationId": "giveAnswerToQuestionForCapacityForLossUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "questionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionAnswerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/confirm": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Confirms Risk Profiling Attempt Risk Level",
        "operationId": "confirmRiskProfilingAttemptUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptConfirmRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/management": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Exits Risk Profiling",
        "operationId": "exitRiskProfilingUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Tries to manage attempt",
        "operationId": "tryToManageAttemptUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/risk-attitude/inconsistencies/{inconsistencyId}/answers": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Gives a answer to inconsistency for Risk Attitude",
        "operationId": "giveAnswerToInconsistencyForRiskAttitudeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inconsistencyId",
            "in": "path",
            "description": "inconsistencyId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InconsistencyAnswerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/risk-attitude/level": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Confirms Risk Attitude Level",
        "operationId": "confirmRiskAttitudeLevelUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RiskProfilingAttemptResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/risk-attitude/questions/{questionId}/answers": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Gives a answer to question for Risk Attitude",
        "operationId": "giveAnswerToQuestionForRiskAttitudeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "questionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionAnswerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goal/{goalId}/risk-profiling/attempts/{id}/status": {
      "post": {
        "tags": [
          "risk-profiling-attempt-controller"
        ],
        "summary": "Exits to Risk Profiling Version",
        "operationId": "exitToRiskProfilingVersionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/investment": {
      "post": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Create InvestmentGoal",
        "operationId": "createInvestmentGoalUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoalCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/investment/{id}/attitude-toward-costs": {
      "get": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Returns investment attitude toward costs",
        "operationId": "getInvestmentGoalAttitudeTowardsCostsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttitudeTowardsCosts"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Update investment attitude toward costs",
        "operationId": "changeInvestmentGoalAttitudeTowardsCostsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "attitudeTowardCosts",
            "description": "attitudeTowardCosts",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttitudeTowardsCosts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttitudeTowardsCosts"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/investment/{id}/existing-arguments-review": {
      "get": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Returns review existing arguments",
        "operationId": "getInvestmentGoalExistingArrangementsReviewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExistingArrangementsReview"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Update review existing arguments",
        "operationId": "changeInvestmentGoalExistingArrangementsReviewUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExistingArrangementsReviewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExistingArrangementsReview"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/investment/{id}/invested-money": {
      "get": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Returns invested money",
        "operationId": "getInvestmentGoalInvestedMoneyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentInvestedMoney"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Update invested money",
        "operationId": "changeInvestmentGoalInvestedMoneyUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvestmentInvestedMoney"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentInvestedMoney"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/investment/{id}/investment-objectives": {
      "get": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Returns investment objectives",
        "operationId": "getInvestmentGoalInvestmentObjectivesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentObjectives"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Update investment objectives",
        "operationId": "changeInvestmentGoalInvestmentObjectivesUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvestmentObjectives"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentObjectives"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/investment/{id}/investment-strategy": {
      "get": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Returns investment strategy preferences",
        "operationId": "getInvestmentGoalInvestmentStrategyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentStrategy"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Update investment strategy preferences",
        "operationId": "changeInvestmentGoalInvestmentStrategyUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvestmentStrategy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentStrategy"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/investment/{id}/investments": {
      "get": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Returns investments",
        "operationId": "getInvestmentGoalInvestmentsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Investment"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "investment-goal-controller"
        ],
        "summary": "Update investments",
        "operationId": "changeInvestmentGoalInvestmentsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalPlanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Investment"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension": {
      "post": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Create PensionGoal",
        "operationId": "createPensionGoalUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoalCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension/{id}/attitude-toward-costs": {
      "get": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Returns attitudeTowardCosts",
        "operationId": "getPensionGoalAttitudeTowardsCostsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttitudeTowardsCosts"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Update attitudeTowardCosts",
        "operationId": "changePensionGoalAttitudeTowardsCostsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttitudeTowardsCosts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttitudeTowardsCosts"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension/{id}/existing-arguments-review": {
      "get": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Returns review existing arguments",
        "operationId": "getPensionGoalExistingArrangementsReviewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExistingArrangementsReview"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Update review existing arguments",
        "operationId": "changePensionGoalExistingArrangementsReviewUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExistingArrangementsReviewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExistingArrangementsReview"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension/{id}/invested-money": {
      "get": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Returns pension invested money",
        "operationId": "getPensionGoalInvestedMoneyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PensionInvestedMoney"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Update pension invested money",
        "operationId": "changePensionGoalInvestedMoneyUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PensionInvestedMoney"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PensionInvestedMoney"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension/{id}/investment-strategy": {
      "get": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Returns investment strategy",
        "operationId": "getPensionGoalInvestmentStrategyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentStrategy"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Update investment strategy",
        "operationId": "changePensionGoalInvestmentStrategyUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvestmentStrategy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentStrategy"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension/{id}/pension-plans": {
      "get": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Returns current pension plan",
        "operationId": "getPensionGoalPensionPlanUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PensionPlan"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Update current pension plan",
        "operationId": "changePensionGoalPensionPlanUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PensionPlan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PensionPlan"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension/{id}/pensions": {
      "get": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Returns pensions",
        "operationId": "getPensionGoalPensionsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pension"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Update pensions",
        "operationId": "changePensionGoalPensionsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GoalPlanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pension"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/goals/pension/{id}/retirement-objectives": {
      "get": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Returns retirement objectives",
        "operationId": "getPensionGoalRetirementObjectivesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RetirementObjectives"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pension-goal-controller"
        ],
        "summary": "Update retirement objectives",
        "operationId": "changePensionGoalRetirementObjectivesUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetirementObjectives"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RetirementObjectives"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{financialReviewId}/risk-profiling/results": {
      "get": {
        "tags": [
          "risk-profiling-result-controller"
        ],
        "summary": "Returns list of risk profiling attempts",
        "operationId": "getRiskProfilingResultsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "financialReviewId",
            "in": "path",
            "description": "financialReviewId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskProfilingAttemptResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals": {
      "get": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Returns page of goals",
        "operationId": "getFinancialReviewGoalPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfFinancialReviewGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{goalId}/illustration-report/pension/accumulation": {
      "post": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Creates accumulation illustration report",
        "operationId": "createAccumulationIllustrationReportUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "parameters",
            "description": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PensionIllustrationReportParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{id}": {
      "get": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Returns goal",
        "operationId": "getFinancialReviewGoalByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Delete goal",
        "operationId": "deleteFinancialReviewGoalUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{id}/fee": {
      "get": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Returns fee",
        "operationId": "getFinancialReviewGoalFeeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Fee"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Update fee",
        "operationId": "changeFinancialReviewGoalFeeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "fee",
            "description": "fee",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Fee"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{id}/illustration-report-parameters": {
      "get": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Gets illustration report parameters",
        "operationId": "getIllustrationReportParametersUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PensionIllustrationReportParameters"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{id}/investment-goal-details": {
      "get": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Returns investment goal details",
        "operationId": "getInvestmentGoalDetailsByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{id}/pension-goal-details": {
      "get": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Returns pension goal details",
        "operationId": "getPensionGoalDetailsByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PensionGoal"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{id}/portfolio-theme": {
      "patch": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Review goal",
        "operationId": "setFinancialReviewGoalPortfolioThemeUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoalPortfolioThemeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoal"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{frId}/goals/{id}/review": {
      "post": {
        "tags": [
          "financial-review-goal-controller"
        ],
        "summary": "Review goal",
        "operationId": "reviewFinancialReviewGoalUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "frId",
            "in": "path",
            "description": "frId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReviewGoal"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}": {
      "get": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Returns financial review",
        "operationId": "getFinancialReviewByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReview"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Delete draft financial review",
        "operationId": "deleteDraftFinancialReviewUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/activate": {
      "post": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Activate draft financial review",
        "operationId": "activateDraftFinancialReviewUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReview"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/approval-status": {
      "post": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Change financial review approval status",
        "operationId": "changeFinancialReviewApprovalStateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialReviewChangeApprovalStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReview"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/complete": {
      "post": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Completes draft financial review",
        "operationId": "completeFinancialReviewUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReview"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/editing-mode": {
      "post": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Activate draft financial review",
        "operationId": "updateFinancialReviewEditingModeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialReviewChangeEditingModeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialReview"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Return FactFinding",
        "operationId": "getFactFindingUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FactFinding"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/assets": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns assets",
        "operationId": "getAssetsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assets"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update assets",
        "operationId": "changeAssetsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Assets"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assets"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/assets/letter-of-authority": {
      "patch": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Generate fact finding letter of authority",
        "operationId": "generateAssetsLetterOfAuthorityUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Investment",
              "Pension",
              "Cash"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assets"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/dependants": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns dependant info",
        "operationId": "getDependantInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DependantInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update dependant info",
        "operationId": "changeDependantInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DependantInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DependantInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/expenditures": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns expenditure info",
        "operationId": "getExpenditureInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExpenditureInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update expenditure info",
        "operationId": "changeExpenditureInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpenditureInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExpenditureInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/financial-priorities": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns financial priorities",
        "operationId": "getFinancialPrioritiesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialPriorities"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update financial priorities",
        "operationId": "changeFinancialPrioritiesUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialPriorities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialPriorities"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/general-informations": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns general information info",
        "operationId": "getGeneralInformationInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeneralInformationInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update general information info",
        "operationId": "changeGeneralInformationInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeneralInformationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeneralInformationInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/health": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns health info",
        "operationId": "getHealthInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update health info",
        "operationId": "changeHealthInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HealthInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/incomes": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns income info",
        "operationId": "getIncomeInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IncomeInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update income info",
        "operationId": "changeIncomeInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncomeInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IncomeInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/insurance/life": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns life insurance info",
        "operationId": "getLifeInsuranceInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LifeInsuranceInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update life insurance info",
        "operationId": "changeLifeInsuranceInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LifeInsuranceInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LifeInsuranceInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/insurance/medical": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns medical insurance info",
        "operationId": "getMedicalInsuranceInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MedicalInsuranceInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update medical insurance info",
        "operationId": "changeMedicalInsuranceInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MedicalInsuranceInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MedicalInsuranceInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/liabilities": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns liabilities",
        "operationId": "getLiabilitiesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Liabilities"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update liabilities",
        "operationId": "changeLiabilitiesUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Liabilities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Liabilities"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/provider/policy-number": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns provider policy numbers",
        "operationId": "getFactFindingProviderPolicyNumbersUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerName",
            "in": "query",
            "description": "Provider Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerAddress",
            "in": "query",
            "description": "Provider Address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/providers": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns provider info",
        "operationId": "getFactFindingProviderInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderInfo"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/fact-finding/will-and-trust": {
      "get": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Returns will and trust info",
        "operationId": "getWillAndTrustInfoUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WillAndTrustInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "fact-finding-controller"
        ],
        "summary": "Update will and trust info",
        "operationId": "changeWillAndTrustInfoUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WillAndTrustInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WillAndTrustInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/recommendation-letter/prototype": {
      "post": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Generates recommendation letter draft for a financial review",
        "operationId": "downloadRecommendationLetterPrototypeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Financial Review ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Recommendation Letter Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecommendationLetterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/financial-review/{id}/validate": {
      "get": {
        "tags": [
          "financial-review-controller"
        ],
        "summary": "Validate financial review",
        "operationId": "validateFinancialReviewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidationResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management": {
      "get": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Returns the list of payment managements",
        "operationId": "getPaymentManagementsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type filter. True for payment management with type equal $type",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfPaymentManagement"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management/one-time": {
      "post": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Create new one time payment management",
        "operationId": "createOneTimePaymentManagementUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createRequest",
            "description": "Request for create new one time payment management",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OneTimePaymentManagementRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PaymentManagement"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management/one-time/{id}": {
      "put": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Change one time payment management for given company {id}",
        "operationId": "changeOneTimePaymentManagementUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Get payment management for change by id $id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "changeRequest",
            "description": "Request for change one time payment management",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OneTimePaymentManagementRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentManagement"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management/regular": {
      "post": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Create new regular payment management",
        "operationId": "createRegularPaymentManagementUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createRequest",
            "description": "Request for create new regular payment management",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RegularPaymentManagementRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PaymentManagement"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management/regular/{id}": {
      "put": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Change regular payment management for given payment management {id}",
        "operationId": "changeRegularPaymentManagementUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Get payment management for change by id $id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "changeRequest",
            "description": "Request for change regular payment management",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RegularPaymentManagementRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentManagement"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management/transfer": {
      "post": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Create new transfer payment management",
        "operationId": "createTransferPaymentManagementUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createRequest",
            "description": "Request for create new transfer payment management",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TransferPaymentManagementRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PaymentManagement"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management/transfer/{id}": {
      "put": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Change transfer payment management for given payment management {id}",
        "operationId": "changeRegularPaymentManagementUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Get payment management for change by id $id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "changeRequest",
            "description": "Request for change transfer payment management",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TransferPaymentManagementRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentManagement"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/goal/{goalId}/payment-management/{id}": {
      "get": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Returns payment management detail for given payment management {id}",
        "operationId": "getPaymentManagementUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Get payment management by id $id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentManagement"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "payment-management-controller"
        ],
        "summary": "Delete payment management for given payment management {id}",
        "operationId": "deletePaymentManagementUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "description": "goalId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Get payment management for delete by id $id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/investment-type": {
      "get": {
        "tags": [
          "investment-type-controller"
        ],
        "summary": "Returns page of investment types",
        "operationId": "getInvestmentTypePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for investmentType with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfInvestmentType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/investment-type/{id}": {
      "get": {
        "tags": [
          "investment-type-controller"
        ],
        "summary": "Get investmentType by id",
        "operationId": "getInvestmentTypeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InvestmentType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/kyc-profile": {
      "get": {
        "tags": [
          "kyc-profile-controller"
        ],
        "summary": "User chat history",
        "operationId": "getKycProfilePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfKycProfile"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "kyc-profile-controller"
        ],
        "summary": "Creates KYC profile",
        "operationId": "createKycProfileUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KycProfile"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/kyc-profile/{profileId}": {
      "get": {
        "tags": [
          "kyc-profile-controller"
        ],
        "summary": "User chat history",
        "operationId": "getKycProfileUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "profileId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KycProfile"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "kyc-profile-controller"
        ],
        "summary": "Updates KYC profile",
        "operationId": "updateKycProfileUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "profileId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KycProfile"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "kyc-profile-controller"
        ],
        "summary": "Deletes KYC profile",
        "operationId": "deleteKycProfileUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "profileId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/kyc-profile/{profileId}/mark-as-default": {
      "post": {
        "tags": [
          "kyc-profile-controller"
        ],
        "summary": "Marks KYC profile as default",
        "operationId": "markKycProfileAsDefaultUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "profileId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KycProfile"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/me": {
      "get": {
        "tags": [
          "about-me-controller"
        ],
        "summary": "user",
        "operationId": "userUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "account.about.person.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.about.person.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.about.company.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "account.about.company.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.about.role.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "account.about.role.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.about.role.startPage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.authorities[0].scope",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "account.authorities[0].authority",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.version",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "account.type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "User",
              "Client"
            ]
          },
          {
            "name": "account.login",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.newEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.passwordExpirationDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "account.enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "account.locked",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "account.lockedUntil",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "account.failedLoginCounter",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "account.lastChatActivityTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "account.lastChatActivityUserId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.creationDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "account.activationDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "planningMode",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PLANNING_ON_MY_OWN",
              "PLANNING_ON_ADVISED"
            ]
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SYSTEM_ADMINISTRATOR",
              "COMPANY_ADMINISTRATOR",
              "ADVISER",
              "SUPPORT",
              "ASSISTANT"
            ]
          },
          {
            "name": "fullName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "primaryCompanyId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "primaryCompanyName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "primaryCompanyLogoDocumentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayCompanyId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "displayCompanyLogoDocumentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayCompanyName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AboutMe"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio": {
      "get": {
        "tags": [
          "model-portfolio-controller"
        ],
        "summary": "Returns page of model portfolios",
        "operationId": "getModelPortfolioPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfModelPortfolio"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-sets/list": {
      "get": {
        "tags": [
          "model-portfolio-set-controller"
        ],
        "summary": "Returns list of model portfolio sets",
        "operationId": "getModelPortfolioSetListUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolioSet"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-sets/page": {
      "get": {
        "tags": [
          "model-portfolio-set-controller"
        ],
        "summary": "Returns page of model portfolio sets",
        "operationId": "getModelPortfolioSetPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfModelPortfolioSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-sets/{portfolioSetId}": {
      "get": {
        "tags": [
          "model-portfolio-set-controller"
        ],
        "summary": "Returns a portfolio set by ID",
        "operationId": "getModelPortfolioSetUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "portfolioSetId",
            "in": "path",
            "description": "portfolioSetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelPortfolioSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-sets/{portfolioSetId}/portfolios": {
      "get": {
        "tags": [
          "model-portfolio-set-controller"
        ],
        "summary": "Returns list of model portfolio set portfolios",
        "operationId": "getModelPortfolioSetPortfoliosListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "portfolioSetId",
            "in": "path",
            "description": "portfolioSetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolio"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes": {
      "post": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Creates a model portfolio theme",
        "operationId": "createModelPortfolioThemeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelPortfolioThemeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ModelPortfolioTheme"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/list": {
      "get": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Returns list of model portfolio themes",
        "operationId": "getModelPortfolioThemeListUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolioTheme"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/page": {
      "get": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Returns page of model portfolio themes",
        "operationId": "getModelPortfolioThemePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfModelPortfolioTheme"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/{themeId}": {
      "get": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Returns model portfolio theme by ID",
        "operationId": "getModelPortfolioThemeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "themeId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelPortfolioTheme"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Updates a model portfolio theme",
        "operationId": "updateModelPortfolioThemeUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "themeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelPortfolioThemeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ModelPortfolioTheme"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/{themeId}/documents": {
      "post": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Uploads a model portfolio theme document",
        "operationId": "uploadModelPortfolioThemeDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "Model portfolio ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "comment",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "type",
            "type": "string",
            "enum": [
              "FACT_SHEET"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelPortfolioThemeDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/{themeId}/documents/history": {
      "get": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Gets model portfolio document history",
        "operationId": "getModelPortfolioThemeDocumentHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "Model Portfolio ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "Type of a document",
            "required": false,
            "type": "string",
            "enum": [
              "FACT_SHEET"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolioThemeDocument"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/{themeId}/documents/{documentId}": {
      "get": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Download model portfolio theme document with ID = {documentId}",
        "operationId": "downloadModelPortfolioThemeDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "Model Portfolio ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/{themeId}/portfolio-sets/list": {
      "get": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Returns page of model theme portfolio sets",
        "operationId": "getModelPortfolioThemePortfolioSetListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "themeId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolioSet"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio-themes/{themeId}/portfolio-sets/page": {
      "get": {
        "tags": [
          "model-portfolio-theme-controller"
        ],
        "summary": "Returns page of model theme portfolio sets",
        "operationId": "getModelPortfolioThemePortfolioSetPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "themeId",
            "in": "path",
            "description": "themeId",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfModelPortfolioSet"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio/{id}": {
      "get": {
        "tags": [
          "model-portfolio-controller"
        ],
        "summary": "Gets a model portfolio",
        "operationId": "updateModelPortfolioUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model Portfolio ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelPortfolio"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "model-portfolio-controller"
        ],
        "summary": "Updates a model portfolio",
        "operationId": "updateModelPortfolioUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model Portfolio ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateModelPortfolioRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelPortfolio"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio/{id}/documents": {
      "post": {
        "tags": [
          "model-portfolio-controller"
        ],
        "summary": "Uploads a model portfolio document",
        "operationId": "uploadModelPortfolioDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model portfolio ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "formData",
            "name":"comment",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "type",
            "type": "string",
            "enum": [
              "FACT_SHEET"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelPortfolioDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio/{id}/documents/history": {
      "get": {
        "tags": [
          "model-portfolio-controller"
        ],
        "summary": "Gets model portfolio document history",
        "operationId": "getModelPortfolioDocumentHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model Portfolio ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "Type of a document",
            "required": false,
            "type": "string",
            "enum": [
              "FACT_SHEET"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPortfolioDocument"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/model-portfolio/{id}/documents/{documentId}": {
      "get": {
        "tags": [
          "model-portfolio-controller"
        ],
        "summary": "Download document with ID = {documentId}",
        "operationId": "downloadModelPortfolioDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model Portfolio ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-error": {
      "get": {
        "tags": [
          "notification-error-log-controller"
        ],
        "summary": "Returns the list of notificationLogError",
        "operationId": "getNotificationLogErrorsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "query",
            "description": "Subject filter. True for notification log error with subject like $subject",
            "required": false,
            "type": "string"
          },
          {
            "name": "sendTo",
            "in": "query",
            "description": "Send to filter. True for notification log error with sendTo like $sendTo",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "description": "Created at filter. True for notification log error with createdAt more or equal $createdAtFrom",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "description": "Created at filter. True for notification log error with createdAt less or equal $createdAtTo",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfNotificationError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-error/{id}": {
      "get": {
        "tags": [
          "notification-error-log-controller"
        ],
        "summary": "Returns notificationLogError detail for given notificationLog {id}",
        "operationId": "getNotificationLogErrorUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationError"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-error/{id}/resend": {
      "get": {
        "tags": [
          "notification-error-log-controller"
        ],
        "summary": "Resend notification by notificationLogError for given notificationLog {id}",
        "operationId": "resendErrorNotificationUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-performed": {
      "get": {
        "tags": [
          "notification-log-controller"
        ],
        "summary": "Returns the list of notificationLog",
        "operationId": "getNotificationLogListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "query",
            "description": "Subject filter. True for notification log with subject like $subject",
            "required": false,
            "type": "string"
          },
          {
            "name": "sendTo",
            "in": "query",
            "description": "Send to filter. True for notification log with sendTo like $sendTo",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "description": "Created at filter. True for notification log with createdAt more or equal $createdAtFrom",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "description": "Created at filter. True for notification log with createdAt less or equal $createdAtTo",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfNotificationLog"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-performed/{id}": {
      "get": {
        "tags": [
          "notification-log-controller"
        ],
        "summary": "Returns notificationLog detail for given notificationLog {id}",
        "operationId": "getNotificationLogUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationLog"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-template": {
      "get": {
        "tags": [
          "notification-template-controller"
        ],
        "summary": "List notification templates",
        "operationId": "listNotificationTemplatesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "query",
            "description": "Company filter. True for notification template with company id equal $company",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type filter. True for notification template with type in ($type)",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Type filter. True for notification template with name in ($name)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfNotificationTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-template/default": {
      "get": {
        "tags": [
          "notification-template-controller"
        ],
        "summary": "Get default notification templates",
        "operationId": "listDefaultNotificationTemplatesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfDefaultNotificationTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-template/default/{id}": {
      "get": {
        "tags": [
          "notification-template-controller"
        ],
        "summary": "Get default notification template by id",
        "operationId": "getDefaultNotificationTemplateUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DefaultNotificationTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "notification-template-controller"
        ],
        "summary": "Update default notification template with id = {id}",
        "operationId": "updateDefaultNotificationTemplateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DefaultNotificationTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DefaultNotificationTemplate"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-template/default/{id}/status": {
      "post": {
        "tags": [
          "notification-template-controller"
        ],
        "summary": "Change status for default notification template with id = {id}",
        "operationId": "changeDefaultNotificationTemplateStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DefaultNotificationTemplateStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DefaultNotificationTemplate"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notification-template/{id}": {
      "get": {
        "tags": [
          "notification-template-controller"
        ],
        "summary": "Get notification template by ID",
        "operationId": "getNotificationTemplateUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/notifications": {
      "get": {
        "tags": [
          "client-notification-controller"
        ],
        "summary": "Returns page of client notifications",
        "operationId": "getClientNotificationsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "Client filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfClientNotification"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "client-notification-controller"
        ],
        "summary": "Changes client's notifications status",
        "operationId": "changeClientNotificationsStatusUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientNotificationsStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientNotification"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/onfido/web-hook": {
      "post": {
        "tags": [
          "kyc-web-hook-controller"
        ],
        "summary": "The Onfido webhook handler",
        "operationId": "handleWebHookUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/pension-type": {
      "get": {
        "tags": [
          "pension-type-controller"
        ],
        "summary": "Returns page of pension types",
        "operationId": "getPensionTypePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for pensionType with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfPensionType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/pension-type/{id}": {
      "get": {
        "tags": [
          "pension-type-controller"
        ],
        "summary": "Get pensionType by id",
        "operationId": "getPensionTypeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PensionType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/primary-companies": {
      "get": {
        "tags": [
          "primary-company-controller"
        ],
        "summary": "Returns page of primary companies",
        "operationId": "getPrimaryCompanyPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfPrimaryCompany"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "primary-company-controller"
        ],
        "summary": "Creates a primary company",
        "operationId": "createPrimaryCompanyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrimaryCompanyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrimaryCompany"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/primary-companies/{companyId}": {
      "get": {
        "tags": [
          "primary-company-controller"
        ],
        "summary": "Gets a primary company by ID",
        "operationId": "getPrimaryCompanyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "companyId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrimaryCompany"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/primary-companies/{companyId}/documents": {
      "post": {
        "tags": [
          "primary-company-controller"
        ],
        "summary": "Uploads a primary company document",
        "operationId": "uploadPrimaryCompanyDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "formData",
            "name": "type",
            "description": "Document type",
            "required": true,
            "type": "string",
            "enum": [
              "LOGO"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PrimaryCompanyDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/primary-companies/{companyId}/documents/{documentId}": {
      "get": {
        "tags": [
          "primary-company-controller"
        ],
        "summary": "Download document with ID = {documentId}",
        "operationId": "downloadPrimaryCompanyDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/property": {
      "get": {
        "tags": [
          "property-controller"
        ],
        "summary": "Get properties",
        "operationId": "getPropertiesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "Property group filter. True for properties with group equal $group",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfProperty"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "property-controller"
        ],
        "summary": "Change properties",
        "operationId": "changePropertiesUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "properties",
            "description": "properties",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Property"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/property/group": {
      "get": {
        "tags": [
          "property-controller"
        ],
        "summary": "Get property groups",
        "operationId": "getPropertyGroupsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfPropertyGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/property/group/{id}": {
      "get": {
        "tags": [
          "property-controller"
        ],
        "summary": "Get property groups",
        "operationId": "getPropertyGroupUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PropertyGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/risk-profiling/test": {
      "patch": {
        "tags": [
          "risk-profiling-test-controller"
        ],
        "summary": "Updates the risk profiling test",
        "operationId": "updateRiskProfilingTestUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/role": {
      "get": {
        "tags": [
          "role-controller"
        ],
        "summary": "Returns page of roles",
        "operationId": "getRolePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for roles with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleTypes",
            "in": "query",
            "description": "Role type id filter. True for roles with type id in ($roleTypes)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfRole"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "role-controller"
        ],
        "summary": "Create new role",
        "operationId": "createRoleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createRequest",
            "description": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/role/{id}": {
      "get": {
        "tags": [
          "role-controller"
        ],
        "summary": "Returns role for given id = {id}",
        "operationId": "getRoleByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "role-controller"
        ],
        "summary": "Update role for given id = {id}",
        "operationId": "updateRoleUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "changeRequest",
            "description": "changeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "role-controller"
        ],
        "summary": "Delete role for given id = {id}",
        "operationId": "deleteRoleUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/roleType": {
      "get": {
        "tags": [
          "role-type-controller"
        ],
        "summary": "Returns page of roleTypes",
        "operationId": "getRoleTypePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for roleTypes with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfRoleType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/roleType/{id}": {
      "get": {
        "tags": [
          "role-type-controller"
        ],
        "summary": "Returns user roleType detail for given roleType {id}",
        "operationId": "getRoleTypeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Get roleType by id $id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/saving-purpose": {
      "get": {
        "tags": [
          "saving-purpose-controller"
        ],
        "summary": "Returns page of SavingPurposes",
        "operationId": "getSavingPurposePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for SavingPurpose with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfSavingPurpose"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/saving-purpose/{id}": {
      "get": {
        "tags": [
          "saving-purpose-controller"
        ],
        "summary": "Get SavingPurpose by id",
        "operationId": "getSavingPurposeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SavingPurpose"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/seccl/web-hook": {
      "post": {
        "tags": [
          "seccl-web-hook-controller"
        ],
        "summary": "Seccl webhook handler",
        "operationId": "handleWebHookUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecclWebHookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/surfly/agents": {
      "get": {
        "tags": [
          "surfly-controller"
        ],
        "summary": "Gets surfly sessions",
        "operationId": "getAgentsUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SurflyAgent"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/surfly/agents/{agentId}": {
      "get": {
        "tags": [
          "surfly-controller"
        ],
        "summary": "Gets surfly sessions",
        "operationId": "getAgentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "agentId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurflyAgent"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/surfly/queue": {
      "get": {
        "tags": [
          "surfly-controller"
        ],
        "summary": "Gets surfly queued sessions",
        "operationId": "getQueuedSessionsUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SurflyQueuedSession"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/surfly/sessions": {
      "get": {
        "tags": [
          "surfly-controller"
        ],
        "summary": "Gets surfly sessions",
        "operationId": "getSessionsUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SurflySession"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/surfly/sessions/{sessionId}/delete": {
      "post": {
        "tags": [
          "surfly-controller"
        ],
        "summary": "Gets surfly active sessions",
        "operationId": "endSessionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "sessionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurflySession"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/surfly/web-hook": {
      "post": {
        "tags": [
          "surfly-controller"
        ],
        "summary": "Surfly session started",
        "operationId": "handleWebhookUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "event",
            "description": "event",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/system-settings": {
      "get": {
        "tags": [
          "system-settings-controller"
        ],
        "summary": "Returns a list of system settings",
        "operationId": "getSystemSettingsPageUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SystemSettingsPageResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/system-settings/{id}": {
      "get": {
        "tags": [
          "system-settings-controller"
        ],
        "summary": "Returns system settings by id",
        "operationId": "getSystemSettingsByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemSettingsResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "system-settings-controller"
        ],
        "summary": "Updates system settings",
        "operationId": "updateSystemSettingsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemSettingsUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemSettingsResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/task": {
      "get": {
        "tags": [
          "task-controller"
        ],
        "summary": "List tasks",
        "operationId": "getTasksPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. True for task with status in ($status)",
            "required": false,
            "type": "string",
            "enum": [
              "Open",
              "Closed",
              "Overdue"
            ]
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User filter. True tasks with user ID in ($userId)",
            "required": false,
            "type": "string"
          },
          {
            "name": "minDueDate",
            "in": "query",
            "description": "Min due date filter. True for task with dueDate greater than or equal ($minDueDate)",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxDueDate",
            "in": "query",
            "description": "Max due date filter. True for task with dueDate greater than or equal ($maxDueDate)",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfTask"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "user-task-controller"
        ],
        "summary": "Creates a task",
        "operationId": "createUserTaskUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/task-template": {
      "get": {
        "tags": [
          "task-template-controller"
        ],
        "summary": "List task templates",
        "operationId": "getTaskTemplatesPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfTaskTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/task-template/{id}": {
      "get": {
        "tags": [
          "task-template-controller"
        ],
        "summary": "Get task template by ID",
        "operationId": "getTaskTemplateUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskTemplate"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "task-template-controller"
        ],
        "summary": "Change status of task template with ID = {id}",
        "operationId": "changeTaskTemplateStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskTemplateStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskTemplate"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "task-template-controller"
        ],
        "summary": "Update task template with ID = {id}",
        "operationId": "updateTaskTemplateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskTemplate"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/task/{id}": {
      "get": {
        "tags": [
          "task-controller"
        ],
        "summary": "Get task by ID",
        "operationId": "getTaskUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "task-controller"
        ],
        "summary": "Updates task",
        "operationId": "updateTaskUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/task/{id}/status": {
      "post": {
        "tags": [
          "task-controller"
        ],
        "summary": "Changes task status",
        "operationId": "changeTaskStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/tax-position-type": {
      "get": {
        "tags": [
          "tax-position-type-controller"
        ],
        "summary": "Returns page of tax position types",
        "operationId": "getTaxPositionTypePageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name filter. True for TaxPositionType with name like $name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfTaxPositionType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/tax-position-type/{id}": {
      "get": {
        "tags": [
          "tax-position-type-controller"
        ],
        "summary": "Get tax position type by id",
        "operationId": "getTaxPositionTypeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaxPositionType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Returns page of users",
        "operationId": "getUserPageUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name filter. True for user with lastName like $lastName",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First name filter. True for user with name firstName $firstName",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email filter. True for user with name email $email",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone filter. True for user with phone like $phone",
            "required": false,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company id filter. True for user with id in $company",
            "required": false,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Role id filter. True for user with role id in $roles",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleTypes",
            "in": "query",
            "description": "Role Type id filter. True for user with role id in $roleTypes",
            "required": false,
            "type": "string"
          },
          {
            "name": "locked",
            "in": "query",
            "description": "Locked filter. True for companies with locked in ($locked)",
            "required": false,
            "type": "string"
          },
          {
            "name": "primaryCompanyId",
            "in": "query",
            "description": "Primary company ID filter. True for users with primary company ID in ($primaryCompanyId)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfUser"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Create new user",
        "operationId": "createUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createRequest",
            "description": "createRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/account/{id}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Returns user details for given account ID = {id}",
        "operationId": "getUserByAccountIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/download": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Download back office users",
        "operationId": "downloadBackOfficeUsersUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/list": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Returns back office users list",
        "operationId": "listBackOfficeUsersUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BackOfficeUserInfo"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/search": {
      "get": {
        "tags": [
          "elasticsearch-controller"
        ],
        "summary": "Returns page of users",
        "operationId": "userSearchUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "fullName",
            "in": "query",
            "description": "Full name filter. True for user with name $fullName",
            "required": false,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company id filter. True for user with id in $company",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roleType",
            "in": "query",
            "description": "Role Type id filter. True for user with role id in $roleTypes",
            "required": false,
            "type": "string"
          },
          {
            "name": "competencyIDs",
            "in": "query",
            "description": "Competency id list filter. True for user with competency id in $competencyIDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the requested page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of a page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfEsUser"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/{id}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Returns user details for given id = {id}",
        "operationId": "getUserUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "user-controller"
        ],
        "summary": "Change user with given id = {id}",
        "operationId": "changeUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "changeRequest",
            "description": "changeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/{id}/company": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Returns company details for given user id = {id}",
        "operationId": "getUserCompanyUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/{id}/lock": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Lock / Unlock user",
        "operationId": "changeUserLockStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/{userId}/documents": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Uploads a primary company document",
        "operationId": "uploadUserDocumentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "type",
            "description": "Document type",
            "required": true,
            "type": "string",
            "enum": [
              "AVATAR"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDocument"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/user/{userId}/documents/{documentId}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Download document with ID = {documentId}",
        "operationId": "downloadUserDocumentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/users/{userId}/dashboard": {
      "get": {
        "tags": [
          "dashboard-controller"
        ],
        "summary": "Returns user dashboard view",
        "operationId": "getDashboardViewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "months",
            "description": "months",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AbstractDashboardView"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/users/{userId}/dashboard/adviser-view": {
      "get": {
        "tags": [
          "dashboard-controller"
        ],
        "summary": "Returns adviser dashboard view",
        "operationId": "getAdviserDashboardViewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "months",
            "description": "months",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdviserDashboardView"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/users/{userId}/dashboard/company-admin-view": {
      "get": {
        "tags": [
          "dashboard-controller"
        ],
        "summary": "Returns company admin dashboard view",
        "operationId": "getCompanyAdminDashboardViewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "months",
            "description": "months",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyAdminDashboardView"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    },
    "/api/v1/vonage/web-hook": {
      "post": {
        "tags": [
          "webhook-controller"
        ],
        "summary": "Webhook event handler",
        "operationId": "webhookEventHandlerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "event",
            "description": "event",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauthpassword": [
              "global"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "oauthclientcredentials": {
      "type": "oauth2",
      "tokenUrl": "/oauth/token",
      "flow": "application",
      "scopes": {
        "global": ""
      }
    },
    "oauthpassword": {
      "type": "oauth2",
      "tokenUrl": "/oauth/token",
      "flow": "password",
      "scopes": {
        "global": ""
      }
    }
  },
  "definitions": {
    "About": {
      "type": "object",
      "properties": {
        "company": {
          "$ref": "#/definitions/LongProjection"
        },
        "person": {
          "$ref": "#/definitions/StringProjection"
        },
        "role": {
          "$ref": "#/definitions/RoleProjection"
        }
      },
      "title": "About"
    },
    "AboutMe": {
      "type": "object",
      "properties": {
        "allowedActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "company": {
          "$ref": "#/definitions/CompanyInfo"
        },
        "displayCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "displayCompanyLogoDocumentId": {
          "type": "string"
        },
        "displayCompanyName": {
          "type": "string"
        },
        "grantedAuthorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopedAuthority"
          }
        },
        "id": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "person": {
          "$ref": "#/definitions/StringProjection"
        },
        "planningMode": {
          "type": "string",
          "enum": [
            "PLANNING_ON_MY_OWN",
            "PLANNING_ON_ADVISED"
          ]
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryCompanyLogoDocumentId": {
          "type": "string"
        },
        "primaryCompanyName": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/RoleProjection"
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Client"
          ]
        }
      },
      "title": "AboutMe"
    },
    "AbstractDashboardView": {
      "type": "object",
      "title": "AbstractDashboardView"
    },
    "Account": {
      "type": "object",
      "properties": {
        "about": {
          "$ref": "#/definitions/About"
        },
        "activationDate": {
          "type": "string",
          "format": "date-time"
        },
        "authorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommonGrantedAuthority"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "failedLoginCounter": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "lastChatActivityTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastChatActivityUserId": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "lockedUntil": {
          "type": "string",
          "format": "date"
        },
        "login": {
          "type": "string"
        },
        "newEmail": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordExpirationDate": {
          "type": "string",
          "format": "date"
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Client"
          ]
        }
      },
      "title": "Account"
    },
    "AccountActivationRequest": {
      "type": "object",
      "required": [
        "id",
        "password",
        "token"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "title": "AccountActivationRequest"
    },
    "Address": {
      "type": "object",
      "properties": {
        "addressLineOne": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "addressLineThree": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "addressLineTwo": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "buildingName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "buildingNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "city": {
          "type": "string",
          "minLength": 0,
          "maxLength": 50
        },
        "country": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "department": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "flatNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "fullAddress": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 8
        }
      },
      "title": "Address"
    },
    "AdviserDashboardView": {
      "type": "object",
      "properties": {
        "clientAccounts": {
          "$ref": "#/definitions/ClientAccountsDashboardInfo"
        },
        "numberOfClients": {
          "type": "integer",
          "format": "int64"
        },
        "numberOfFinancialReviews": {
          "type": "integer",
          "format": "int64"
        },
        "portfolios": {
          "$ref": "#/definitions/PortfoliosDashboardInfo"
        },
        "revenues": {
          "$ref": "#/definitions/RevenuesDashboardInfo"
        }
      },
      "title": "AdviserDashboardView"
    },
    "AdvisorInfo": {
      "type": "object",
      "properties": {
        "accounts": {
          "$ref": "#/definitions/ClientAccountsDashboardInfo"
        },
        "assets": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "numberOfAccounts": {
          "type": "integer",
          "format": "int32"
        },
        "portfolios": {
          "$ref": "#/definitions/PortfoliosDashboardInfo"
        },
        "revenues": {
          "$ref": "#/definitions/RevenuesDashboardInfo"
        }
      },
      "title": "AdvisorInfo"
    },
    "AdvisorsDashboardInfo": {
      "type": "object",
      "properties": {
        "advisors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvisorInfo"
          }
        }
      },
      "title": "AdvisorsDashboardInfo"
    },
    "AdvisoryCompanyDocument": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentType": {
          "type": "string",
          "enum": [
            "LOGO"
          ]
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "AdvisoryCompanyDocument"
    },
    "ApplicationDocumentRequest": {
      "type": "object",
      "required": [
        "comment",
        "templateId"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "templateId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ApplicationDocumentRequest"
    },
    "AssetProperty": {
      "type": "object",
      "required": [
        "currentValuation",
        "owner"
      ],
      "properties": {
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "country": {
          "$ref": "#/definitions/LongProjection"
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "hasMortgage": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "main": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "purchaseDate": {
          "type": "string",
          "format": "date"
        },
        "purchasePrice": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "ukOverseas": {
          "type": "boolean"
        }
      },
      "title": "AssetProperty"
    },
    "AssetPropertyInfo": {
      "type": "object",
      "properties": {
        "assetPropertyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetProperty"
          }
        }
      },
      "title": "AssetPropertyInfo"
    },
    "Assets": {
      "type": "object",
      "required": [
        "assetPropertyInfo",
        "businessAssetInfo",
        "cashInfo",
        "depositInfo",
        "investmentInfo",
        "otherAssetInfo",
        "pensionInfo"
      ],
      "properties": {
        "assetPropertyInfo": {
          "$ref": "#/definitions/AssetPropertyInfo"
        },
        "businessAssetInfo": {
          "$ref": "#/definitions/BusinessAssetInfo"
        },
        "cashInfo": {
          "$ref": "#/definitions/CashInfo"
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "depositInfo": {
          "$ref": "#/definitions/DepositInfo"
        },
        "investmentInfo": {
          "$ref": "#/definitions/InvestmentInfo"
        },
        "otherAssetInfo": {
          "$ref": "#/definitions/OtherAssetInfo"
        },
        "pensionInfo": {
          "$ref": "#/definitions/PensionInfo"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "Assets"
    },
    "AtgProvider": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "secclId": {
          "type": "string"
        },
        "supportsPensions": {
          "type": "boolean"
        }
      },
      "title": "AtgProvider"
    },
    "AttitudeTowardsCosts": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "completed": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "LOW_FEES",
            "HIGHER_FEES",
            "I_DONT_KNOW"
          ]
        }
      },
      "title": "AttitudeTowardsCosts"
    },
    "AuditInfo": {
      "type": "object",
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "lastModifiedDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "AuditInfo"
    },
    "BackOfficeUserInfo": {
      "type": "object",
      "properties": {
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Client"
          }
        },
        "company": {
          "$ref": "#/definitions/LongProjection"
        },
        "competencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LongProjection"
          }
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/Role"
        }
      },
      "title": "BackOfficeUserInfo"
    },
    "BusinessAsset": {
      "type": "object",
      "required": [
        "currentValuation",
        "owner"
      ],
      "properties": {
        "assetType": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "dateOfAcquisition": {
          "type": "string",
          "format": "date"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "originalPurchasePrice": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        }
      },
      "title": "BusinessAsset"
    },
    "BusinessAssetInfo": {
      "type": "object",
      "properties": {
        "businessAssetList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessAsset"
          }
        }
      },
      "title": "BusinessAssetInfo"
    },
    "CapacityForLoss": {
      "type": "object",
      "properties": {
        "confirmed": {
          "type": "boolean"
        },
        "inconsistencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskProfilingInconsistency"
          }
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        }
      },
      "title": "CapacityForLoss"
    },
    "Cash": {
      "type": "object",
      "required": [
        "amount",
        "owner"
      ],
      "properties": {
        "accountProvider": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "amount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        }
      },
      "title": "Cash"
    },
    "CashInfo": {
      "type": "object",
      "properties": {
        "cashList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cash"
          }
        }
      },
      "title": "CashInfo"
    },
    "ChangeEmailRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "password": {
          "type": "string"
        }
      },
      "title": "ChangeEmailRequest"
    },
    "ChangePasswordRequest": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "title": "ChangePasswordRequest"
    },
    "ChangeStatusRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      },
      "title": "ChangeStatusRequest"
    },
    "ChatClientInformation": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "lastMessage": {
          "$ref": "#/definitions/ChatUserMessageData"
        },
        "name": {
          "type": "string"
        },
        "preferred": {
          "type": "boolean"
        },
        "unreadMessagesCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ChatClientInformation"
    },
    "ChatClientListResponse": {
      "type": "object",
      "properties": {
        "clientList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChatClientInformation"
          }
        }
      },
      "title": "ChatClientListResponse"
    },
    "ChatDocumentRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "recipientId": {
          "type": "string"
        }
      },
      "title": "ChatDocumentRequest"
    },
    "ChatDocumentResponse": {
      "type": "object",
      "properties": {
        "contentLength": {
          "type": "integer",
          "format": "int64"
        },
        "contentType": {
          "type": "string"
        },
        "documentId": {
          "type": "string"
        },
        "documentName": {
          "type": "string"
        }
      },
      "title": "ChatDocumentResponse"
    },
    "ChatIfaInformation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "title": "ChatIfaInformation"
    },
    "ChatIfaListResponse": {
      "type": "object",
      "properties": {
        "ifaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChatIfaInformation"
          }
        },
        "lastMessage": {
          "$ref": "#/definitions/ChatUserMessageData"
        },
        "unreadMessagesCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ChatIfaListResponse"
    },
    "ChatLogEntry": {
      "type": "object",
      "properties": {
        "messageData": {
          "$ref": "#/definitions/ChatUserMessageData"
        },
        "type": {
          "type": "string",
          "enum": [
            "CHAT_USER_MESSAGE",
            "SCREEN_SHARE_RESPONSE",
            "JOIN_CO_BROWSING_SESSION_REQUEST",
            "CO_BROWSING_SESSION_STATUS",
            "CALL_SESSION_RESPONSE",
            "JOIN_CALL_SESSION_REQUEST",
            "CALL_SESSION_STATUS",
            "START_CALL_REQUEST",
            "START_CALL_REJECT",
            "CALL_SESSION_STREAM_CREATED",
            "CALL_SESSION_STREAM_DESTROYED",
            "USER_CONNECTION",
            "USER_ACTIVATE",
            "USERS_LIST",
            "USERS_LIST_REQUEST",
            "ERROR"
          ]
        }
      },
      "title": "ChatLogEntry"
    },
    "ChatUserInformation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roleType": {
          "type": "string",
          "enum": [
            "SYSTEM_ADMINISTRATOR",
            "COMPANY_ADMINISTRATOR",
            "ADVISER",
            "SUPPORT",
            "ASSISTANT"
          ]
        },
        "userId": {
          "type": "string"
        }
      },
      "title": "ChatUserInformation"
    },
    "ChatUserListResponse": {
      "type": "object",
      "properties": {
        "userList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChatUserInformation"
          }
        }
      },
      "title": "ChatUserListResponse"
    },
    "ChatUserMessageData": {
      "type": "object",
      "required": [
        "messageId",
        "messageStatus"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "messageId": {
          "type": "string"
        },
        "messageStatus": {
          "type": "string",
          "enum": [
            "READ",
            "UNREAD"
          ]
        },
        "recipientId": {
          "type": "string"
        },
        "recipientName": {
          "type": "string"
        },
        "senderAccountType": {
          "type": "string",
          "enum": [
            "User",
            "Client"
          ]
        },
        "senderId": {
          "type": "string"
        },
        "senderName": {
          "type": "string"
        },
        "senderRole": {
          "type": "string",
          "enum": [
            "SYSTEM_ADMINISTRATOR",
            "COMPANY_ADMINISTRATOR",
            "ADVISER",
            "SUPPORT",
            "ASSISTANT"
          ]
        },
        "timeStamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "ChatUserMessageData"
    },
    "Client": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "bankDetails": {
          "$ref": "#/definitions/ClientBankDetails"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "company": {
          "$ref": "#/definitions/LongProjection"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "createdBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "displayCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "displayCompanyLogoDocumentId": {
          "type": "string"
        },
        "displayCompanyName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "employerAddress": {
          "$ref": "#/definitions/Address"
        },
        "employerDetails": {
          "$ref": "#/definitions/EmployerDetails"
        },
        "employmentStatus": {
          "type": "string",
          "enum": [
            "CARER",
            "EMPLOYED",
            "RETIRED",
            "SELF_EMPLOYED",
            "EDUCATION",
            "OTHER"
          ]
        },
        "feeAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "financialPriorities": {
          "$ref": "#/definitions/FinancialPriorities"
        },
        "financialReviewDate": {
          "type": "string",
          "format": "date"
        },
        "forename": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": [
            "MALE",
            "FEMALE"
          ]
        },
        "hasActiveDirectDebitPayments": {
          "type": "boolean"
        },
        "hasEditableFinancialReview": {
          "type": "boolean"
        },
        "homePhone": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "ifaAssignmentStatus": {
          "type": "string",
          "enum": [
            "PENDING_ASSIGNMENT",
            "ASSIGNED"
          ]
        },
        "ifaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IFA"
          }
        },
        "interestPoint": {
          "type": "string",
          "enum": [
            "INVESTMENT",
            "PENSION",
            "MORTGAGE",
            "PROTECTION",
            "TECH_SUPPORT"
          ]
        },
        "isIsaConfirmationDocumentSigned": {
          "type": "boolean"
        },
        "isMandatoryDocumentsSigned": {
          "type": "boolean"
        },
        "isSippConfirmationDocumentSigned": {
          "type": "boolean"
        },
        "isaConfirmationDocumentId": {
          "type": "string"
        },
        "kycStatus": {
          "type": "string",
          "enum": [
            "PENDING_VERIFICATION",
            "VERIFIED",
            "REJECTED",
            "CHANGES_PENDING_VERIFICATION",
            "CHANGES_REJECTED"
          ]
        },
        "kycStatusDescription": {
          "type": "string"
        },
        "maritalStatus": {
          "type": "string",
          "enum": [
            "SINGLE",
            "SEPARATED",
            "MARRIED",
            "DIVORCED",
            "WIDOWED",
            "LIVING_WITH_PARTNER"
          ]
        },
        "marketingConsent": {
          "type": "boolean"
        },
        "meansOfCommunications": {
          "$ref": "#/definitions/MeansOfCommunications"
        },
        "mobilePhone": {
          "type": "string"
        },
        "nameTitle": {
          "type": "string",
          "enum": [
            "MR",
            "MS",
            "MRS",
            "MISS"
          ]
        },
        "nationalInsuranceNumber": {
          "type": "string"
        },
        "nationality": {
          "type": "string"
        },
        "origin": {
          "type": "string",
          "enum": [
            "PORTAL",
            "MANUAL",
            "XLS"
          ]
        },
        "planningMode": {
          "type": "string",
          "enum": [
            "PLANNING_ON_MY_OWN",
            "PLANNING_ON_ADVISED"
          ]
        },
        "previousAddress": {
          "$ref": "#/definitions/Address"
        },
        "previousSurname": {
          "type": "string"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryCompanyLogoDocumentId": {
          "type": "string"
        },
        "primaryCompanyName": {
          "type": "string"
        },
        "profileEditable": {
          "type": "boolean"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32"
        },
        "secclClientId": {
          "type": "string"
        },
        "sippConfirmationDocumentId": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "taxDomicile": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "ukDomiciled": {
          "type": "boolean"
        },
        "ukTaxResident": {
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "welcomeMessageViewed": {
          "type": "boolean"
        }
      },
      "title": "Client"
    },
    "ClientAccount": {
      "type": "object",
      "properties": {
        "atgProvider": {
          "$ref": "#/definitions/AtgProvider"
        },
        "averageExpectedExcessReturnPercentage": {
          "type": "number"
        },
        "bookValue": {
          "type": "number"
        },
        "clientId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "currentValuation": {
          "type": "number"
        },
        "currentValuationInAssetCurrency": {
          "type": "number"
        },
        "deletable": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "employerGrossContribution": {
          "type": "number"
        },
        "expectedAnnualIncome": {
          "type": "number"
        },
        "goalId": {
          "type": "string"
        },
        "goalName": {
          "type": "string"
        },
        "goalStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "ACTIVE",
            "ARCHIVE",
            "UNDER_REVIEW"
          ]
        },
        "growth": {
          "type": "number"
        },
        "growthPercent": {
          "type": "number"
        },
        "haveTakenBenefits": {
          "type": "boolean"
        },
        "inTrust": {
          "type": "boolean"
        },
        "initialInvestment": {
          "type": "number"
        },
        "internal": {
          "type": "boolean"
        },
        "investmentProvider": {
          "type": "string"
        },
        "investmentType": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ETF",
              "UNIT_TRUST",
              "INVESTMENT_TRUST",
              "OEIC",
              "DIRECT_EQUITY_HOLDINGS"
            ]
          }
        },
        "isaAllowance": {
          "type": "number"
        },
        "loaDocumentId": {
          "type": "string"
        },
        "loaDocumentSignatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "loaDocumentStatus": {
          "type": "string",
          "enum": [
            "NONE",
            "WAITING_FOR_SIGNATURE",
            "PENDING_CONFIRMATION",
            "SIGNED"
          ]
        },
        "loaDocumentTypeId": {
          "type": "integer",
          "format": "int64"
        },
        "loaDocumentTypeName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ongoingAdviserFee": {
          "type": "number"
        },
        "ongoingFee": {
          "type": "number"
        },
        "ongoingFeePercentage": {
          "type": "number"
        },
        "ongoingInvestmentFee": {
          "type": "number"
        },
        "openingValue": {
          "type": "number"
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "pendingRebalance": {
          "type": "boolean"
        },
        "pendingRebalanceDate": {
          "type": "string",
          "format": "date-time"
        },
        "pensionSchemeAdministratorAddress": {
          "type": "string"
        },
        "pensionSchemeAdministratorContactDepartmentOrPerson": {
          "type": "string"
        },
        "pensionSchemeAdministratorName": {
          "type": "string"
        },
        "pensionSchemeAdministratorPhone": {
          "type": "string"
        },
        "pensionSchemeAdministratorPostcode": {
          "type": "string"
        },
        "personalGrossContribution": {
          "type": "number"
        },
        "planStartDate": {
          "type": "string",
          "format": "date"
        },
        "policyNumber": {
          "type": "string"
        },
        "providerAddress": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerPhoneNumber": {
          "type": "string"
        },
        "providerPostCode": {
          "type": "string"
        },
        "recurringPayment": {
          "$ref": "#/definitions/ClientAccountRecurringPayment"
        },
        "refreshing": {
          "type": "boolean"
        },
        "regularContribution": {
          "type": "number"
        },
        "regularContributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "schemeName": {
          "type": "string"
        },
        "schemeRetirementAge": {
          "type": "integer",
          "format": "int32"
        },
        "schemeTaxReferenceNumber": {
          "type": "string"
        },
        "secclAccountId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "enum": [
            "AwaitingApproval",
            "Pending",
            "Active",
            "InTransfer",
            "AwaitingTransfer",
            "Closed"
          ]
        },
        "transferValue": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "enum": [
            "Investment",
            "Pension",
            "Cash"
          ]
        },
        "typeDescriptor": {
          "$ref": "#/definitions/ClientAccountTypeDescriptor"
        },
        "uninvestedCash": {
          "type": "number"
        },
        "valuationStartDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "ClientAccount"
    },
    "ClientAccountCashTransactionRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "movementType": {
          "type": "string",
          "enum": [
            "IN",
            "OUT",
            "INVEST",
            "BUY",
            "SELL",
            "RAISE"
          ]
        },
        "purpose": {
          "type": "string",
          "enum": [
            "SERVICE_PAYMENT"
          ]
        },
        "relatedEntityId": {
          "type": "string"
        },
        "relatedEntityType": {
          "type": "string",
          "enum": [
            "SERVICE"
          ]
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "transactionSubType": {
          "type": "string",
          "enum": [
            "DEPOSIT",
            "WITHDRAWAL",
            "EX_GRATIA_PAYMENT",
            "PLATFORM_FEE",
            "INTEREST",
            "DIVIDEND",
            "EQUALISATION",
            "FRACTIONAL_PAYMENT",
            "REDEMPTION",
            "AT_BEST",
            "LIMIT",
            "ADVISER_FEE",
            "ADVISER_INITIAL_FEE",
            "ADVISER_ADHOC_FEE",
            "DISCRETIONARY_MANAGEMENT_FEE",
            "PRODUCT_FEE",
            "FEE",
            "CASH",
            "REDRESS_PAYMENT",
            "SUBSCRIPTION_FEE",
            "TRANSFER",
            "INTERNAL",
            "EXTERNAL",
            "MIGRATION",
            "EMPLOYEE",
            "INITIAL_WITHDRAWAL",
            "TAXED_WITHDRAWAL",
            "TAX_FREE_WITHDRAWAL",
            "EMPLOYER",
            "TAX_RECLAIM",
            "PENSION_WITHDRAWAL",
            "CAPITAL_PAYMENT",
            "RECLAIMED_PAYMENT",
            "REFERRAL_PAYMENT",
            "IN_SPECIE"
          ]
        }
      },
      "title": "ClientAccountCashTransactionRequest"
    },
    "ClientAccountCashTransferTransactionRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "destinationAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "transactionSubType": {
          "type": "string",
          "enum": [
            "DEPOSIT",
            "WITHDRAWAL",
            "EX_GRATIA_PAYMENT",
            "PLATFORM_FEE",
            "INTEREST",
            "DIVIDEND",
            "EQUALISATION",
            "FRACTIONAL_PAYMENT",
            "REDEMPTION",
            "AT_BEST",
            "LIMIT",
            "ADVISER_FEE",
            "ADVISER_INITIAL_FEE",
            "ADVISER_ADHOC_FEE",
            "DISCRETIONARY_MANAGEMENT_FEE",
            "PRODUCT_FEE",
            "FEE",
            "CASH",
            "REDRESS_PAYMENT",
            "SUBSCRIPTION_FEE",
            "TRANSFER",
            "INTERNAL",
            "EXTERNAL",
            "MIGRATION",
            "EMPLOYEE",
            "INITIAL_WITHDRAWAL",
            "TAXED_WITHDRAWAL",
            "TAX_FREE_WITHDRAWAL",
            "EMPLOYER",
            "TAX_RECLAIM",
            "PENSION_WITHDRAWAL",
            "CAPITAL_PAYMENT",
            "RECLAIMED_PAYMENT",
            "REFERRAL_PAYMENT",
            "IN_SPECIE"
          ]
        }
      },
      "title": "ClientAccountCashTransferTransactionRequest"
    },
    "ClientAccountCloseRequest": {
      "type": "object",
      "required": [
        "clientAccountId"
      ],
      "properties": {
        "clientAccountId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ClientAccountCloseRequest"
    },
    "ClientAccountExternalTransferTransactionRequest": {
      "type": "object",
      "required": [
        "amountPercentage",
        "documentTypeId",
        "externalAccountId"
      ],
      "properties": {
        "amountPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "documentTypeId": {
          "type": "integer",
          "format": "int64"
        },
        "externalAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "investToModel": {
          "type": "boolean"
        },
        "transactionSubType": {
          "type": "string",
          "enum": [
            "DEPOSIT",
            "WITHDRAWAL",
            "EX_GRATIA_PAYMENT",
            "PLATFORM_FEE",
            "INTEREST",
            "DIVIDEND",
            "EQUALISATION",
            "FRACTIONAL_PAYMENT",
            "REDEMPTION",
            "AT_BEST",
            "LIMIT",
            "ADVISER_FEE",
            "ADVISER_INITIAL_FEE",
            "ADVISER_ADHOC_FEE",
            "DISCRETIONARY_MANAGEMENT_FEE",
            "PRODUCT_FEE",
            "FEE",
            "CASH",
            "REDRESS_PAYMENT",
            "SUBSCRIPTION_FEE",
            "TRANSFER",
            "INTERNAL",
            "EXTERNAL",
            "MIGRATION",
            "EMPLOYEE",
            "INITIAL_WITHDRAWAL",
            "TAXED_WITHDRAWAL",
            "TAX_FREE_WITHDRAWAL",
            "EMPLOYER",
            "TAX_RECLAIM",
            "PENSION_WITHDRAWAL",
            "CAPITAL_PAYMENT",
            "RECLAIMED_PAYMENT",
            "REFERRAL_PAYMENT",
            "IN_SPECIE"
          ]
        }
      },
      "title": "ClientAccountExternalTransferTransactionRequest"
    },
    "ClientAccountInvestmentTypeDescriptor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "enum": [
            "ETF",
            "UNIT_TRUST",
            "INVESTMENT_TRUST",
            "OEIC",
            "DIRECT_EQUITY_HOLDINGS"
          ]
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ClientAccountInvestmentTypeDescriptor"
    },
    "ClientAccountLink": {
      "type": "object",
      "properties": {
        "clientAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "ClientGoal",
            "FinancialReviewGoal"
          ]
        },
        "entityUniqueId": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ClientAccountLink"
    },
    "ClientAccountLinkRequest": {
      "type": "object",
      "required": [
        "clientAccountId"
      ],
      "properties": {
        "clientAccountId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ClientAccountLinkRequest"
    },
    "ClientAccountOrderTransactionRequest": {
      "type": "object",
      "required": [
        "assetId",
        "movementType",
        "transactionSubType"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "assetId": {
          "type": "string"
        },
        "limitPrice": {
          "type": "number"
        },
        "movementType": {
          "type": "string",
          "enum": [
            "IN",
            "OUT",
            "INVEST",
            "BUY",
            "SELL",
            "RAISE"
          ]
        },
        "quantity": {
          "type": "number"
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "transactionSubType": {
          "type": "string",
          "enum": [
            "DEPOSIT",
            "WITHDRAWAL",
            "EX_GRATIA_PAYMENT",
            "PLATFORM_FEE",
            "INTEREST",
            "DIVIDEND",
            "EQUALISATION",
            "FRACTIONAL_PAYMENT",
            "REDEMPTION",
            "AT_BEST",
            "LIMIT",
            "ADVISER_FEE",
            "ADVISER_INITIAL_FEE",
            "ADVISER_ADHOC_FEE",
            "DISCRETIONARY_MANAGEMENT_FEE",
            "PRODUCT_FEE",
            "FEE",
            "CASH",
            "REDRESS_PAYMENT",
            "SUBSCRIPTION_FEE",
            "TRANSFER",
            "INTERNAL",
            "EXTERNAL",
            "MIGRATION",
            "EMPLOYEE",
            "INITIAL_WITHDRAWAL",
            "TAXED_WITHDRAWAL",
            "TAX_FREE_WITHDRAWAL",
            "EMPLOYER",
            "TAX_RECLAIM",
            "PENSION_WITHDRAWAL",
            "CAPITAL_PAYMENT",
            "RECLAIMED_PAYMENT",
            "REFERRAL_PAYMENT",
            "IN_SPECIE"
          ]
        }
      },
      "title": "ClientAccountOrderTransactionRequest"
    },
    "ClientAccountPaymentTransactionRequest": {
      "type": "object",
      "required": [
        "amount",
        "method",
        "movementType"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "investToModel": {
          "type": "boolean"
        },
        "method": {
          "type": "string",
          "enum": [
            "TRANSFER",
            "DIRECT_DEBIT",
            "BANK_TRANSFER",
            "BULK_BANK_TRANSFER",
            "BACS_CREDIT",
            "BACS_TRANSFER",
            "AUTO_CREDIT"
          ]
        },
        "movementType": {
          "type": "string",
          "enum": [
            "IN",
            "OUT",
            "INVEST",
            "BUY",
            "SELL",
            "RAISE"
          ]
        },
        "purpose": {
          "type": "string",
          "enum": [
            "SERVICE_PAYMENT"
          ]
        },
        "relatedEntityId": {
          "type": "string"
        },
        "relatedEntityType": {
          "type": "string",
          "enum": [
            "SERVICE"
          ]
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "ClientAccountPaymentTransactionRequest"
    },
    "ClientAccountPosition": {
      "type": "object",
      "properties": {
        "assetName": {
          "type": "string"
        },
        "currentPrice": {
          "type": "number"
        },
        "isin": {
          "type": "string"
        },
        "performance": {
          "type": "number"
        },
        "quantity": {
          "type": "number"
        },
        "value": {
          "type": "number"
        },
        "valuePercentage": {
          "type": "number"
        }
      },
      "title": "ClientAccountPosition"
    },
    "ClientAccountRebalanceResponse": {
      "type": "object",
      "properties": {
        "rebalanceStatus": {
          "type": "string",
          "enum": [
            "REBALANCE_INITIATED",
            "ALREADY_REBALANCED"
          ]
        }
      },
      "title": "ClientAccountRebalanceResponse"
    },
    "ClientAccountRecurringPayment": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "activatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "allowedStatusTransitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_APPROVAL",
              "FAILED",
              "ACTIVE",
              "ARCHIVED"
            ]
          }
        },
        "clientId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "deactivatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "goalId": {
          "type": "string"
        },
        "goalName": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "lastStatusChangeDescription": {
          "type": "string"
        },
        "paymentInstructions": {
          "$ref": "#/definitions/ClientAccountRecurringPaymentInstructions"
        },
        "replacedById": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_APPROVAL",
            "FAILED",
            "ACTIVE",
            "ARCHIVED"
          ]
        },
        "statusChanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountRecurringPaymentStatusChange"
          }
        }
      },
      "title": "ClientAccountRecurringPayment"
    },
    "ClientAccountRecurringPaymentInstructions": {
      "type": "object",
      "properties": {
        "accountName": {
          "type": "string"
        },
        "accountPolicyNumber": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "autoInvest": {
          "type": "boolean"
        },
        "clientBankAccountNumber": {
          "type": "string"
        },
        "clientBankName": {
          "type": "string"
        },
        "clientBankSortCode": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "enum": [
            "BANK_TRANSFER",
            "DIRECT_DEBIT",
            "BACS_CREDIT"
          ]
        },
        "movementType": {
          "type": "string",
          "enum": [
            "IN",
            "OUT",
            "INVEST",
            "BUY",
            "SELL",
            "RAISE"
          ]
        },
        "paymentDay": {
          "type": "integer",
          "format": "int32"
        },
        "paymentType": {
          "type": "string",
          "enum": [
            "EMPLOYEE",
            "EMPLOYER"
          ]
        }
      },
      "title": "ClientAccountRecurringPaymentInstructions"
    },
    "ClientAccountRecurringPaymentRequest": {
      "type": "object",
      "required": [
        "amount",
        "autoInvest",
        "movementType",
        "paymentDay"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "autoInvest": {
          "type": "boolean"
        },
        "movementType": {
          "type": "string",
          "enum": [
            "IN",
            "OUT",
            "INVEST",
            "BUY",
            "SELL",
            "RAISE"
          ]
        },
        "paymentDay": {
          "type": "integer",
          "format": "int32"
        },
        "paymentType": {
          "type": "string",
          "enum": [
            "EMPLOYEE",
            "EMPLOYER"
          ]
        }
      },
      "title": "ClientAccountRecurringPaymentRequest"
    },
    "ClientAccountRecurringPaymentStatusChange": {
      "type": "object",
      "properties": {
        "changedBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_APPROVAL",
            "FAILED",
            "ACTIVE",
            "ARCHIVED"
          ]
        }
      },
      "title": "ClientAccountRecurringPaymentStatusChange"
    },
    "ClientAccountRecurringPaymentStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_APPROVAL",
            "FAILED",
            "ACTIVE",
            "ARCHIVED"
          ]
        }
      },
      "title": "ClientAccountRecurringPaymentStatusRequest"
    },
    "ClientAccountReport": {
      "type": "object",
      "properties": {
        "atgProvider": {
          "$ref": "#/definitions/AtgProvider"
        },
        "closingValue": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "dateFromValue": {
          "type": "number"
        },
        "dateToValue": {
          "type": "number"
        },
        "growth": {
          "type": "number"
        },
        "holdings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountPosition"
          }
        },
        "internal": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "openingValue": {
          "type": "number"
        },
        "performance": {
          "type": "number"
        },
        "policyNumber": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "ref": {
          "type": "integer",
          "format": "int64"
        },
        "totalIn": {
          "type": "number"
        },
        "totalOut": {
          "type": "number"
        },
        "type": {
          "type": "string"
        },
        "valuationHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateValuePairOfbigdecimal"
          }
        },
        "valuationStartDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "ClientAccountReport"
    },
    "ClientAccountRequest": {
      "type": "object",
      "required": [
        "internal",
        "name",
        "type",
        "typeDescriptor"
      ],
      "properties": {
        "atgProvider": {
          "$ref": "#/definitions/AtgProvider"
        },
        "averageExpectedExcessReturnPercentage": {
          "type": "number"
        },
        "comment": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "currentValuationInAssetCurrency": {
          "type": "number"
        },
        "employerGrossContribution": {
          "type": "number"
        },
        "expectedAnnualIncome": {
          "type": "number"
        },
        "financialReviewId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "goalId": {
          "type": "string"
        },
        "haveTakenBenefits": {
          "type": "boolean"
        },
        "inTrust": {
          "type": "boolean"
        },
        "initialInvestment": {
          "type": "number"
        },
        "internal": {
          "type": "boolean"
        },
        "investmentProvider": {
          "type": "string"
        },
        "investmentType": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ETF",
              "UNIT_TRUST",
              "INVESTMENT_TRUST",
              "OEIC",
              "DIRECT_EQUITY_HOLDINGS"
            ]
          }
        },
        "isaAllowance": {
          "type": "number"
        },
        "loaDocumentTypeId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "ongoingAdviserFee": {
          "type": "number"
        },
        "ongoingFee": {
          "type": "number"
        },
        "ongoingFeePercentage": {
          "type": "number"
        },
        "ongoingInvestmentFee": {
          "type": "number"
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "pensionSchemeAdministratorAddress": {
          "type": "string"
        },
        "pensionSchemeAdministratorContactDepartmentOrPerson": {
          "type": "string"
        },
        "pensionSchemeAdministratorName": {
          "type": "string"
        },
        "pensionSchemeAdministratorPhone": {
          "type": "string"
        },
        "pensionSchemeAdministratorPostcode": {
          "type": "string"
        },
        "personalGrossContribution": {
          "type": "number"
        },
        "planStartDate": {
          "type": "string",
          "format": "date"
        },
        "policyNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerAddress": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerPhoneNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerPostCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "regularContribution": {
          "type": "number"
        },
        "regularContributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "schemeName": {
          "type": "string"
        },
        "schemeRetirementAge": {
          "type": "integer",
          "format": "int32",
          "minimum": 55.0,
          "maximum": 100.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "schemeTaxReferenceNumber": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "transferValue": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "enum": [
            "Investment",
            "Pension",
            "Cash"
          ]
        },
        "typeDescriptor": {
          "$ref": "#/definitions/ClientAccountTypeDescriptor"
        }
      },
      "title": "ClientAccountRequest"
    },
    "ClientAccountStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "AwaitingApproval",
            "Pending",
            "Active",
            "InTransfer",
            "AwaitingTransfer",
            "Closed"
          ]
        }
      },
      "title": "ClientAccountStatusRequest"
    },
    "ClientAccountTransaction": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "accountName": {
          "type": "string"
        },
        "accountType": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "assetId": {
          "type": "string"
        },
        "assetName": {
          "type": "string"
        },
        "autoDisinvestType": {
          "type": "string",
          "enum": [
            "LARGEST",
            "PROPORTIONAL"
          ]
        },
        "clientBankDetails": {
          "$ref": "#/definitions/ClientAccountTransactionBankDetails"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "deletable": {
          "type": "boolean"
        },
        "destinationAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "destinationAccountName": {
          "type": "string"
        },
        "documentId": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "eventId": {
          "type": "string"
        },
        "executionBroker": {
          "type": "string",
          "enum": [
            "SECCL",
            "MANUAL"
          ]
        },
        "externalAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "externalAccountName": {
          "type": "string"
        },
        "externalCounterpartyAccountId": {
          "type": "string"
        },
        "externalCounterpartyFirmId": {
          "type": "string"
        },
        "externalTransferType": {
          "type": "string",
          "enum": [
            "FULL",
            "PARTIAL"
          ]
        },
        "goalId": {
          "type": "string"
        },
        "goalName": {
          "type": "string"
        },
        "initiatedBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "instrumentType": {
          "type": "string",
          "enum": [
            "EQUITY",
            "ETF",
            "FUND"
          ]
        },
        "intendedSettlementDate": {
          "type": "string",
          "format": "date-time"
        },
        "investToModel": {
          "type": "boolean"
        },
        "isPrepay": {
          "type": "boolean"
        },
        "isin": {
          "type": "string"
        },
        "limitPrice": {
          "type": "number"
        },
        "linkId": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "enum": [
            "TRANSFER",
            "DIRECT_DEBIT",
            "BANK_TRANSFER",
            "BULK_BANK_TRANSFER",
            "BACS_CREDIT",
            "BACS_TRANSFER",
            "AUTO_CREDIT"
          ]
        },
        "mic": {
          "type": "string"
        },
        "movementType": {
          "type": "string",
          "enum": [
            "IN",
            "OUT",
            "INVEST",
            "BUY",
            "SELL",
            "RAISE"
          ]
        },
        "paymentType": {
          "type": "string",
          "enum": [
            "PAYMENT",
            "INVESTMENT",
            "TRANSFER_CASH",
            "TRANSFER_IN_SPECIE",
            "FEE",
            "OTHER"
          ]
        },
        "purpose": {
          "type": "string",
          "enum": [
            "SERVICE_PAYMENT"
          ]
        },
        "quantity": {
          "type": "number"
        },
        "relatedEntityId": {
          "type": "string"
        },
        "relatedEntityType": {
          "type": "string",
          "enum": [
            "SERVICE"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "PENDING",
            "CHECKING",
            "WAITING",
            "ACTIVE",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "DELETED",
            "PLACED",
            "WAITING_FOR_APPROVAL",
            "APPROVED",
            "FAILED",
            "UNKNOWN"
          ]
        },
        "statusChanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountTransactionStatusChange"
          }
        },
        "ticker": {
          "type": "string"
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "transactionSubType": {
          "type": "string",
          "enum": [
            "DEPOSIT",
            "WITHDRAWAL",
            "EX_GRATIA_PAYMENT",
            "PLATFORM_FEE",
            "INTEREST",
            "DIVIDEND",
            "EQUALISATION",
            "FRACTIONAL_PAYMENT",
            "REDEMPTION",
            "AT_BEST",
            "LIMIT",
            "ADVISER_FEE",
            "ADVISER_INITIAL_FEE",
            "ADVISER_ADHOC_FEE",
            "DISCRETIONARY_MANAGEMENT_FEE",
            "PRODUCT_FEE",
            "FEE",
            "CASH",
            "REDRESS_PAYMENT",
            "SUBSCRIPTION_FEE",
            "TRANSFER",
            "INTERNAL",
            "EXTERNAL",
            "MIGRATION",
            "EMPLOYEE",
            "INITIAL_WITHDRAWAL",
            "TAXED_WITHDRAWAL",
            "TAX_FREE_WITHDRAWAL",
            "EMPLOYER",
            "TAX_RECLAIM",
            "PENSION_WITHDRAWAL",
            "CAPITAL_PAYMENT",
            "RECLAIMED_PAYMENT",
            "REFERRAL_PAYMENT",
            "IN_SPECIE"
          ]
        },
        "transactionType": {
          "type": "string",
          "enum": [
            "ORDER",
            "PAYMENT",
            "CASH",
            "CASH_TRANSFER",
            "STOCK_TRANSFER",
            "EXTERNAL_TRANSFER"
          ]
        },
        "transferStatus": {
          "type": "string"
        }
      },
      "title": "ClientAccountTransaction"
    },
    "ClientAccountTransactionBankDetails": {
      "type": "object",
      "properties": {
        "clientBankAccountNumber": {
          "type": "string"
        },
        "clientBankName": {
          "type": "string"
        },
        "clientBankSortCode": {
          "type": "string"
        }
      },
      "title": "ClientAccountTransactionBankDetails"
    },
    "ClientAccountTransactionStatusChange": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "PENDING",
            "CHECKING",
            "WAITING",
            "ACTIVE",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "DELETED",
            "PLACED",
            "WAITING_FOR_APPROVAL",
            "APPROVED",
            "FAILED",
            "UNKNOWN"
          ]
        },
        "statusDate": {
          "type": "string",
          "format": "date-time"
        },
        "transferStatus": {
          "type": "string"
        }
      },
      "title": "ClientAccountTransactionStatusChange"
    },
    "ClientAccountTransactionStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "PENDING",
            "CHECKING",
            "WAITING",
            "ACTIVE",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "DELETED",
            "PLACED",
            "WAITING_FOR_APPROVAL",
            "APPROVED",
            "FAILED",
            "UNKNOWN"
          ]
        }
      },
      "title": "ClientAccountTransactionStatusRequest"
    },
    "ClientAccountTypeDescriptor": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Investment",
            "Pension",
            "Cash"
          ]
        },
        "wrapperType": {
          "type": "string",
          "enum": [
            "ISA",
            "GIA",
            "PENSION",
            "Pension",
            "SIPP"
          ]
        }
      },
      "title": "ClientAccountTypeDescriptor"
    },
    "ClientAccountTypeSummary": {
      "type": "object",
      "properties": {
        "accountType": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "totalValuation": {
          "type": "number"
        }
      },
      "title": "ClientAccountTypeSummary"
    },
    "ClientAccountValuation": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "auditInfo": {
          "$ref": "#/definitions/AuditInfo"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "deletable": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "value": {
          "type": "number"
        }
      },
      "title": "ClientAccountValuation"
    },
    "ClientAccountValuationRequest": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
        },
        "value": {
          "type": "number"
        }
      },
      "title": "ClientAccountValuationRequest"
    },
    "ClientAccountsDashboardInfo": {
      "type": "object",
      "properties": {
        "externalAccountSummary": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountTypeSummary"
          }
        },
        "internalAccountSummary": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountTypeSummary"
          }
        },
        "numberOfClientAccounts": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfExternalAccounts": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfInternalAccounts": {
          "type": "integer",
          "format": "int32"
        },
        "totalClientAccountsValuation": {
          "type": "number"
        },
        "totalExternalAccountsValuation": {
          "type": "number"
        },
        "totalInternalAccountsValuation": {
          "type": "number"
        }
      },
      "title": "ClientAccountsDashboardInfo"
    },
    "ClientAssignIfaRequest": {
      "type": "object",
      "required": [
        "ifaId"
      ],
      "properties": {
        "displayCompanyType": {
          "type": "string",
          "enum": [
            "CURRENT",
            "PRIMARY"
          ]
        },
        "ifaId": {
          "type": "string"
        }
      },
      "title": "ClientAssignIfaRequest"
    },
    "ClientBankDetails": {
      "type": "object",
      "properties": {
        "accountNumber": {
          "type": "string"
        },
        "bankAddress": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "bankSortCode": {
          "type": "string"
        },
        "directDebitMandate": {
          "type": "boolean"
        },
        "directDebitMandateAgreementDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "ClientBankDetails"
    },
    "ClientBankDetailsRequest": {
      "type": "object",
      "properties": {
        "accountNumber": {
          "type": "string"
        },
        "bankAddress": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "bankSortCode": {
          "type": "string"
        }
      },
      "title": "ClientBankDetailsRequest"
    },
    "ClientChangeRequest": {
      "type": "object",
      "required": [
        "currency",
        "gender",
        "nameTitle"
      ],
      "properties": {
        "bankAccountNumber": {
          "type": "string",
          "minLength": 8,
          "maxLength": 8
        },
        "bankDetails": {
          "$ref": "#/definitions/ClientBankDetails"
        },
        "bankName": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "employerAddress": {
          "$ref": "#/definitions/Address"
        },
        "employerDetails": {
          "$ref": "#/definitions/EmployerDetails"
        },
        "employmentStatus": {
          "type": "string",
          "enum": [
            "CARER",
            "EMPLOYED",
            "RETIRED",
            "SELF_EMPLOYED",
            "EDUCATION",
            "OTHER"
          ]
        },
        "financialPriorities": {
          "$ref": "#/definitions/FinancialPriorities"
        },
        "forename": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "gender": {
          "type": "string",
          "enum": [
            "MALE",
            "FEMALE"
          ]
        },
        "homePhone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "interestPoint": {
          "type": "string",
          "enum": [
            "INVESTMENT",
            "PENSION",
            "MORTGAGE",
            "PROTECTION",
            "TECH_SUPPORT"
          ]
        },
        "maritalStatus": {
          "type": "string",
          "enum": [
            "SINGLE",
            "SEPARATED",
            "MARRIED",
            "DIVORCED",
            "WIDOWED",
            "LIVING_WITH_PARTNER"
          ]
        },
        "meansOfCommunications": {
          "$ref": "#/definitions/MeansOfCommunications"
        },
        "mobilePhone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "nameTitle": {
          "type": "string",
          "enum": [
            "MR",
            "MS",
            "MRS",
            "MISS"
          ]
        },
        "nationalInsuranceNumber": {
          "type": "string",
          "pattern": "^[A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z]\\d{6}([A-D]|\\s)$"
        },
        "nationality": {
          "type": "string"
        },
        "previousAddress": {
          "$ref": "#/definitions/Address"
        },
        "previousSurname": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32"
        },
        "sortCode": {
          "type": "string",
          "minLength": 6,
          "maxLength": 6
        },
        "surname": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "taxDomicile": {
          "type": "string"
        },
        "ukDomiciled": {
          "type": "boolean"
        },
        "ukTaxResident": {
          "type": "boolean"
        }
      },
      "title": "ClientChangeRequest"
    },
    "ClientCommunication": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "enum": [
            "Email",
            "Notification"
          ]
        },
        "clientFullName": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "payload": {
          "$ref": "#/definitions/TemplateContext"
        },
        "read": {
          "type": "boolean"
        },
        "sendDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "Send",
            "Read"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "USER_REGISTRATION",
            "CLIENT_REGISTRATION",
            "CLIENT_PASSWORD_RESTORE",
            "USER_EMAIL_CHANGING",
            "CLIENT_EMAIL_CHANGING",
            "CONSULTATION_CREATED_BY_IFA",
            "CONSULTATION_RESCHEDULED_BY_IFA",
            "CONSULTATION_CANCELED_BY_IFA",
            "DOCUMENT_UPLOADED_BY_IFA",
            "FINANCIAL_REVIEW_SENT_FOR_APPROVAL_BY_IFA",
            "FINANCIAL_REVIEW_MARKED_AS_COMPLETED_BY_IFA",
            "GOAL_WAS_IMPLEMENTED",
            "ACCOUNT_WAS_OPENED_AT_ACTIVE_GOAL_LEVEL",
            "ACCOUNT_WAS_CLOSED_AT_ACTIVE_GOAL_LEVEL",
            "ACTIVE_GOAL_WAS_CLOSED_BY_IFA",
            "IFA_WAS_ASSIGNED_TO_CLIENT",
            "SERVICE_WAS_ASSIGNED_TO_CLIENT",
            "CLIENT_SERVICE_WAS_DEACTIVATED",
            "CLIENT_SERVICE_WAS_PROVIDED",
            "GENERIC_DOCUMENT_WAS_CREATED_AT_COMPANY_LEVEL",
            "CLIENT_DOCUMENT_WAS_CREATED",
            "PAYMENT_PENDING",
            "MANDATORY_COMPANY_DOCUMENT_CHANGED",
            "SERVICE_REPLACING_BY_IFA",
            "DD_PAYMENT_CREATED",
            "DD_PAYMENT_CANCELED",
            "DD_MANDATE_SETUP_CONFIRMATION_DOCUMENT_RECEIVED",
            "DD_PAYMENT_ADVANCE_NOTICE_DOCUMENT_RECEIVED",
            "DD_MANDATE_CANCELLED_BY_ADVISER",
            "PENSION_ACCOUNT_APPLICATION_FORM_WAITING_FOR_APPROVAL",
            "ISA_DECLARATION_FORM_WAITING_FOR_APPROVAL"
          ]
        }
      },
      "title": "ClientCommunication"
    },
    "ClientCommunicationsRequest": {
      "type": "object",
      "properties": {
        "communicationIdList": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "title": "ClientCommunicationsRequest"
    },
    "ClientContactPerson": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/Client"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "primary": {
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "title": "ClientContactPerson"
    },
    "ClientContactPersonListRequest": {
      "type": "object",
      "required": [
        "clientContactPersons"
      ],
      "properties": {
        "clientContactPersons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientContactPersonRequest"
          }
        }
      },
      "title": "ClientContactPersonListRequest"
    },
    "ClientContactPersonRequest": {
      "type": "object",
      "required": [
        "primary",
        "userId"
      ],
      "properties": {
        "primary": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        }
      },
      "title": "ClientContactPersonRequest"
    },
    "ClientDashboardData": {
      "type": "object",
      "properties": {
        "idDocumentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "isFinancialReviewSectionsCompleted": {
          "type": "boolean"
        },
        "kycDocuments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycDocument"
          }
        },
        "mandatoryDocumentsSigned": {
          "type": "boolean"
        },
        "pendingOneOffPayments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountTransaction"
          }
        },
        "profileValidationErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityValidationError"
          }
        },
        "proofOfAddressDocumentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "unapprovedRecurringPayments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountRecurringPayment"
          }
        },
        "unsignedDocuments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityDocument"
          }
        },
        "welcomeMessage": {
          "type": "string"
        }
      },
      "title": "ClientDashboardData"
    },
    "ClientDirectDebitMandateStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "APPROVED",
            "CANCELED"
          ]
        }
      },
      "title": "ClientDirectDebitMandateStatusRequest"
    },
    "ClientFinancialReviewDateChangeRequest": {
      "type": "object",
      "required": [
        "financialReviewDate"
      ],
      "properties": {
        "financialReviewDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "ClientFinancialReviewDateChangeRequest"
    },
    "ClientGoal": {
      "type": "object",
      "properties": {
        "accountInfo": {
          "$ref": "#/definitions/ClientGoalAllocatedAccountInfo"
        },
        "annualIncomeTargetAmount": {
          "type": "number"
        },
        "archived": {
          "type": "boolean"
        },
        "client": {
          "$ref": "#/definitions/SecuredEntityProjection"
        },
        "closedDate": {
          "type": "string",
          "format": "date"
        },
        "createdDate": {
          "type": "string",
          "format": "date"
        },
        "fee": {
          "$ref": "#/definitions/Fee"
        },
        "financialReviewGoalId": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "info": {
          "$ref": "#/definitions/ClientGoalInfo"
        },
        "investmentHorizon": {
          "type": "integer",
          "format": "int32"
        },
        "lastReviewedDate": {
          "type": "string",
          "format": "date"
        },
        "modelDescription": {
          "type": "string"
        },
        "modelFactSheetDocumentFileName": {
          "type": "string"
        },
        "modelFactSheetDocumentId": {
          "type": "string"
        },
        "modelId": {
          "type": "integer",
          "format": "int64"
        },
        "modelName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "portfolioSet": {
          "$ref": "#/definitions/ModelPortfolioSet"
        },
        "portfolioThemeSelectionComment": {
          "type": "string"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32"
        },
        "retirementIncome": {
          "type": "number"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "targetAmount": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "enum": [
            "Investment",
            "Pension"
          ]
        },
        "valuationStartDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "ClientGoal"
    },
    "ClientGoalAllocatedAccountInfo": {
      "type": "object",
      "properties": {
        "investments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Investment"
          }
        },
        "pensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pension"
          }
        }
      },
      "title": "ClientGoalAllocatedAccountInfo"
    },
    "ClientGoalInfo": {
      "type": "object",
      "properties": {
        "investmentInfo": {
          "$ref": "#/definitions/InvestmentObjectives"
        },
        "pensionInfo": {
          "$ref": "#/definitions/RetirementObjectives"
        }
      },
      "title": "ClientGoalInfo"
    },
    "ClientGoalReport": {
      "type": "object",
      "properties": {
        "accountReports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountReport"
          }
        },
        "dailyValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateValuePairOfbigdecimal"
          }
        },
        "fromDate": {
          "type": "string",
          "format": "date"
        },
        "toDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "ClientGoalReport"
    },
    "ClientIFAFullInfoResponse": {
      "type": "object",
      "properties": {
        "ifas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserByCompetency"
          }
        }
      },
      "title": "ClientIFAFullInfoResponse"
    },
    "ClientIfaChangeRequest": {
      "type": "object",
      "required": [
        "competencyId",
        "ifaId"
      ],
      "properties": {
        "competencyId": {
          "type": "integer",
          "format": "int64"
        },
        "ifaId": {
          "type": "string"
        }
      },
      "title": "ClientIfaChangeRequest"
    },
    "ClientIfaListChangeRequest": {
      "type": "object",
      "required": [
        "ifaList"
      ],
      "properties": {
        "ifaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientIfaChangeRequest"
          }
        }
      },
      "title": "ClientIfaListChangeRequest"
    },
    "ClientImportTask": {
      "type": "object",
      "properties": {
        "additionalData": {
          "$ref": "#/definitions/ClientImportTaskAdditionalData"
        },
        "auditInfo": {
          "$ref": "#/definitions/AuditInfo"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "notificationTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "VALIDATION_ERROR",
            "READY_TO_PROCESS",
            "PROCESSED"
          ]
        }
      },
      "title": "ClientImportTask"
    },
    "ClientImportTaskAdditionalData": {
      "type": "object",
      "properties": {
        "clientPrototypeCount": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        }
      },
      "title": "ClientImportTaskAdditionalData"
    },
    "ClientImportTaskRequest": {
      "type": "object",
      "required": [
        "companyId",
        "notificationTemplateId"
      ],
      "properties": {
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "notificationTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ClientImportTaskRequest"
    },
    "ClientKycStatusRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "PENDING_VERIFICATION",
            "VERIFIED",
            "REJECTED",
            "CHANGES_PENDING_VERIFICATION",
            "CHANGES_REJECTED"
          ]
        }
      },
      "title": "ClientKycStatusRequest"
    },
    "ClientListResponse": {
      "type": "object",
      "properties": {
        "company": {
          "$ref": "#/definitions/LongProjection"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "displayCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "forename": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ifaAssignmentStatus": {
          "type": "string",
          "enum": [
            "PENDING_ASSIGNMENT",
            "ASSIGNED"
          ]
        },
        "ifaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IFA"
          }
        },
        "isMandatoryDocumentsSigned": {
          "type": "boolean"
        },
        "kycStatus": {
          "type": "string",
          "enum": [
            "PENDING_VERIFICATION",
            "VERIFIED",
            "REJECTED",
            "CHANGES_PENDING_VERIFICATION",
            "CHANGES_REJECTED"
          ]
        },
        "origin": {
          "type": "string",
          "enum": [
            "PORTAL",
            "MANUAL",
            "XLS"
          ]
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryCompanyName": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "ClientListResponse"
    },
    "ClientNotification": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "duplicatedByEmail": {
          "type": "boolean"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "status": {
          "type": "string",
          "enum": [
            "NEW",
            "READ"
          ]
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "USER_REGISTRATION",
            "CLIENT_REGISTRATION",
            "CLIENT_PASSWORD_RESTORE",
            "USER_EMAIL_CHANGING",
            "CLIENT_EMAIL_CHANGING",
            "CONSULTATION_CREATED_BY_IFA",
            "CONSULTATION_RESCHEDULED_BY_IFA",
            "CONSULTATION_CANCELED_BY_IFA",
            "DOCUMENT_UPLOADED_BY_IFA",
            "FINANCIAL_REVIEW_SENT_FOR_APPROVAL_BY_IFA",
            "FINANCIAL_REVIEW_MARKED_AS_COMPLETED_BY_IFA",
            "GOAL_WAS_IMPLEMENTED",
            "ACCOUNT_WAS_OPENED_AT_ACTIVE_GOAL_LEVEL",
            "ACCOUNT_WAS_CLOSED_AT_ACTIVE_GOAL_LEVEL",
            "ACTIVE_GOAL_WAS_CLOSED_BY_IFA",
            "IFA_WAS_ASSIGNED_TO_CLIENT",
            "SERVICE_WAS_ASSIGNED_TO_CLIENT",
            "CLIENT_SERVICE_WAS_DEACTIVATED",
            "CLIENT_SERVICE_WAS_PROVIDED",
            "GENERIC_DOCUMENT_WAS_CREATED_AT_COMPANY_LEVEL",
            "CLIENT_DOCUMENT_WAS_CREATED",
            "PAYMENT_PENDING",
            "MANDATORY_COMPANY_DOCUMENT_CHANGED",
            "SERVICE_REPLACING_BY_IFA",
            "DD_PAYMENT_CREATED",
            "DD_PAYMENT_CANCELED",
            "DD_MANDATE_SETUP_CONFIRMATION_DOCUMENT_RECEIVED",
            "DD_PAYMENT_ADVANCE_NOTICE_DOCUMENT_RECEIVED",
            "DD_MANDATE_CANCELLED_BY_ADVISER",
            "PENSION_ACCOUNT_APPLICATION_FORM_WAITING_FOR_APPROVAL",
            "ISA_DECLARATION_FORM_WAITING_FOR_APPROVAL"
          ]
        }
      },
      "title": "ClientNotification"
    },
    "ClientNotificationsStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "notificationIdList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "NEW",
            "READ"
          ]
        }
      },
      "title": "ClientNotificationsStatusRequest"
    },
    "ClientPersonInfo": {
      "type": "object",
      "properties": {
        "forename": {
          "type": "string"
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "surname": {
          "type": "string"
        }
      },
      "title": "ClientPersonInfo"
    },
    "ClientPlanningModeRequest": {
      "type": "object",
      "required": [
        "mode"
      ],
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "PLANNING_ON_MY_OWN",
            "PLANNING_ON_ADVISED"
          ]
        }
      },
      "title": "ClientPlanningModeRequest"
    },
    "ClientPrototype": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/Client"
        },
        "constraintViolations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          }
        },
        "fileId": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "importTaskId": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "VALID",
            "INVALID",
            "IGNORED",
            "IMPORTED",
            "EMAIL_SENT"
          ]
        }
      },
      "title": "ClientPrototype"
    },
    "ClientPrototypeChangeRequest": {
      "type": "object",
      "required": [
        "nameTitle"
      ],
      "properties": {
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string"
        },
        "forename": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "mainIfaId": {
          "type": "string"
        },
        "nameTitle": {
          "type": "string",
          "enum": [
            "MR",
            "MS",
            "MRS",
            "MISS"
          ]
        },
        "planningMode": {
          "type": "string",
          "enum": [
            "PLANNING_ON_MY_OWN",
            "PLANNING_ON_ADVISED"
          ]
        },
        "postCode": {
          "type": "string"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "prototypeId": {
          "type": "integer",
          "format": "int64"
        },
        "surname": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        }
      },
      "title": "ClientPrototypeChangeRequest"
    },
    "ClientPrototypeCreateRequest": {
      "type": "object",
      "required": [
        "nameTitle"
      ],
      "properties": {
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string"
        },
        "forename": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "mainIfaId": {
          "type": "string"
        },
        "nameTitle": {
          "type": "string",
          "enum": [
            "MR",
            "MS",
            "MRS",
            "MISS"
          ]
        },
        "planningMode": {
          "type": "string",
          "enum": [
            "PLANNING_ON_MY_OWN",
            "PLANNING_ON_ADVISED"
          ]
        },
        "postCode": {
          "type": "string"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "surname": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        }
      },
      "title": "ClientPrototypeCreateRequest"
    },
    "ClientRegistrationRequest": {
      "type": "object",
      "required": [
        "nameTitle",
        "planningMode"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "forename": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "nameTitle": {
          "type": "string",
          "enum": [
            "MR",
            "MS",
            "MRS",
            "MISS"
          ]
        },
        "planningMode": {
          "type": "string",
          "enum": [
            "PLANNING_ON_MY_OWN",
            "PLANNING_ON_ADVISED"
          ]
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "surname": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        }
      },
      "title": "ClientRegistrationRequest"
    },
    "ClientWelcomeMessageViewedRequest": {
      "type": "object",
      "required": [
        "isWelcomeMessageViewed"
      ],
      "properties": {
        "isWelcomeMessageViewed": {
          "type": "boolean"
        }
      },
      "title": "ClientWelcomeMessageViewedRequest"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "FinancialReview",
            "Consultation",
            "Task",
            "FeeAndService",
            "Document"
          ]
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "text": {
          "type": "string"
        },
        "visibleToClient": {
          "type": "boolean"
        }
      },
      "title": "Comment"
    },
    "CommentCreateRequest": {
      "type": "object",
      "required": [
        "entityId",
        "entityType",
        "text"
      ],
      "properties": {
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "FinancialReview",
            "Consultation",
            "Task",
            "FeeAndService",
            "Document"
          ]
        },
        "text": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "visibleToClient": {
          "type": "boolean"
        }
      },
      "title": "CommentCreateRequest"
    },
    "CommentUpdateRequest": {
      "type": "object",
      "properties": {
        "visibleToClient": {
          "type": "boolean"
        }
      },
      "title": "CommentUpdateRequest"
    },
    "CommonGrantedAuthority": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CommonGrantedAuthority"
    },
    "Company": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "brandStyle": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "fcaNumber": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "logoDocumentId": {
          "type": "string"
        },
        "main": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "postCode": {
          "type": "string"
        },
        "systemEnabled": {
          "type": "boolean"
        },
        "welcomeMessageTemplate": {
          "type": "string"
        }
      },
      "title": "Company"
    },
    "CompanyAdminDashboardView": {
      "type": "object",
      "properties": {
        "advisors": {
          "$ref": "#/definitions/AdvisorsDashboardInfo"
        },
        "clientAccounts": {
          "$ref": "#/definitions/ClientAccountsDashboardInfo"
        },
        "companyName": {
          "type": "string"
        },
        "numberOfAdvisers": {
          "type": "integer",
          "format": "int64"
        },
        "numberOfClients": {
          "type": "integer",
          "format": "int64"
        },
        "portfolios": {
          "$ref": "#/definitions/PortfoliosDashboardInfo"
        },
        "revenues": {
          "$ref": "#/definitions/RevenuesDashboardInfo"
        }
      },
      "title": "CompanyAdminDashboardView"
    },
    "CompanyDocument": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "enum": [
            "MANDATORY_DOCUMENTS",
            "GENERAL",
            "GENERAL_COMPANY_DOCUMENT",
            "SERVICE_AND_FEES_AGREEMENT",
            "SUITABILITY_REPORT",
            "RECOMMENDATION_LETTER",
            "STATEMENTS",
            "TRANSFER_FORM",
            "LETTER_OF_AUTHORITY",
            "DIRECT_DEBIT",
            "OTHER",
            "DROP_THRESHOLD",
            "PLATFORM",
            "TRANSACTIONS",
            "PENSION_APPLICATION_FORM",
            "ISA_DECLARATION_FORM",
            "ILLUSTRATION",
            "VALUATION_REPORT",
            "PLAN_INFORMATION"
          ]
        },
        "comment": {
          "type": "string"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "contentLength": {
          "type": "integer",
          "format": "int64"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentId": {
          "type": "string"
        },
        "documentTypeName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "generationSource": {
          "type": "string",
          "enum": [
            "FILE_UPLOAD",
            "TEMPLATE_UPLOAD",
            "EXTERNAL",
            "PLATFORM_FILE",
            "PLATFORM_TEMPLATE"
          ]
        },
        "id": {
          "type": "string"
        },
        "isMajor": {
          "type": "boolean"
        },
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        },
        "signatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "templateId": {
          "type": "integer",
          "format": "int64"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "CompanyDocument"
    },
    "CompanyDocumentTemplate": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "contentLength": {
          "type": "integer",
          "format": "int64"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isMajor": {
          "type": "boolean"
        }
      },
      "title": "CompanyDocumentTemplate"
    },
    "CompanyInfo": {
      "type": "object",
      "properties": {
        "brandStyle": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CompanyInfo"
    },
    "CompanyRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "brandStyle": {
          "type": "string"
        },
        "fcaNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "main": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "CompanyRequest"
    },
    "Competency": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "title": "Competency"
    },
    "Consultation": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "ifaId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Forthcoming",
            "Done",
            "Overdue",
            "Canceled"
          ]
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "Consultation"
    },
    "ConsultationRequest": {
      "type": "object",
      "required": [
        "subject"
      ],
      "properties": {
        "comments": {
          "type": "string"
        },
        "phoneComment": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "ConsultationRequest"
    },
    "ConsultationStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Forthcoming",
            "Done",
            "Overdue",
            "Canceled"
          ]
        }
      },
      "title": "ConsultationStatusRequest"
    },
    "Country": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Country"
    },
    "CreateConsultationRequest": {
      "type": "object",
      "required": [
        "clientId",
        "date",
        "ifaId",
        "subject"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "ifaId": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "CreateConsultationRequest"
    },
    "Currency": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Currency"
    },
    "DateValuePairOfbigdecimal": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
        },
        "value": {
          "type": "number"
        }
      },
      "title": "DateValuePairOfbigdecimal"
    },
    "DefaultNotificationTemplate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "emailDuplication": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "USER_REGISTRATION",
            "CLIENT_REGISTRATION",
            "CLIENT_PASSWORD_RESTORE",
            "USER_EMAIL_CHANGING",
            "CLIENT_EMAIL_CHANGING",
            "CONSULTATION_CREATED_BY_IFA",
            "CONSULTATION_RESCHEDULED_BY_IFA",
            "CONSULTATION_CANCELED_BY_IFA",
            "DOCUMENT_UPLOADED_BY_IFA",
            "FINANCIAL_REVIEW_SENT_FOR_APPROVAL_BY_IFA",
            "FINANCIAL_REVIEW_MARKED_AS_COMPLETED_BY_IFA",
            "GOAL_WAS_IMPLEMENTED",
            "ACCOUNT_WAS_OPENED_AT_ACTIVE_GOAL_LEVEL",
            "ACCOUNT_WAS_CLOSED_AT_ACTIVE_GOAL_LEVEL",
            "ACTIVE_GOAL_WAS_CLOSED_BY_IFA",
            "IFA_WAS_ASSIGNED_TO_CLIENT",
            "SERVICE_WAS_ASSIGNED_TO_CLIENT",
            "CLIENT_SERVICE_WAS_DEACTIVATED",
            "CLIENT_SERVICE_WAS_PROVIDED",
            "GENERIC_DOCUMENT_WAS_CREATED_AT_COMPANY_LEVEL",
            "CLIENT_DOCUMENT_WAS_CREATED",
            "PAYMENT_PENDING",
            "MANDATORY_COMPANY_DOCUMENT_CHANGED",
            "SERVICE_REPLACING_BY_IFA",
            "DD_PAYMENT_CREATED",
            "DD_PAYMENT_CANCELED",
            "DD_MANDATE_SETUP_CONFIRMATION_DOCUMENT_RECEIVED",
            "DD_PAYMENT_ADVANCE_NOTICE_DOCUMENT_RECEIVED",
            "DD_MANDATE_CANCELLED_BY_ADVISER",
            "PENSION_ACCOUNT_APPLICATION_FORM_WAITING_FOR_APPROVAL",
            "ISA_DECLARATION_FORM_WAITING_FOR_APPROVAL"
          ]
        }
      },
      "title": "DefaultNotificationTemplate"
    },
    "DefaultNotificationTemplateRequest": {
      "type": "object",
      "properties": {
        "emailDuplication": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      },
      "title": "DefaultNotificationTemplateRequest"
    },
    "DefaultNotificationTemplateStatusRequest": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        }
      },
      "title": "DefaultNotificationTemplateStatusRequest"
    },
    "DeferredResultOfImportFileResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object"
        },
        "setOrExpired": {
          "type": "boolean"
        }
      },
      "title": "DeferredResultOfImportFileResponse"
    },
    "Dependant": {
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "anticipatedAgeOfIndependence": {
          "type": "integer",
          "format": "int32"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "fullName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "relationship": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "Dependant"
    },
    "DependantInfo": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "dependantList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dependant"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "DependantInfo"
    },
    "Deposit": {
      "type": "object",
      "required": [
        "amount",
        "owner"
      ],
      "properties": {
        "accountProvider": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "amount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "amountInCurrency": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "rate": {
          "type": "number",
          "format": "double",
          "minimum": 0.0,
          "maximum": 100.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "type": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "Deposit"
    },
    "DepositInfo": {
      "type": "object",
      "properties": {
        "depositList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deposit"
          }
        }
      },
      "title": "DepositInfo"
    },
    "DocumentCategoryDescriptor": {
      "type": "object",
      "required": [
        "description",
        "level"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "enum": [
            "MANDATORY_DOCUMENTS",
            "GENERAL",
            "GENERAL_COMPANY_DOCUMENT",
            "SERVICE_AND_FEES_AGREEMENT",
            "SUITABILITY_REPORT",
            "RECOMMENDATION_LETTER",
            "STATEMENTS",
            "TRANSFER_FORM",
            "LETTER_OF_AUTHORITY",
            "DIRECT_DEBIT",
            "OTHER",
            "DROP_THRESHOLD",
            "PLATFORM",
            "TRANSACTIONS",
            "PENSION_APPLICATION_FORM",
            "ISA_DECLARATION_FORM",
            "ILLUSTRATION",
            "VALUATION_REPORT",
            "PLAN_INFORMATION"
          ]
        },
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        }
      },
      "title": "DocumentCategoryDescriptor"
    },
    "DocumentClientAccessRequest": {
      "type": "object",
      "properties": {
        "clientAccess": {
          "type": "boolean"
        }
      },
      "title": "DocumentClientAccessRequest"
    },
    "DocumentRequest": {
      "type": "object",
      "required": [
        "documentName",
        "entityId",
        "entityType",
        "level",
        "signatureType",
        "typeId"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "documentName": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "FINANCIAL_REVIEW_GOAL",
            "COMPANY",
            "SERVICE",
            "CLIENT",
            "CLIENT_ACCOUNT",
            "TRANSACTION"
          ]
        },
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        },
        "signatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "typeId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "DocumentRequest"
    },
    "DocumentTemplate": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "enum": [
            "MANDATORY_DOCUMENTS",
            "GENERAL",
            "GENERAL_COMPANY_DOCUMENT",
            "SERVICE_AND_FEES_AGREEMENT",
            "SUITABILITY_REPORT",
            "RECOMMENDATION_LETTER",
            "STATEMENTS",
            "TRANSFER_FORM",
            "LETTER_OF_AUTHORITY",
            "DIRECT_DEBIT",
            "OTHER",
            "DROP_THRESHOLD",
            "PLATFORM",
            "TRANSACTIONS",
            "PENSION_APPLICATION_FORM",
            "ISA_DECLARATION_FORM",
            "ILLUSTRATION",
            "VALUATION_REPORT",
            "PLAN_INFORMATION"
          ]
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "editable": {
          "type": "boolean"
        },
        "externalDocumentType": {
          "type": "string",
          "enum": [
            "VALUATION_STATEMENT",
            "CONTRACT_NOTE",
            "PENSION_ACCOUNT_CONFIRMATION",
            "ADVANCE_DIRECT_DEBIT_MANDATE_CONFIRMATION",
            "ADVANCE_DIRECT_DEBIT_MANDATE_NOTICE",
            "PENSION_ACCUMULATION_ILLUSTRATION_REPORT",
            "PENSION_WITHDRAWAL_ILLUSTRATION_REPORT"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        },
        "name": {
          "type": "string"
        },
        "preUploadedDocumentFileName": {
          "type": "string"
        },
        "preUploadedDocumentId": {
          "type": "string"
        },
        "signatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "source": {
          "type": "string",
          "enum": [
            "FILE_UPLOAD",
            "TEMPLATE_UPLOAD",
            "EXTERNAL",
            "PLATFORM_FILE",
            "PLATFORM_TEMPLATE"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "DocumentTemplate"
    },
    "DocumentTemplateStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        }
      },
      "title": "DocumentTemplateStatusRequest"
    },
    "DocumentTypeRequest": {
      "type": "object",
      "required": [
        "category",
        "level",
        "name",
        "signatureType",
        "source"
      ],
      "properties": {
        "category": {
          "type": "string",
          "enum": [
            "MANDATORY_DOCUMENTS",
            "GENERAL",
            "GENERAL_COMPANY_DOCUMENT",
            "SERVICE_AND_FEES_AGREEMENT",
            "SUITABILITY_REPORT",
            "RECOMMENDATION_LETTER",
            "STATEMENTS",
            "TRANSFER_FORM",
            "LETTER_OF_AUTHORITY",
            "DIRECT_DEBIT",
            "OTHER",
            "DROP_THRESHOLD",
            "PLATFORM",
            "TRANSACTIONS",
            "PENSION_APPLICATION_FORM",
            "ISA_DECLARATION_FORM",
            "ILLUSTRATION",
            "VALUATION_REPORT",
            "PLAN_INFORMATION"
          ]
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        },
        "name": {
          "type": "string"
        },
        "signatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "source": {
          "type": "string",
          "enum": [
            "FILE_UPLOAD",
            "TEMPLATE_UPLOAD",
            "EXTERNAL",
            "PLATFORM_FILE",
            "PLATFORM_TEMPLATE"
          ]
        }
      },
      "title": "DocumentTypeRequest"
    },
    "DocumentTypeUpdateRequest": {
      "type": "object",
      "required": [
        "level",
        "name",
        "signatureType",
        "source"
      ],
      "properties": {
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        },
        "name": {
          "type": "string"
        },
        "signatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "source": {
          "type": "string",
          "enum": [
            "FILE_UPLOAD",
            "TEMPLATE_UPLOAD",
            "EXTERNAL",
            "PLATFORM_FILE",
            "PLATFORM_TEMPLATE"
          ]
        }
      },
      "title": "DocumentTypeUpdateRequest"
    },
    "EmployerDetails": {
      "type": "object",
      "properties": {
        "companyBankAccountNumber": {
          "type": "string"
        },
        "companyBankSortCode": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "companyRegistrationNumber": {
          "type": "string"
        }
      },
      "title": "EmployerDetails"
    },
    "EmploymentStatus": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "EmploymentStatus"
    },
    "EntityDocument": {
      "type": "object",
      "properties": {
        "additionalData": {
          "$ref": "#/definitions/EntityDocumentAdditionalData"
        },
        "archive": {
          "type": "boolean"
        },
        "category": {
          "type": "string",
          "enum": [
            "MANDATORY_DOCUMENTS",
            "GENERAL",
            "GENERAL_COMPANY_DOCUMENT",
            "SERVICE_AND_FEES_AGREEMENT",
            "SUITABILITY_REPORT",
            "RECOMMENDATION_LETTER",
            "STATEMENTS",
            "TRANSFER_FORM",
            "LETTER_OF_AUTHORITY",
            "DIRECT_DEBIT",
            "OTHER",
            "DROP_THRESHOLD",
            "PLATFORM",
            "TRANSACTIONS",
            "PENSION_APPLICATION_FORM",
            "ISA_DECLARATION_FORM",
            "ILLUSTRATION",
            "VALUATION_REPORT",
            "PLAN_INFORMATION"
          ]
        },
        "clientAccess": {
          "type": "boolean"
        },
        "clientId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentTypeName": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "FINANCIAL_REVIEW_GOAL",
            "COMPANY",
            "SERVICE",
            "CLIENT",
            "CLIENT_ACCOUNT",
            "TRANSACTION"
          ]
        },
        "externalDocumentId": {
          "type": "string"
        },
        "financialReviewId": {
          "type": "string"
        },
        "financialReviewName": {
          "type": "string"
        },
        "financialReviewStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "ACTIVE",
            "ARCHIVE"
          ]
        },
        "hasSignedDocument": {
          "type": "boolean"
        },
        "hasSourceDocument": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        },
        "name": {
          "type": "string"
        },
        "signatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "signedAt": {
          "type": "string",
          "format": "date-time"
        },
        "signedDocumentFileName": {
          "type": "string"
        },
        "signedDocumentId": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "enum": [
            "FILE_UPLOAD",
            "TEMPLATE_UPLOAD",
            "EXTERNAL",
            "PLATFORM_FILE",
            "PLATFORM_TEMPLATE"
          ]
        },
        "sourceDocumentFileName": {
          "type": "string"
        },
        "sourceDocumentId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "NONE",
            "WAITING_FOR_SIGNATURE",
            "PENDING_CONFIRMATION",
            "SIGNED"
          ]
        },
        "summaryDocumentId": {
          "type": "string"
        },
        "templateId": {
          "type": "integer",
          "format": "int64"
        },
        "templateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "viewed": {
          "type": "boolean"
        }
      },
      "title": "EntityDocument"
    },
    "EntityDocumentAdditionalData": {
      "type": "object",
      "title": "EntityDocumentAdditionalData"
    },
    "EntityDocumentDto": {
      "type": "object",
      "properties": {
        "archive": {
          "type": "boolean"
        },
        "category": {
          "type": "string",
          "enum": [
            "MANDATORY_DOCUMENTS",
            "GENERAL",
            "GENERAL_COMPANY_DOCUMENT",
            "SERVICE_AND_FEES_AGREEMENT",
            "SUITABILITY_REPORT",
            "RECOMMENDATION_LETTER",
            "STATEMENTS",
            "TRANSFER_FORM",
            "LETTER_OF_AUTHORITY",
            "DIRECT_DEBIT",
            "OTHER",
            "DROP_THRESHOLD",
            "PLATFORM",
            "TRANSACTIONS",
            "PENSION_APPLICATION_FORM",
            "ISA_DECLARATION_FORM",
            "ILLUSTRATION",
            "VALUATION_REPORT",
            "PLAN_INFORMATION"
          ]
        },
        "clientAccess": {
          "type": "boolean"
        },
        "clientId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentTypeName": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "FINANCIAL_REVIEW_GOAL",
            "COMPANY",
            "SERVICE",
            "CLIENT",
            "CLIENT_ACCOUNT",
            "TRANSACTION"
          ]
        },
        "financialReviewId": {
          "type": "string"
        },
        "financialReviewName": {
          "type": "string"
        },
        "financialReviewStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "ACTIVE",
            "ARCHIVE"
          ]
        },
        "hasSignedDocument": {
          "type": "boolean"
        },
        "hasSourceDocument": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        },
        "name": {
          "type": "string"
        },
        "signatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "source": {
          "type": "string",
          "enum": [
            "FILE_UPLOAD",
            "TEMPLATE_UPLOAD",
            "EXTERNAL",
            "PLATFORM_FILE",
            "PLATFORM_TEMPLATE"
          ]
        },
        "sourceDocumentFileName": {
          "type": "string"
        },
        "sourceDocumentId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "NONE",
            "WAITING_FOR_SIGNATURE",
            "PENDING_CONFIRMATION",
            "SIGNED"
          ]
        },
        "templateId": {
          "type": "integer",
          "format": "int64"
        },
        "templateTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "viewed": {
          "type": "boolean"
        }
      },
      "title": "EntityDocumentDto"
    },
    "EntityValidationError": {
      "type": "object",
      "properties": {
        "entityName": {
          "type": "string"
        },
        "entityValidationErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityValidationError"
          }
        },
        "fieldValidationErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValidationError"
          }
        }
      },
      "title": "EntityValidationError"
    },
    "EsClient": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "companyName": {
          "type": "string"
        },
        "displayCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "fullName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "EsClient"
    },
    "EsCompany": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "EsCompany"
    },
    "EsUser": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "companyName": {
          "type": "string"
        },
        "competencyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "competencyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fullName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        },
        "roleType": {
          "type": "string"
        }
      },
      "title": "EsUser"
    },
    "EventLog": {
      "type": "object",
      "properties": {
        "additionalData": {
          "$ref": "#/definitions/EventLogAdditionalData"
        },
        "clientId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "performer": {
          "$ref": "#/definitions/StringProjection"
        },
        "type": {
          "type": "string",
          "enum": [
            "PLATFORM_TERMS_OF_BUSINESS_ACCEPTED",
            "USER_LOGIN",
            "CLIENT_LOGIN",
            "CLIENT_CREATED",
            "CLIENT_PROFILE_CHANGED",
            "CLIENT_ACTIVATED",
            "CLIENT_KYC_CHECKED",
            "CLIENT_KYC_STATUS_CHANGED",
            "CLIENT_IFA_CHANGED",
            "CLIENT_IFA_DELETED",
            "FINANCIAL_REVIEW_CREATED",
            "FINANCIAL_REVIEW_GOAL_CREATED",
            "FINANCIAL_REVIEW_GOAL_CHANGED",
            "FINANCIAL_REVIEW_ACTIVATED",
            "FINANCIAL_REVIEW_FACT_FINDING_CHANGED",
            "FINANCIAL_REVIEW_APPROVED",
            "DOCUMENT_STATUS_CHANGED",
            "DOCUMENT_UPLOADED",
            "DOCUMENT_DELETED",
            "ACCOUNT_LINKED_TO_CLIENT_GOAL",
            "RECURRING_PAYMENT_CREATED",
            "RECURRING_PAYMENT_CHANGED",
            "EXTERNAL_TRANSFER_STATUS_CHANGED",
            "ONE_OFF_WITHDRAWAL_STATUS_CHANGED"
          ]
        }
      },
      "title": "EventLog"
    },
    "EventLogAdditionalData": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        }
      },
      "title": "EventLogAdditionalData"
    },
    "ExistingArrangementsReview": {
      "type": "object",
      "properties": {
        "happyWithProduct": {
          "type": "boolean"
        },
        "importantBetterProviderService": {
          "type": "boolean"
        },
        "importantComment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "importantConsolidation": {
          "type": "boolean"
        },
        "importantImprovedPerformance": {
          "type": "boolean"
        },
        "importantInvestmentFlexibility": {
          "type": "boolean"
        },
        "importantLowerCosts": {
          "type": "boolean"
        },
        "importantOther": {
          "type": "boolean"
        },
        "importantProductFunctionality": {
          "type": "boolean"
        },
        "notHappyWithCharges": {
          "type": "boolean"
        },
        "notHappyWithComment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "notHappyWithInvestmentRange": {
          "type": "boolean"
        },
        "notHappyWithOther": {
          "type": "boolean"
        },
        "notHappyWithPerformance": {
          "type": "boolean"
        },
        "notHappyWithProductFunctionality": {
          "type": "boolean"
        },
        "notHappyWithProviderService": {
          "type": "boolean"
        },
        "planId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "ExistingArrangementsReview"
    },
    "ExistingArrangementsReviewRequest": {
      "type": "object",
      "required": [
        "existingArrangementsReviews"
      ],
      "properties": {
        "existingArrangementsReviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExistingArrangementsReview"
          }
        },
        "sectionStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "ExistingArrangementsReviewRequest"
    },
    "ExistingInvestments": {
      "type": "object",
      "properties": {
        "currentInvestmentValuation": {
          "type": "number"
        },
        "currentMonthlyRegularContribution": {
          "type": "number"
        }
      },
      "title": "ExistingInvestments"
    },
    "Expenditure": {
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "christmasCelebrationsEventsCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "dependantCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "dependantEducation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "dependantMedicine": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "dependantOther": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "dependantSport": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "financialCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "financialLifeInsurances": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "financialLoans": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "financialOther": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "financialOtherInsurances": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "financialPensionContributions": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "financialSaving": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "holidaysCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "householdCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "householdCouncilTax": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "householdFoodShopping": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "householdMortgageRent": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "householdOther": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "householdTv": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "householdUtilities": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "miscellaneousCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "otherCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "totalIrregularOutgoings": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "totalMonthlyExpenditures": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "totalRegularOutgoings": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "transportationCar": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "transportationCosts": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "transportationOther": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "transportationTrainBusTramTube": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "Expenditure"
    },
    "ExpenditureInfo": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "expenditureList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expenditure"
          }
        },
        "provideFullBreakDown": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "ExpenditureInfo"
    },
    "FactFinding": {
      "type": "object",
      "properties": {
        "assets": {
          "$ref": "#/definitions/Assets"
        },
        "createdBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "dependantInfo": {
          "$ref": "#/definitions/DependantInfo"
        },
        "expenditureInfo": {
          "$ref": "#/definitions/ExpenditureInfo"
        },
        "financialPriorities": {
          "$ref": "#/definitions/FinancialPriorities"
        },
        "generalInformationInfo": {
          "$ref": "#/definitions/GeneralInformationInfo"
        },
        "healthInfo": {
          "$ref": "#/definitions/HealthInfo"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "incomeInfo": {
          "$ref": "#/definitions/IncomeInfo"
        },
        "liabilities": {
          "$ref": "#/definitions/Liabilities"
        },
        "lifeInsuranceInfo": {
          "$ref": "#/definitions/LifeInsuranceInfo"
        },
        "medicalInsuranceInfo": {
          "$ref": "#/definitions/MedicalInsuranceInfo"
        },
        "updatedBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "willAndTrustInfo": {
          "$ref": "#/definitions/WillAndTrustInfo"
        }
      },
      "title": "FactFinding"
    },
    "Fee": {
      "type": "object",
      "properties": {
        "initialFee": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": true
        },
        "ongoingFee": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": true
        }
      },
      "title": "Fee"
    },
    "FeeAndService": {
      "type": "object",
      "properties": {
        "allowedStatusTransitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_COMPANY_APPROVAL",
              "WAITING_FOR_CLIENT_APPROVAL",
              "REJECTED",
              "WAITING_FOR_SIGNATURE_CONFIRMATION",
              "APPROVED",
              "BEING_PROVIDED",
              "PROVIDED",
              "REPLACED",
              "CLOSED"
            ]
          }
        },
        "assigneeUuid": {
          "type": "string"
        },
        "auditInfo": {
          "$ref": "#/definitions/AuditInfo"
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "clientAgreementDocumentId": {
          "type": "string"
        },
        "clientAgreementDocumentName": {
          "type": "string"
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "clientId": {
          "type": "string"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "consolidatedFeeStructure": {
          "$ref": "#/definitions/FeeAndServiceConsolidatedFeeStructure"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "ifaId": {
          "type": "string"
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string"
        },
        "nextServiceId": {
          "type": "string"
        },
        "nextServiceName": {
          "type": "string"
        },
        "nextServiceStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "operatedBy": {
          "$ref": "#/definitions/LongProjection"
        },
        "operationStatus": {
          "type": "string",
          "enum": [
            "IN_OPERATION",
            "OUT_OF_OPERATION"
          ]
        },
        "paymentStatus": {
          "type": "string",
          "enum": [
            "PAYMENT_PENDING",
            "PAID"
          ]
        },
        "paymentStructure": {
          "$ref": "#/definitions/FeeAndServicePaymentStructure"
        },
        "paymentTransactionId": {
          "type": "integer",
          "format": "int64"
        },
        "pendingReplacement": {
          "type": "boolean"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string"
        },
        "previousServiceName": {
          "type": "string"
        },
        "replaceable": {
          "type": "boolean"
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceSchedule"
        },
        "serviceFeeType": {
          "type": "string",
          "enum": [
            "PLATFORM",
            "MANAGEMENT"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubService"
          }
        },
        "systemEnabled": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "STANDARD",
            "NON_STANDARD",
            "BESPOKE"
          ]
        },
        "uuid": {
          "type": "string"
        }
      },
      "title": "FeeAndService"
    },
    "FeeAndServiceBespokeRequest": {
      "type": "object",
      "required": [
        "chargingStructure",
        "continuation",
        "feeStructure",
        "link",
        "paymentStructure"
      ],
      "properties": {
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3000,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "ifaId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "paymentStructure": {
          "$ref": "#/definitions/FeeAndServicePaymentStructure"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceSchedule"
        }
      },
      "title": "FeeAndServiceBespokeRequest"
    },
    "FeeAndServiceBespokeResponse": {
      "type": "object",
      "properties": {
        "allowedStatusTransitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_COMPANY_APPROVAL",
              "WAITING_FOR_CLIENT_APPROVAL",
              "REJECTED",
              "WAITING_FOR_SIGNATURE_CONFIRMATION",
              "APPROVED",
              "BEING_PROVIDED",
              "PROVIDED",
              "REPLACED",
              "CLOSED"
            ]
          }
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "clientAgreementDocumentId": {
          "type": "string"
        },
        "clientAgreementDocumentName": {
          "type": "string"
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "clientId": {
          "type": "string"
        },
        "consolidatedFeeStructure": {
          "$ref": "#/definitions/FeeAndServiceConsolidatedFeeStructure"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string"
        },
        "nextServiceId": {
          "type": "string"
        },
        "nextServiceName": {
          "type": "string"
        },
        "nextServiceStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "operatedBy": {
          "$ref": "#/definitions/LongProjection"
        },
        "operationStatus": {
          "type": "string",
          "enum": [
            "IN_OPERATION",
            "OUT_OF_OPERATION"
          ]
        },
        "paymentStatus": {
          "type": "string",
          "enum": [
            "PAYMENT_PENDING",
            "PAID"
          ]
        },
        "paymentStructure": {
          "$ref": "#/definitions/FeeAndServicePaymentStructure"
        },
        "pendingReplacement": {
          "type": "boolean"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string"
        },
        "previousServiceName": {
          "type": "string"
        },
        "replaceable": {
          "type": "boolean"
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceSchedule"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "STANDARD",
            "NON_STANDARD",
            "BESPOKE"
          ]
        }
      },
      "title": "FeeAndServiceBespokeResponse"
    },
    "FeeAndServiceByNameResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "FeeAndServiceByNameResponse"
    },
    "FeeAndServiceChangeOperationStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "IN_OPERATION",
            "OUT_OF_OPERATION"
          ]
        }
      },
      "title": "FeeAndServiceChangeOperationStatusRequest"
    },
    "FeeAndServiceClientOneOffRequest": {
      "type": "object",
      "required": [
        "paymentStructure"
      ],
      "properties": {
        "assigneeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "description": {
          "type": "string"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "ifaId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "paymentStructure": {
          "$ref": "#/definitions/FeeAndServicePaymentStructureOneOff"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceScheduleOneOff"
        },
        "subService": {
          "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
        }
      },
      "title": "FeeAndServiceClientOneOffRequest"
    },
    "FeeAndServiceClientOngoingRequest": {
      "type": "object",
      "required": [
        "paymentStructure"
      ],
      "properties": {
        "assigneeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "description": {
          "type": "string"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "ifaId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "paymentStructure": {
          "$ref": "#/definitions/FeeAndServicePaymentStructureOngoing"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceScheduleOngoing"
        },
        "subService": {
          "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
        }
      },
      "title": "FeeAndServiceClientOngoingRequest"
    },
    "FeeAndServiceClientPageResponse": {
      "type": "object",
      "properties": {
        "allowedStatusTransitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_COMPANY_APPROVAL",
              "WAITING_FOR_CLIENT_APPROVAL",
              "REJECTED",
              "WAITING_FOR_SIGNATURE_CONFIRMATION",
              "APPROVED",
              "BEING_PROVIDED",
              "PROVIDED",
              "REPLACED",
              "CLOSED"
            ]
          }
        },
        "clientAgreementDocumentId": {
          "type": "string"
        },
        "clientAgreementDocumentName": {
          "type": "string"
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "deletable": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nextServiceId": {
          "type": "string"
        },
        "nextServiceName": {
          "type": "string"
        },
        "nextServiceStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "operatedBy": {
          "$ref": "#/definitions/LongProjection"
        },
        "paymentStatus": {
          "type": "string",
          "enum": [
            "PAYMENT_PENDING",
            "PAID"
          ]
        },
        "pendingReplacement": {
          "type": "boolean"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string"
        },
        "previousServiceName": {
          "type": "string"
        },
        "replaceable": {
          "type": "boolean"
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceSchedule"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "STANDARD",
            "NON_STANDARD",
            "BESPOKE"
          ]
        }
      },
      "title": "FeeAndServiceClientPageResponse"
    },
    "FeeAndServiceClientRequestOfFeeAndServicePaymentStructureAndFeeAndServiceSchedule": {
      "type": "object",
      "required": [
        "paymentStructure"
      ],
      "properties": {
        "assigneeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "description": {
          "type": "string"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "ifaId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "paymentStructure": {
          "$ref": "#/definitions/FeeAndServicePaymentStructure"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceSchedule"
        },
        "subService": {
          "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
        }
      },
      "title": "FeeAndServiceClientRequestOfFeeAndServicePaymentStructureAndFeeAndServiceSchedule"
    },
    "FeeAndServiceClientResponse": {
      "type": "object",
      "properties": {
        "allowedStatusTransitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_COMPANY_APPROVAL",
              "WAITING_FOR_CLIENT_APPROVAL",
              "REJECTED",
              "WAITING_FOR_SIGNATURE_CONFIRMATION",
              "APPROVED",
              "BEING_PROVIDED",
              "PROVIDED",
              "REPLACED",
              "CLOSED"
            ]
          }
        },
        "assigneeId": {
          "type": "string"
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "clientAgreementDocumentId": {
          "type": "string"
        },
        "clientAgreementDocumentName": {
          "type": "string"
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "clientId": {
          "type": "string"
        },
        "consolidatedFeeStructure": {
          "$ref": "#/definitions/FeeAndServiceConsolidatedFeeStructure"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "id": {
          "type": "string"
        },
        "ifaId": {
          "type": "string"
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string"
        },
        "nextServiceId": {
          "type": "string"
        },
        "nextServiceName": {
          "type": "string"
        },
        "nextServiceStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "operatedBy": {
          "$ref": "#/definitions/LongProjection"
        },
        "operationStatus": {
          "type": "string",
          "enum": [
            "IN_OPERATION",
            "OUT_OF_OPERATION"
          ]
        },
        "paymentStatus": {
          "type": "string",
          "enum": [
            "PAYMENT_PENDING",
            "PAID"
          ]
        },
        "paymentStructure": {
          "$ref": "#/definitions/FeeAndServicePaymentStructure"
        },
        "pendingReplacement": {
          "type": "boolean"
        },
        "prepaid": {
          "type": "boolean"
        },
        "previousServiceId": {
          "type": "string"
        },
        "previousServiceName": {
          "type": "string"
        },
        "replaceable": {
          "type": "boolean"
        },
        "schedule": {
          "$ref": "#/definitions/FeeAndServiceSchedule"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubService"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "STANDARD",
            "NON_STANDARD",
            "BESPOKE"
          ]
        }
      },
      "title": "FeeAndServiceClientResponse"
    },
    "FeeAndServiceCompanyNonStandardFixedFeeStructureRequest": {
      "type": "object",
      "required": [
        "clientAgreementDocumentTemplateId",
        "continuation",
        "feeStructure",
        "fixedFeeAmount",
        "link"
      ],
      "properties": {
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3000,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFixedFeeStructure"
        },
        "fixedFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "prepaid": {
          "type": "boolean"
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceCompanyNonStandardFixedFeeStructureRequest"
    },
    "FeeAndServiceCompanyNonStandardPercentageOfAumFeeStructureRequest": {
      "type": "object",
      "required": [
        "clientAgreementDocumentTemplateId",
        "continuation",
        "feeStructure",
        "fixedFeeAmount",
        "link"
      ],
      "properties": {
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3000,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServicePercentageOfAumFeeStructure"
        },
        "fixedFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "prepaid": {
          "type": "boolean"
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceCompanyNonStandardPercentageOfAumFeeStructureRequest"
    },
    "FeeAndServiceCompanyNonStandardPercentageOfAumTiredFeeStructureRequest": {
      "type": "object",
      "required": [
        "clientAgreementDocumentTemplateId",
        "continuation",
        "feeStructure",
        "fixedFeeAmount",
        "link"
      ],
      "properties": {
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3000,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServicePercentageOfAumTiredFeeStructure"
        },
        "fixedFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "prepaid": {
          "type": "boolean"
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceCompanyNonStandardPercentageOfAumTiredFeeStructureRequest"
    },
    "FeeAndServiceCompanyNonStandardRequest": {
      "type": "object",
      "required": [
        "chargingStructure",
        "clientAgreementDocumentTemplateId",
        "continuation",
        "feeStructure",
        "link"
      ],
      "properties": {
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3000,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "prepaid": {
          "type": "boolean"
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceCompanyNonStandardRequest"
    },
    "FeeAndServiceCompanyResponse": {
      "type": "object",
      "properties": {
        "allowedStatusTransitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_COMPANY_APPROVAL",
              "WAITING_FOR_CLIENT_APPROVAL",
              "REJECTED",
              "WAITING_FOR_SIGNATURE_CONFIRMATION",
              "APPROVED",
              "BEING_PROVIDED",
              "PROVIDED",
              "REPLACED",
              "CLOSED"
            ]
          }
        },
        "assigned": {
          "type": "boolean"
        },
        "assigneeId": {
          "type": "string"
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string"
        },
        "operatedBy": {
          "$ref": "#/definitions/LongProjection"
        },
        "operationStatus": {
          "type": "string",
          "enum": [
            "IN_OPERATION",
            "OUT_OF_OPERATION"
          ]
        },
        "prepaid": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubService"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "STANDARD",
            "NON_STANDARD",
            "BESPOKE"
          ]
        }
      },
      "title": "FeeAndServiceCompanyResponse"
    },
    "FeeAndServiceCompanyStandardFixedFeeStructureRequest": {
      "type": "object",
      "required": [
        "clientAgreementDocumentTemplateId",
        "feeStructure"
      ],
      "properties": {
        "assigneeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFixedFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "prepaid": {
          "type": "boolean"
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceCompanyStandardFixedFeeStructureRequest"
    },
    "FeeAndServiceCompanyStandardPercentageOfAumFeeStructureRequest": {
      "type": "object",
      "required": [
        "clientAgreementDocumentTemplateId",
        "feeStructure"
      ],
      "properties": {
        "assigneeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFixedFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "prepaid": {
          "type": "boolean"
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceCompanyStandardPercentageOfAumFeeStructureRequest"
    },
    "FeeAndServiceCompanyStandardRequest": {
      "type": "object",
      "required": [
        "chargingStructure",
        "clientAgreementDocumentTemplateId",
        "feeStructure"
      ],
      "properties": {
        "assigneeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "chargingStructure": {
          "type": "string",
          "enum": [
            "FIXED",
            "PERCENTAGE_OF_AUM"
          ]
        },
        "clientAgreementDocumentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "name": {
          "type": "string"
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceCompanyStandardRequest"
    },
    "FeeAndServiceConsolidatedFeeCalculationRequest": {
      "type": "object",
      "required": [
        "accountIds"
      ],
      "properties": {
        "accountIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "title": "FeeAndServiceConsolidatedFeeCalculationRequest"
    },
    "FeeAndServiceConsolidatedFeeStructure": {
      "type": "object",
      "properties": {
        "fixedFeeAmount": {
          "type": "number"
        },
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServicePayment"
          }
        },
        "totalAmount": {
          "type": "number"
        },
        "totalCalculatedFee": {
          "type": "number"
        },
        "totalFeeToBeCharged": {
          "type": "number"
        },
        "totalValuation": {
          "type": "number"
        }
      },
      "title": "FeeAndServiceConsolidatedFeeStructure"
    },
    "FeeAndServiceConsolidatedFeeStructureRequest": {
      "type": "object",
      "required": [
        "payments"
      ],
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServicePayment"
          }
        }
      },
      "title": "FeeAndServiceConsolidatedFeeStructureRequest"
    },
    "FeeAndServiceCreationAbilityResponse": {
      "type": "object",
      "properties": {
        "reasonToDeny": {
          "type": "string"
        }
      },
      "title": "FeeAndServiceCreationAbilityResponse"
    },
    "FeeAndServiceFeeStructure": {
      "type": "object",
      "properties": {
        "estimatedAum": {
          "type": "number"
        },
        "fixedFeeAmount": {
          "type": "number"
        }
      },
      "title": "FeeAndServiceFeeStructure"
    },
    "FeeAndServiceFeeTier": {
      "type": "object",
      "required": [
        "percentage"
      ],
      "properties": {
        "aumUpperBound": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "percentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        }
      },
      "title": "FeeAndServiceFeeTier"
    },
    "FeeAndServiceFixedFeeStructure": {
      "type": "object",
      "properties": {
        "estimatedAum": {
          "type": "number"
        },
        "fixedFeeAmount": {
          "type": "number"
        }
      },
      "title": "FeeAndServiceFixedFeeStructure"
    },
    "FeeAndServicePayment": {
      "type": "object",
      "required": [
        "amount",
        "calculatedFee"
      ],
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "accountName": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "calculatedFee": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "failReason": {
          "type": "string"
        },
        "feeToBeCharged": {
          "type": "number"
        },
        "received": {
          "type": "boolean"
        },
        "transactionId": {
          "type": "integer",
          "format": "int64"
        },
        "transactionStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "CHECKING",
            "WAITING",
            "ACTIVE",
            "COMPLETED",
            "ERROR",
            "CANCELLED",
            "DELETED",
            "PLACED",
            "WAITING_FOR_APPROVAL",
            "APPROVED",
            "FAILED",
            "UNKNOWN"
          ]
        }
      },
      "title": "FeeAndServicePayment"
    },
    "FeeAndServicePaymentStructure": {
      "type": "object",
      "properties": {
        "paymentSchedule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServicePayment"
          }
        }
      },
      "title": "FeeAndServicePaymentStructure"
    },
    "FeeAndServicePaymentStructureOneOff": {
      "type": "object",
      "required": [
        "paymentType"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "numberOfInstallments": {
          "type": "integer",
          "format": "int32"
        },
        "paymentDueDate": {
          "type": "string",
          "format": "date"
        },
        "paymentSchedule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServicePayment"
          }
        },
        "paymentType": {
          "type": "string",
          "enum": [
            "ONE_TIME",
            "INSTALLMENTS"
          ]
        }
      },
      "title": "FeeAndServicePaymentStructureOneOff"
    },
    "FeeAndServicePaymentStructureOngoing": {
      "type": "object",
      "required": [
        "paymentType"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "firstDueDate": {
          "type": "string",
          "format": "date"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "paymentSchedule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServicePayment"
          }
        },
        "paymentType": {
          "type": "string",
          "enum": [
            "ON_SERVICE_FREQUENCY",
            "REGULAR_INSTALLMENTS"
          ]
        }
      },
      "title": "FeeAndServicePaymentStructureOngoing"
    },
    "FeeAndServicePercentageOfAumFeeStructure": {
      "type": "object",
      "properties": {
        "estimatedAum": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "fixedFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "flatFee": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "maxFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "minFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "FeeAndServicePercentageOfAumFeeStructure"
    },
    "FeeAndServicePercentageOfAumTiredFeeStructure": {
      "type": "object",
      "properties": {
        "estimatedAum": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "fixedFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "maxFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "minFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceFeeTier"
          }
        }
      },
      "title": "FeeAndServicePercentageOfAumTiredFeeStructure"
    },
    "FeeAndServiceRequest": {
      "type": "object",
      "required": [
        "continuation",
        "link"
      ],
      "properties": {
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3000,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "serviceFeeType": {
          "type": "string",
          "enum": [
            "PLATFORM",
            "MANAGEMENT"
          ]
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubServiceRequest"
          }
        }
      },
      "title": "FeeAndServiceRequest"
    },
    "FeeAndServiceResponse": {
      "type": "object",
      "properties": {
        "allowedStatusTransitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DRAFT",
              "WAITING_FOR_COMPANY_APPROVAL",
              "WAITING_FOR_CLIENT_APPROVAL",
              "REJECTED",
              "WAITING_FOR_SIGNATURE_CONFIRMATION",
              "APPROVED",
              "BEING_PROVIDED",
              "PROVIDED",
              "REPLACED",
              "CLOSED"
            ]
          }
        },
        "continuation": {
          "type": "string",
          "enum": [
            "ONE_OFF",
            "ONGOING"
          ]
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "frequencyLevel": {
          "type": "string",
          "enum": [
            "SERVICE",
            "SUB_SERVICE"
          ]
        },
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "GOAL",
            "INVESTMENT_ACCOUNT",
            "NONE"
          ]
        },
        "name": {
          "type": "string"
        },
        "operatedBy": {
          "$ref": "#/definitions/LongProjection"
        },
        "operatedByList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LongProjection"
          }
        },
        "operationStatus": {
          "type": "string",
          "enum": [
            "IN_OPERATION",
            "OUT_OF_OPERATION"
          ]
        },
        "subServiceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceSubService"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "STANDARD",
            "NON_STANDARD",
            "BESPOKE"
          ]
        }
      },
      "title": "FeeAndServiceResponse"
    },
    "FeeAndServiceSchedule": {
      "type": "object",
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "FeeAndServiceSchedule"
    },
    "FeeAndServiceScheduleOneOff": {
      "type": "object",
      "required": [
        "startDate"
      ],
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "FeeAndServiceScheduleOneOff"
    },
    "FeeAndServiceScheduleOngoing": {
      "type": "object",
      "required": [
        "startDate"
      ],
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "scheduledServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceScheduledService"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "FeeAndServiceScheduleOngoing"
    },
    "FeeAndServiceScheduledService": {
      "type": "object",
      "required": [
        "scheduledDate"
      ],
      "properties": {
        "actualServiceDate": {
          "type": "string",
          "format": "date"
        },
        "comment": {
          "type": "string"
        },
        "scheduledDate": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "enum": [
            "UPCOMING",
            "DUE",
            "OVERDUE",
            "PROVIDED",
            "NOT_PROVIDED"
          ]
        }
      },
      "title": "FeeAndServiceScheduledService"
    },
    "FeeAndServiceStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "dueDate": {
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "paymentSchedule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServicePayment"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "WAITING_FOR_COMPANY_APPROVAL",
            "WAITING_FOR_CLIENT_APPROVAL",
            "REJECTED",
            "WAITING_FOR_SIGNATURE_CONFIRMATION",
            "APPROVED",
            "BEING_PROVIDED",
            "PROVIDED",
            "REPLACED",
            "CLOSED"
          ]
        }
      },
      "title": "FeeAndServiceStatusRequest"
    },
    "FeeAndServiceSubService": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "name": {
          "type": "string"
        }
      },
      "title": "FeeAndServiceSubService"
    },
    "FeeAndServiceSubServiceRequest": {
      "type": "object",
      "required": [
        "fixedFeeAmount"
      ],
      "properties": {
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3000,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "fixedFeeAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "frequency": {
          "type": "string",
          "enum": [
            "WEEKLY",
            "MONTHLY",
            "ONE_IN_TWO_MONTHS",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        }
      },
      "title": "FeeAndServiceSubServiceRequest"
    },
    "FieldValidationError": {
      "type": "object",
      "properties": {
        "errorDescription": {
          "type": "string"
        },
        "fieldName": {
          "type": "string"
        }
      },
      "title": "FieldValidationError"
    },
    "FinancialPriorities": {
      "type": "object",
      "properties": {
        "cashFlowAnalysis": {
          "type": "boolean"
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "fullInvestmentSalesProcess": {
          "type": "boolean"
        },
        "isaGiaTransfer": {
          "type": "boolean"
        },
        "other": {
          "type": "boolean"
        },
        "pensionPlanning": {
          "type": "boolean"
        },
        "pensionTransferAndConsolidation": {
          "type": "boolean"
        },
        "retirementOptions": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "FinancialPriorities"
    },
    "FinancialReview": {
      "type": "object",
      "properties": {
        "approvalStatus": {
          "type": "string",
          "enum": [
            "APPROVED",
            "WAITING_FOR_APPROVAL",
            "NOT_APPROVED"
          ]
        },
        "client": {
          "$ref": "#/definitions/SecuredEntityProjection"
        },
        "clientPersonInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientPersonInfo"
          }
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "completedByClientDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "displayName": {
          "type": "string"
        },
        "editableByClient": {
          "type": "boolean"
        },
        "hasInvestmentGoals": {
          "type": "boolean"
        },
        "hasPensionGoals": {
          "type": "boolean"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "riskProfileCompleted": {
          "type": "boolean"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "ACTIVE",
            "ARCHIVE"
          ]
        },
        "updatedBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "FinancialReview"
    },
    "FinancialReviewChangeApprovalStatusRequest": {
      "type": "object",
      "required": [
        "approvalStatus"
      ],
      "properties": {
        "approvalStatus": {
          "type": "string",
          "enum": [
            "APPROVED",
            "WAITING_FOR_APPROVAL",
            "NOT_APPROVED"
          ]
        }
      },
      "title": "FinancialReviewChangeApprovalStatusRequest"
    },
    "FinancialReviewChangeEditingModeRequest": {
      "type": "object",
      "required": [
        "editableByClient"
      ],
      "properties": {
        "editableByClient": {
          "type": "boolean"
        }
      },
      "title": "FinancialReviewChangeEditingModeRequest"
    },
    "FinancialReviewGoal": {
      "type": "object",
      "properties": {
        "capacityForLossRiskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "capacityForLossRiskLevelDescription": {
          "type": "string"
        },
        "capacityForLossRiskLevelValue": {
          "type": "integer",
          "format": "int32"
        },
        "clientGoalId": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date"
        },
        "details": {
          "$ref": "#/definitions/GoalDetails"
        },
        "existingArrangementsCompleted": {
          "type": "boolean"
        },
        "existingPlansCompleted": {
          "type": "boolean"
        },
        "fee": {
          "$ref": "#/definitions/Fee"
        },
        "financialReviewId": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "lastReviewedDate": {
          "type": "string",
          "format": "date"
        },
        "modelDescription": {
          "type": "string"
        },
        "modelFactSheetDocumentFileName": {
          "type": "string"
        },
        "modelFactSheetDocumentId": {
          "type": "string"
        },
        "modelId": {
          "type": "integer",
          "format": "int64"
        },
        "modelName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "newMoney": {
          "type": "boolean"
        },
        "portfolioSet": {
          "$ref": "#/definitions/ModelPortfolioSet"
        },
        "portfolioThemeSelectionComment": {
          "type": "string"
        },
        "reviewExistingArrangements": {
          "type": "boolean"
        },
        "riskAttitudeRiskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "riskAttitudeRiskLevelDescription": {
          "type": "string"
        },
        "riskAttitudeRiskLevelValue": {
          "type": "integer",
          "format": "int32"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "riskLevelDescription": {
          "type": "string"
        },
        "riskLevelValue": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "ACTIVE",
            "ARCHIVE",
            "UNDER_REVIEW"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "Investment",
            "Pension"
          ]
        }
      },
      "title": "FinancialReviewGoal"
    },
    "FinancialReviewGoalCreateRequest": {
      "type": "object",
      "required": [
        "newMoney",
        "reviewExistingArrangements"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "newMoney": {
          "type": "boolean"
        },
        "reviewExistingArrangements": {
          "type": "boolean"
        },
        "savingPurpose": {
          "$ref": "#/definitions/SavingPurpose"
        }
      },
      "title": "FinancialReviewGoalCreateRequest"
    },
    "FinancialReviewGoalPortfolioThemeRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "commentValid": {
          "type": "boolean"
        },
        "portfolioThemeId": {
          "type": "string"
        }
      },
      "title": "FinancialReviewGoalPortfolioThemeRequest"
    },
    "FinancialReviewRequest": {
      "type": "object",
      "required": [
        "editableByClient"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "editableByClient": {
          "type": "boolean"
        }
      },
      "title": "FinancialReviewRequest"
    },
    "GeneralInformation": {
      "type": "object",
      "required": [
        "gender",
        "maritalStatus",
        "owner"
      ],
      "properties": {
        "bankDetails": {
          "$ref": "#/definitions/ClientBankDetails"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "currentAddress": {
          "$ref": "#/definitions/Address"
        },
        "email": {
          "type": "string"
        },
        "forename": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "gender": {
          "type": "string",
          "enum": [
            "MALE",
            "FEMALE"
          ]
        },
        "homePhone": {
          "type": "string"
        },
        "maritalStatus": {
          "type": "string",
          "enum": [
            "SINGLE",
            "SEPARATED",
            "MARRIED",
            "DIVORCED",
            "WIDOWED",
            "LIVING_WITH_PARTNER"
          ]
        },
        "mobilePhone": {
          "type": "string"
        },
        "nameTitle": {
          "type": "string",
          "enum": [
            "MR",
            "MS",
            "MRS",
            "MISS"
          ]
        },
        "nationalInsuranceNumber": {
          "type": "string",
          "pattern": "^[A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z]\\d{6}([A-D]|\\s)$"
        },
        "nationality": {
          "type": "string"
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "previousAddress": {
          "$ref": "#/definitions/Address"
        },
        "previousSurname": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "surname": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "taxDomicile": {
          "type": "string"
        },
        "ukDomiciled": {
          "type": "boolean"
        },
        "ukTaxResident": {
          "type": "boolean"
        }
      },
      "title": "GeneralInformation"
    },
    "GeneralInformationInfo": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "generalInformationList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeneralInformation"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "GeneralInformationInfo"
    },
    "GoalDetails": {
      "type": "object",
      "properties": {
        "factFinding": {
          "$ref": "#/definitions/GoalFactFinding"
        }
      },
      "title": "GoalDetails"
    },
    "GoalFactFinding": {
      "type": "object",
      "properties": {
        "attitudeTowardCosts": {
          "$ref": "#/definitions/AttitudeTowardsCosts"
        },
        "existingArrangementsReviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExistingArrangementsReview"
          }
        },
        "existingArrangementsStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "existingPlansStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "investmentStrategy": {
          "$ref": "#/definitions/InvestmentStrategy"
        }
      },
      "title": "GoalFactFinding"
    },
    "GoalInvestmentRequestList": {
      "type": "object",
      "properties": {
        "planId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "reviewRequired": {
          "type": "boolean"
        }
      },
      "title": "GoalInvestmentRequestList"
    },
    "GoalPlanRequest": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoalInvestmentRequestList"
          }
        },
        "sectionStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "GoalPlanRequest"
    },
    "Health": {
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "hasNoHealthProblems": {
          "type": "boolean"
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "smokedLastYear": {
          "type": "boolean"
        },
        "smoking": {
          "type": "boolean"
        }
      },
      "title": "Health"
    },
    "HealthInfo": {
      "type": "object",
      "required": [
        "agreementRevealInformation"
      ],
      "properties": {
        "agreementRevealInformation": {
          "type": "string",
          "enum": [
            "YES",
            "NO",
            "DONT_WANT_TO_DISCLOSE"
          ]
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "healthList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Health"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "HealthInfo"
    },
    "IFA": {
      "type": "object",
      "properties": {
        "avatarDocumentId": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "competency": {
          "$ref": "#/definitions/LongProjection"
        },
        "email": {
          "type": "string"
        },
        "personalIntro": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/StringProjection"
        }
      },
      "title": "IFA"
    },
    "ImportFileResponse": {
      "type": "object",
      "properties": {
        "exception": {
          "type": "string"
        },
        "processedRecord": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ImportFileResponse"
    },
    "Income": {
      "type": "object",
      "required": [
        "employmentStatus",
        "owner",
        "taxPositionType"
      ],
      "properties": {
        "awareIncomeChanges": {
          "type": "boolean"
        },
        "employmentStatus": {
          "$ref": "#/definitions/EmploymentStatus"
        },
        "grossAnnualAdditionalIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "grossAnnualEmploymentIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "grossAnnualInvestmentIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "grossAnnualPensionIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "grossAnnualRentalIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "taxPositionType": {
          "$ref": "#/definitions/TaxPositionType"
        },
        "totalAnnualIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "totalMonthlyIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "totalMonthlyIncomeNet": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "Income"
    },
    "IncomeInfo": {
      "type": "object",
      "properties": {
        "completed": {
          "type": "boolean"
        },
        "incomeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Income"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        }
      },
      "title": "IncomeInfo"
    },
    "InconsistencyAnswerRequest": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswer"
          }
        }
      },
      "title": "InconsistencyAnswerRequest"
    },
    "Investment": {
      "type": "object",
      "required": [
        "inTrust",
        "internal",
        "owner",
        "typeDescriptor"
      ],
      "properties": {
        "atgProvider": {
          "$ref": "#/definitions/AtgProvider"
        },
        "averageExpectedExcessReturnPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "clientAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "currentValuationInAssetCurrency": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "id": {
          "type": "string"
        },
        "inTrust": {
          "type": "boolean"
        },
        "initialInvestment": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "internal": {
          "type": "boolean"
        },
        "investmentProvider": {
          "type": "string"
        },
        "investmentType": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ETF",
              "UNIT_TRUST",
              "INVESTMENT_TRUST",
              "OEIC",
              "DIRECT_EQUITY_HOLDINGS"
            ]
          }
        },
        "loaDocumentId": {
          "type": "string"
        },
        "loaDocumentSignatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "loaDocumentStatus": {
          "type": "string",
          "enum": [
            "NONE",
            "WAITING_FOR_SIGNATURE",
            "PENDING_CONFIRMATION",
            "SIGNED"
          ]
        },
        "loaDocumentTypeId": {
          "type": "integer",
          "format": "int64"
        },
        "loaDocumentTypeName": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "ongoingAdviserFee": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "ongoingFee": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "ongoingFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "ongoingInvestmentFee": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "planStartDate": {
          "type": "string",
          "format": "date"
        },
        "policyNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerAddress": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerPhoneNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerPostCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 7
        },
        "regularContribution": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "regularContributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "reviewRequired": {
          "type": "boolean"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "transferValue": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "typeDescriptor": {
          "$ref": "#/definitions/ClientAccountTypeDescriptor"
        },
        "valuationStartDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "Investment"
    },
    "InvestmentGoal": {
      "type": "object",
      "properties": {
        "factFinding": {
          "$ref": "#/definitions/InvestmentGoalFactFinding"
        },
        "savingPurpose": {
          "$ref": "#/definitions/SavingPurpose"
        }
      },
      "title": "InvestmentGoal"
    },
    "InvestmentGoalFactFinding": {
      "type": "object",
      "properties": {
        "attitudeTowardCosts": {
          "$ref": "#/definitions/AttitudeTowardsCosts"
        },
        "existingArrangementsReviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExistingArrangementsReview"
          }
        },
        "existingArrangementsStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "existingPlansStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "investedMoney": {
          "$ref": "#/definitions/InvestmentInvestedMoney"
        },
        "investmentObjectives": {
          "$ref": "#/definitions/InvestmentObjectives"
        },
        "investmentStrategy": {
          "$ref": "#/definitions/InvestmentStrategy"
        },
        "investments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Investment"
          }
        }
      },
      "title": "InvestmentGoalFactFinding"
    },
    "InvestmentInfo": {
      "type": "object",
      "properties": {
        "investmentList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Investment"
          }
        }
      },
      "title": "InvestmentInfo"
    },
    "InvestmentInvestedMoney": {
      "type": "object",
      "required": [
        "isaAllowance",
        "regularInvestmentAmount",
        "regularInvestmentFrequency",
        "upfrontInvestmentAmount"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "isaAllowance": {
          "type": "boolean"
        },
        "notToBeReviewed": {
          "$ref": "#/definitions/ExistingInvestments"
        },
        "regularInvestmentAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "regularInvestmentAnnualIncrease": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "regularInvestmentFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "toBeReviewed": {
          "$ref": "#/definitions/ExistingInvestments"
        },
        "upfrontInvestmentAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "InvestmentInvestedMoney"
    },
    "InvestmentObjectives": {
      "type": "object",
      "properties": {
        "completed": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "InvestmentObjectives"
    },
    "InvestmentStrategy": {
      "type": "object",
      "required": [
        "strategyPreference"
      ],
      "properties": {
        "completed": {
          "type": "boolean"
        },
        "otherInvestmentRequirementsComment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "otherInvestmentRequirementsEnabled": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "strategyPreference": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "PASSIVE",
            "NO_PREFERENCE"
          ]
        }
      },
      "title": "InvestmentStrategy"
    },
    "InvestmentType": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isa": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "InvestmentType"
    },
    "KycAddress": {
      "type": "object",
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "addressLine3": {
          "type": "string"
        },
        "buildingName": {
          "type": "string"
        },
        "buildingNumber": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "flatNumber": {
          "type": "string"
        },
        "postcode": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "state": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "subStreet": {
          "type": "string"
        },
        "town": {
          "type": "string"
        }
      },
      "title": "KycAddress"
    },
    "KycApplicant": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycAddress"
          }
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "dob": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mothersMaidenName": {
          "type": "string"
        },
        "sandbox": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        }
      },
      "title": "KycApplicant"
    },
    "KycCheck": {
      "type": "object",
      "properties": {
        "applicant": {
          "$ref": "#/definitions/KycApplicant"
        },
        "checkId": {
          "type": "string"
        },
        "checkedBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "clientId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "completedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "deletable": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "failReason": {
          "type": "string"
        },
        "initiatedBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycReport"
          }
        },
        "result": {
          "type": "string"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "PENDING",
            "STARTED",
            "REOPENED",
            "WITHDRAWN",
            "COMPLETED",
            "FORM_COMPLETED",
            "FAILED"
          ]
        },
        "timeStamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "KycCheck"
    },
    "KycCheckRequest": {
      "type": "object",
      "properties": {
        "reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycReportDescriptor"
          }
        }
      },
      "title": "KycCheckRequest"
    },
    "KycDocument": {
      "type": "object",
      "properties": {
        "contentLength": {
          "type": "integer",
          "format": "int64"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentId": {
          "type": "string"
        },
        "documentType": {
          "type": "string",
          "enum": [
            "PASSPORT",
            "DRIVING_LICENCE",
            "UTILITY_BILL",
            "COUNCIL_TAX",
            "BANK_BUILDING_SOCIETY_STATEMENT",
            "BENEFIT_LETTERS"
          ]
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        }
      },
      "title": "KycDocument"
    },
    "KycDocumentStatusRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        }
      },
      "title": "KycDocumentStatusRequest"
    },
    "KycObjectEntry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "object": {
          "type": "object"
        }
      },
      "title": "KycObjectEntry"
    },
    "KycProfile": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "checkList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DOCUMENT",
              "IDENTITY",
              "WATCHLIST",
              "FACIAL_SIMILARITY",
              "PROOF_OF_ADDRESS"
            ]
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "isDefault": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "KycProfile"
    },
    "KycProfileRequest": {
      "type": "object",
      "required": [
        "checkList",
        "name"
      ],
      "properties": {
        "checkList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DOCUMENT",
              "IDENTITY",
              "WATCHLIST",
              "FACIAL_SIMILARITY",
              "PROOF_OF_ADDRESS"
            ]
          }
        },
        "default": {
          "type": "boolean"
        },
        "identityDocumentType": {
          "type": "string",
          "enum": [
            "PASSPORT",
            "DRIVING_LICENCE",
            "UTILITY_BILL",
            "COUNCIL_TAX",
            "BANK_BUILDING_SOCIETY_STATEMENT",
            "BENEFIT_LETTERS"
          ]
        },
        "name": {
          "type": "string"
        },
        "proofOfAddressDocumentType": {
          "type": "string",
          "enum": [
            "PASSPORT",
            "DRIVING_LICENCE",
            "UTILITY_BILL",
            "COUNCIL_TAX",
            "BANK_BUILDING_SOCIETY_STATEMENT",
            "BENEFIT_LETTERS"
          ]
        }
      },
      "title": "KycProfileRequest"
    },
    "KycReport": {
      "type": "object",
      "properties": {
        "breakdown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycObjectEntry"
          }
        },
        "checkId": {
          "type": "string"
        },
        "completedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycReportDocument"
          }
        },
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kycStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "WITHDRAWN",
            "RESUMED",
            "CANCELLED",
            "AWAITING_APPROVAL",
            "COMPLETED"
          ]
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycObjectEntry"
          }
        },
        "result": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "subResult": {
          "type": "string"
        }
      },
      "title": "KycReport"
    },
    "KycReportDescriptor": {
      "type": "object",
      "required": [
        "documents",
        "type"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PASSPORT",
              "DRIVING_LICENCE",
              "UTILITY_BILL",
              "COUNCIL_TAX",
              "BANK_BUILDING_SOCIETY_STATEMENT",
              "BENEFIT_LETTERS"
            ]
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "DOCUMENT",
            "IDENTITY",
            "WATCHLIST",
            "FACIAL_SIMILARITY",
            "PROOF_OF_ADDRESS"
          ]
        }
      },
      "title": "KycReportDescriptor"
    },
    "KycReportDocument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "title": "KycReportDocument"
    },
    "Lending": {
      "type": "object",
      "required": [
        "aggregatedAmount",
        "lumpPaymentAmount",
        "monthlyPaymentAmount",
        "owner"
      ],
      "properties": {
        "aggregatedAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "lumpPaymentAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "monthlyPaymentAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "provider": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "Lending"
    },
    "LendingInfo": {
      "type": "object",
      "properties": {
        "lendingList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Lending"
          }
        }
      },
      "title": "LendingInfo"
    },
    "Liabilities": {
      "type": "object",
      "required": [
        "carLoanInfo",
        "creditCardInfo",
        "loanInfo",
        "mortgageInfo",
        "otherLendingInfo",
        "overdraftInfo"
      ],
      "properties": {
        "carLoanInfo": {
          "$ref": "#/definitions/LendingInfo"
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "creditCardInfo": {
          "$ref": "#/definitions/LendingInfo"
        },
        "loanInfo": {
          "$ref": "#/definitions/LendingInfo"
        },
        "mortgageInfo": {
          "$ref": "#/definitions/MortgageInfo"
        },
        "otherLendingInfo": {
          "$ref": "#/definitions/LendingInfo"
        },
        "overdraftInfo": {
          "$ref": "#/definitions/LendingInfo"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "Liabilities"
    },
    "LifeInsurance": {
      "type": "object",
      "required": [
        "cicAssuredAmount",
        "lifeAssuredAmount",
        "owner",
        "premiumAmount",
        "premiumFrequency",
        "productType"
      ],
      "properties": {
        "cicAssuredAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "deferredPeriod": {
          "type": "integer",
          "format": "int32"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "features": {
          "type": "string",
          "enum": [
            "WAIVER",
            "DEFERRED",
            "PERIOD",
            "INDEXATION"
          ]
        },
        "lifeAssuredAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "policyNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "premiumAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "premiumFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "productType": {
          "type": "string",
          "enum": [
            "DECREASING",
            "LEVEL",
            "PHI",
            "FIB"
          ]
        },
        "provider": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "trust": {
          "type": "boolean"
        }
      },
      "title": "LifeInsurance"
    },
    "LifeInsuranceInfo": {
      "type": "object",
      "required": [
        "agreementRevealInformation"
      ],
      "properties": {
        "agreementRevealInformation": {
          "type": "string",
          "enum": [
            "YES",
            "NO",
            "DONT_WANT_TO_DISCLOSE"
          ]
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "lifeInsuranceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifeInsurance"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "LifeInsuranceInfo"
    },
    "LongProjection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "LongProjection"
    },
    "ManagementInfo": {
      "type": "object",
      "properties": {
        "managed": {
          "type": "boolean"
        },
        "managedAt": {
          "type": "string",
          "format": "date-time"
        },
        "managedBy": {
          "$ref": "#/definitions/StringProjection"
        }
      },
      "title": "ManagementInfo"
    },
    "MeansOfCommunications": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "communicationType": {
          "type": "string",
          "enum": [
            "Phone",
            "Skype"
          ]
        },
        "phoneNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "MeansOfCommunications"
    },
    "MedicalInsurance": {
      "type": "object",
      "required": [
        "owner",
        "premiumAmount",
        "premiumFrequency"
      ],
      "properties": {
        "areaCover": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "excessAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "ongoingMedicalConditions": {
          "type": "boolean"
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "planName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "premiumAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "premiumFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "provider": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "MedicalInsurance"
    },
    "MedicalInsuranceInfo": {
      "type": "object",
      "required": [
        "agreementRevealInformation"
      ],
      "properties": {
        "agreementRevealInformation": {
          "type": "string",
          "enum": [
            "YES",
            "NO",
            "DONT_WANT_TO_DISCLOSE"
          ]
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "medicalInsuranceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MedicalInsurance"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "MedicalInsuranceInfo"
    },
    "ModelPortfolio": {
      "type": "object",
      "required": [
        "riskLevel"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "factSheetDocumentFileName": {
          "type": "string"
        },
        "factSheetDocumentId": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "name": {
          "type": "string"
        },
        "portfolioSet": {
          "$ref": "#/definitions/ModelPortfolioSet"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        }
      },
      "title": "ModelPortfolio"
    },
    "ModelPortfolioDashboardEntry": {
      "type": "object",
      "properties": {
        "numberOfAccounts": {
          "type": "integer",
          "format": "int32"
        },
        "portfolioName": {
          "type": "string"
        },
        "totalAssets": {
          "type": "number"
        }
      },
      "title": "ModelPortfolioDashboardEntry"
    },
    "ModelPortfolioDocument": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentType": {
          "type": "string",
          "enum": [
            "FACT_SHEET"
          ]
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ModelPortfolioDocument"
    },
    "ModelPortfolioDocumentRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FACT_SHEET"
          ]
        }
      },
      "title": "ModelPortfolioDocumentRequest"
    },
    "ModelPortfolioSet": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "theme": {
          "$ref": "#/definitions/ModelPortfolioTheme"
        }
      },
      "title": "ModelPortfolioSet"
    },
    "ModelPortfolioTheme": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "factSheetDocumentFileName": {
          "type": "string"
        },
        "factSheetDocumentId": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ModelPortfolioTheme"
    },
    "ModelPortfolioThemeDocument": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentType": {
          "type": "string",
          "enum": [
            "FACT_SHEET"
          ]
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ModelPortfolioThemeDocument"
    },
    "ModelPortfolioThemeDocumentRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FACT_SHEET"
          ]
        }
      },
      "title": "ModelPortfolioThemeDocumentRequest"
    },
    "ModelPortfolioThemeRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ModelPortfolioThemeRequest"
    },
    "Mortgage": {
      "type": "object",
      "required": [
        "interestSchema",
        "monthlyPaymentAmount",
        "outstandingAmount",
        "owner",
        "repaymentType"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "interestRate": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "interestSchema": {
          "type": "string",
          "enum": [
            "CAPITAL_AND_INTEREST",
            "INTEREST_ONLY"
          ]
        },
        "monthlyPaymentAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "notPaymentExpired": {
          "type": "boolean"
        },
        "outstandingAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "propertyId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "provider": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "referenceNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "repaymentType": {
          "type": "string",
          "enum": [
            "FIXED",
            "VARIABLE"
          ]
        }
      },
      "title": "Mortgage"
    },
    "MortgageInfo": {
      "type": "object",
      "properties": {
        "mortgageList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mortgage"
          }
        }
      },
      "title": "MortgageInfo"
    },
    "Notification": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "cc": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientId": {
          "type": "string"
        },
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "duplicateByEmal": {
          "type": "boolean"
        },
        "emailDuplicationSucess": {
          "type": "boolean"
        },
        "payload": {
          "$ref": "#/definitions/TemplateContext"
        },
        "subject": {
          "type": "string"
        },
        "templateId": {
          "type": "integer",
          "format": "int64"
        },
        "templateModel": {
          "$ref": "#/definitions/TemplateContext"
        },
        "to": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "USER_REGISTRATION",
            "CLIENT_REGISTRATION",
            "CLIENT_PASSWORD_RESTORE",
            "USER_EMAIL_CHANGING",
            "CLIENT_EMAIL_CHANGING",
            "CONSULTATION_CREATED_BY_IFA",
            "CONSULTATION_RESCHEDULED_BY_IFA",
            "CONSULTATION_CANCELED_BY_IFA",
            "DOCUMENT_UPLOADED_BY_IFA",
            "FINANCIAL_REVIEW_SENT_FOR_APPROVAL_BY_IFA",
            "FINANCIAL_REVIEW_MARKED_AS_COMPLETED_BY_IFA",
            "GOAL_WAS_IMPLEMENTED",
            "ACCOUNT_WAS_OPENED_AT_ACTIVE_GOAL_LEVEL",
            "ACCOUNT_WAS_CLOSED_AT_ACTIVE_GOAL_LEVEL",
            "ACTIVE_GOAL_WAS_CLOSED_BY_IFA",
            "IFA_WAS_ASSIGNED_TO_CLIENT",
            "SERVICE_WAS_ASSIGNED_TO_CLIENT",
            "CLIENT_SERVICE_WAS_DEACTIVATED",
            "CLIENT_SERVICE_WAS_PROVIDED",
            "GENERIC_DOCUMENT_WAS_CREATED_AT_COMPANY_LEVEL",
            "CLIENT_DOCUMENT_WAS_CREATED",
            "PAYMENT_PENDING",
            "MANDATORY_COMPANY_DOCUMENT_CHANGED",
            "SERVICE_REPLACING_BY_IFA",
            "DD_PAYMENT_CREATED",
            "DD_PAYMENT_CANCELED",
            "DD_MANDATE_SETUP_CONFIRMATION_DOCUMENT_RECEIVED",
            "DD_PAYMENT_ADVANCE_NOTICE_DOCUMENT_RECEIVED",
            "DD_MANDATE_CANCELLED_BY_ADVISER",
            "PENSION_ACCOUNT_APPLICATION_FORM_WAITING_FOR_APPROVAL",
            "ISA_DECLARATION_FORM_WAITING_FOR_APPROVAL"
          ]
        }
      },
      "title": "Notification"
    },
    "NotificationError": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "excepton": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "notification": {
          "$ref": "#/definitions/Notification"
        }
      },
      "title": "NotificationError"
    },
    "NotificationLog": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "notification": {
          "$ref": "#/definitions/Notification"
        }
      },
      "title": "NotificationLog"
    },
    "NotificationTemplate": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "USER_REGISTRATION",
            "CLIENT_REGISTRATION",
            "CLIENT_PASSWORD_RESTORE",
            "USER_EMAIL_CHANGING",
            "CLIENT_EMAIL_CHANGING",
            "CONSULTATION_CREATED_BY_IFA",
            "CONSULTATION_RESCHEDULED_BY_IFA",
            "CONSULTATION_CANCELED_BY_IFA",
            "DOCUMENT_UPLOADED_BY_IFA",
            "FINANCIAL_REVIEW_SENT_FOR_APPROVAL_BY_IFA",
            "FINANCIAL_REVIEW_MARKED_AS_COMPLETED_BY_IFA",
            "GOAL_WAS_IMPLEMENTED",
            "ACCOUNT_WAS_OPENED_AT_ACTIVE_GOAL_LEVEL",
            "ACCOUNT_WAS_CLOSED_AT_ACTIVE_GOAL_LEVEL",
            "ACTIVE_GOAL_WAS_CLOSED_BY_IFA",
            "IFA_WAS_ASSIGNED_TO_CLIENT",
            "SERVICE_WAS_ASSIGNED_TO_CLIENT",
            "CLIENT_SERVICE_WAS_DEACTIVATED",
            "CLIENT_SERVICE_WAS_PROVIDED",
            "GENERIC_DOCUMENT_WAS_CREATED_AT_COMPANY_LEVEL",
            "CLIENT_DOCUMENT_WAS_CREATED",
            "PAYMENT_PENDING",
            "MANDATORY_COMPANY_DOCUMENT_CHANGED",
            "SERVICE_REPLACING_BY_IFA",
            "DD_PAYMENT_CREATED",
            "DD_PAYMENT_CANCELED",
            "DD_MANDATE_SETUP_CONFIRMATION_DOCUMENT_RECEIVED",
            "DD_PAYMENT_ADVANCE_NOTICE_DOCUMENT_RECEIVED",
            "DD_MANDATE_CANCELLED_BY_ADVISER",
            "PENSION_ACCOUNT_APPLICATION_FORM_WAITING_FOR_APPROVAL",
            "ISA_DECLARATION_FORM_WAITING_FOR_APPROVAL"
          ]
        }
      },
      "title": "NotificationTemplate"
    },
    "OneTimePaymentManagementRequest": {
      "type": "object",
      "required": [
        "amount",
        "date",
        "notTransferType"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "bankAccount": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "notTransferType": {
          "type": "string",
          "enum": [
            "Contribution",
            "Withdrawal"
          ]
        },
        "policyNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "OneTimePaymentManagementRequest"
    },
    "OtherAsset": {
      "type": "object",
      "required": [
        "currentValuation",
        "owner"
      ],
      "properties": {
        "assetType": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "dateOfAcquisition": {
          "type": "string",
          "format": "date"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "originalPurchasePrice": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        }
      },
      "title": "OtherAsset"
    },
    "OtherAssetInfo": {
      "type": "object",
      "properties": {
        "otherAssetList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OtherAsset"
          }
        }
      },
      "title": "OtherAssetInfo"
    },
    "PageOfAccount": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfAccount"
    },
    "PageOfAtgProvider": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtgProvider"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfAtgProvider"
    },
    "PageOfChatLogEntry": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChatLogEntry"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfChatLogEntry"
    },
    "PageOfClientAccount": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccount"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientAccount"
    },
    "PageOfClientAccountRecurringPayment": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountRecurringPayment"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientAccountRecurringPayment"
    },
    "PageOfClientAccountTransaction": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountTransaction"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientAccountTransaction"
    },
    "PageOfClientAccountTypeDescriptor": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountTypeDescriptor"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientAccountTypeDescriptor"
    },
    "PageOfClientAccountValuation": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAccountValuation"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientAccountValuation"
    },
    "PageOfClientCommunication": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCommunication"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientCommunication"
    },
    "PageOfClientContactPerson": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientContactPerson"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientContactPerson"
    },
    "PageOfClientGoal": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientGoal"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientGoal"
    },
    "PageOfClientImportTask": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientImportTask"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientImportTask"
    },
    "PageOfClientListResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientListResponse"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientListResponse"
    },
    "PageOfClientNotification": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientNotification"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientNotification"
    },
    "PageOfClientPrototype": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientPrototype"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfClientPrototype"
    },
    "PageOfComment": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfComment"
    },
    "PageOfCompany": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfCompany"
    },
    "PageOfCompanyDocument": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyDocument"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfCompanyDocument"
    },
    "PageOfCompetency": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Competency"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfCompetency"
    },
    "PageOfConsultation": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Consultation"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfConsultation"
    },
    "PageOfCountry": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Country"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfCountry"
    },
    "PageOfCurrency": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Currency"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfCurrency"
    },
    "PageOfDefaultNotificationTemplate": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefaultNotificationTemplate"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfDefaultNotificationTemplate"
    },
    "PageOfDocumentCategoryDescriptor": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentCategoryDescriptor"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfDocumentCategoryDescriptor"
    },
    "PageOfDocumentTemplate": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentTemplate"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfDocumentTemplate"
    },
    "PageOfEmploymentStatus": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentStatus"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfEmploymentStatus"
    },
    "PageOfEntityDocument": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityDocument"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfEntityDocument"
    },
    "PageOfEntityDocumentDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityDocumentDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfEntityDocumentDto"
    },
    "PageOfEsClient": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EsClient"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfEsClient"
    },
    "PageOfEsCompany": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EsCompany"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfEsCompany"
    },
    "PageOfEsUser": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EsUser"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfEsUser"
    },
    "PageOfEventLog": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventLog"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfEventLog"
    },
    "PageOfFeeAndServiceClientPageResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceClientPageResponse"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfFeeAndServiceClientPageResponse"
    },
    "PageOfFeeAndServiceCompanyResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceCompanyResponse"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfFeeAndServiceCompanyResponse"
    },
    "PageOfFeeAndServiceResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndServiceResponse"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfFeeAndServiceResponse"
    },
    "PageOfFinancialReview": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialReview"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfFinancialReview"
    },
    "PageOfFinancialReviewGoal": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialReviewGoal"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfFinancialReviewGoal"
    },
    "PageOfInvestmentType": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestmentType"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfInvestmentType"
    },
    "PageOfKycCheck": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycCheck"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfKycCheck"
    },
    "PageOfKycProfile": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycProfile"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfKycProfile"
    },
    "PageOfModelPortfolio": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelPortfolio"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfModelPortfolio"
    },
    "PageOfModelPortfolioSet": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelPortfolioSet"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfModelPortfolioSet"
    },
    "PageOfModelPortfolioTheme": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelPortfolioTheme"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfModelPortfolioTheme"
    },
    "PageOfNotificationError": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationError"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfNotificationError"
    },
    "PageOfNotificationLog": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationLog"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfNotificationLog"
    },
    "PageOfNotificationTemplate": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationTemplate"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfNotificationTemplate"
    },
    "PageOfPaymentManagement": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentManagement"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfPaymentManagement"
    },
    "PageOfPensionType": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PensionType"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfPensionType"
    },
    "PageOfPrimaryCompany": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrimaryCompany"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfPrimaryCompany"
    },
    "PageOfProjectionsPageResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsPageResponse"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfProjectionsPageResponse"
    },
    "PageOfProperty": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfProperty"
    },
    "PageOfPropertyGroup": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfPropertyGroup"
    },
    "PageOfRole": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfRole"
    },
    "PageOfRoleType": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleType"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfRoleType"
    },
    "PageOfSavingPurpose": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SavingPurpose"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfSavingPurpose"
    },
    "PageOfTask": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfTask"
    },
    "PageOfTaskTemplate": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskTemplate"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfTaskTemplate"
    },
    "PageOfTaxPositionType": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxPositionType"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfTaxPositionType"
    },
    "PageOfUser": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfUser"
    },
    "Pageable": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "paged": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "unpaged": {
          "type": "boolean"
        }
      },
      "title": "Pageable"
    },
    "PasswordRestoreRequest": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "title": "PasswordRestoreRequest"
    },
    "PaymentManagement": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "bankAccount": {
          "type": "string"
        },
        "bankAccountName": {
          "type": "string"
        },
        "bankBranch": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "crystalisedAmount": {
          "type": "number"
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "deletable": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "generateDocument": {
          "type": "boolean"
        },
        "goalId": {
          "type": "string"
        },
        "investments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferInvestment"
          }
        },
        "isaAccountType": {
          "type": "string",
          "enum": [
            "STOCK_AND_SHARES_ISA",
            "CASH_ISA",
            "LIFETIME_ISA"
          ]
        },
        "lastError": {
          "type": "string"
        },
        "notTransferType": {
          "type": "string",
          "enum": [
            "Contribution",
            "Withdrawal"
          ]
        },
        "pensionLifetimeProtectionType": {
          "type": "string",
          "enum": [
            "no",
            "primary",
            "fixed",
            "enhanced",
            "individual"
          ]
        },
        "periodicity": {
          "type": "string",
          "enum": [
            "Monthly",
            "Quaterly",
            "Yearly"
          ]
        },
        "policyNumber": {
          "type": "string"
        },
        "providerDetails": {
          "$ref": "#/definitions/ProviderDetails"
        },
        "providerName": {
          "type": "string"
        },
        "raisedBySellingEquallyAcrossAllHoldings": {
          "type": "boolean"
        },
        "secclPaymentId": {
          "type": "string"
        },
        "sippFundsTransferType": {
          "type": "string",
          "enum": [
            "ALREADY_ENTIRELY_IN_DRAWDOWN",
            "ALREADY_PARTIALLY_IN_DRAWDOWN",
            "NOT_IN_DRAWDOWN"
          ]
        },
        "sippTransferSchemeType": {
          "type": "string",
          "enum": [
            "OTHER",
            "DEFINED_BENEFIT",
            "EXECUTIVE_PENSION_PLAN",
            "GROUP_PERSONAL_PENSION",
            "MASTER_TRUST_PENSION",
            "SIPP",
            "SSAS",
            "STAKEHOLDER_PENSION",
            "PPP"
          ]
        },
        "sortCode": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "PENDING",
            "COMPLETED",
            "FAILED"
          ]
        },
        "transferMadeThroughOrigo": {
          "type": "boolean"
        },
        "transferMode": {
          "type": "string",
          "enum": [
            "FULL_TRANSFER",
            "PARTIAL_TRANSFER"
          ]
        },
        "transferType": {
          "type": "string",
          "enum": [
            "ISA",
            "GIA",
            "SIPP"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "ONE_TIME",
            "REGULAR",
            "TRANSFER"
          ]
        }
      },
      "title": "PaymentManagement"
    },
    "Pension": {
      "type": "object",
      "required": [
        "internal",
        "owner",
        "typeDescriptor"
      ],
      "properties": {
        "atgProvider": {
          "$ref": "#/definitions/AtgProvider"
        },
        "averageExpectedExcessReturnPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "clientAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "employerGrossContribution": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "expectedAnnualIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "haveTakenBenefits": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "investmentProvider": {
          "type": "string"
        },
        "investmentType": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ETF",
              "UNIT_TRUST",
              "INVESTMENT_TRUST",
              "OEIC",
              "DIRECT_EQUITY_HOLDINGS"
            ]
          }
        },
        "loaDocumentId": {
          "type": "string"
        },
        "loaDocumentSignatureType": {
          "type": "string",
          "enum": [
            "NO_SIGNATURE",
            "CONFIRMATION",
            "DOCU_SIGN",
            "UPLOAD"
          ]
        },
        "loaDocumentStatus": {
          "type": "string",
          "enum": [
            "NONE",
            "WAITING_FOR_SIGNATURE",
            "PENDING_CONFIRMATION",
            "SIGNED"
          ]
        },
        "loaDocumentTypeId": {
          "type": "integer",
          "format": "int64"
        },
        "loaDocumentTypeName": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "ongoingFee": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "ongoingFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "pensionSchemeAdministratorAddress": {
          "type": "string"
        },
        "pensionSchemeAdministratorContactDepartmentOrPerson": {
          "type": "string"
        },
        "pensionSchemeAdministratorName": {
          "type": "string"
        },
        "pensionSchemeAdministratorPhone": {
          "type": "string"
        },
        "pensionSchemeAdministratorPostcode": {
          "type": "string"
        },
        "personalGrossContribution": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "planStartDate": {
          "type": "string",
          "format": "date"
        },
        "policyNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerAddress": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerPhoneNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerPostCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 7
        },
        "regularContributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "reviewRequired": {
          "type": "boolean"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "schemeName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "schemeRetirementAge": {
          "type": "integer",
          "format": "int32",
          "minimum": 55.0,
          "maximum": 100.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "schemeTaxReferenceNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "transferValue": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "typeDescriptor": {
          "$ref": "#/definitions/ClientAccountTypeDescriptor"
        },
        "valuationStartDate": {
          "type": "string",
          "format": "date"
        }
      },
      "title": "Pension"
    },
    "PensionGoal": {
      "type": "object",
      "properties": {
        "factFinding": {
          "$ref": "#/definitions/PensionGoalFactFinding"
        }
      },
      "title": "PensionGoal"
    },
    "PensionGoalFactFinding": {
      "type": "object",
      "properties": {
        "attitudeTowardCosts": {
          "$ref": "#/definitions/AttitudeTowardsCosts"
        },
        "existingArrangementsReviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExistingArrangementsReview"
          }
        },
        "existingArrangementsStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "existingPlansStatus": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "investedMoney": {
          "$ref": "#/definitions/PensionInvestedMoney"
        },
        "investmentStrategy": {
          "$ref": "#/definitions/InvestmentStrategy"
        },
        "pensionPlan": {
          "$ref": "#/definitions/PensionPlan"
        },
        "pensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pension"
          }
        },
        "retirementObjectives": {
          "$ref": "#/definitions/RetirementObjectives"
        }
      },
      "title": "PensionGoalFactFinding"
    },
    "PensionIllustrationReportParameters": {
      "type": "object",
      "properties": {
        "adviserInitialCharge": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "adviserOngoingFeePercentage": {
          "type": "number"
        },
        "companyOngoingServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeAndService"
          }
        },
        "externalPensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pension"
          }
        },
        "initialAmount": {
          "type": "number"
        },
        "internalPensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pension"
          }
        },
        "lumpSumAmount": {
          "type": "number"
        },
        "monthlyContributionAmount": {
          "type": "number"
        },
        "planLength": {
          "type": "integer",
          "format": "int32"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "transferAmount": {
          "type": "number"
        }
      },
      "title": "PensionIllustrationReportParameters"
    },
    "PensionInfo": {
      "type": "object",
      "properties": {
        "pensionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pension"
          }
        }
      },
      "title": "PensionInfo"
    },
    "PensionInvestedMoney": {
      "type": "object",
      "required": [
        "regularInvestmentAmount",
        "regularInvestmentFrequency",
        "upfrontInvestmentAmount"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "regularInvestmentAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "regularInvestmentAnnualIncrease": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "regularInvestmentFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "upfrontInvestmentAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "PensionInvestedMoney"
    },
    "PensionPlan": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "definedBenefits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PensionPlanDefinedBenefit"
          }
        },
        "pensionPlanValuation": {
          "type": "number"
        },
        "regularMonthContribution": {
          "type": "number"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "PensionPlan"
    },
    "PensionPlanDefinedBenefit": {
      "type": "object",
      "properties": {
        "companyName": {
          "type": "string"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32"
        },
        "retirementIncome": {
          "type": "number"
        }
      },
      "title": "PensionPlanDefinedBenefit"
    },
    "PensionType": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "PensionType"
    },
    "PortfoliosDashboardInfo": {
      "type": "object",
      "properties": {
        "modelPortfolioList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelPortfolioDashboardEntry"
          }
        },
        "totalAssets": {
          "type": "number"
        },
        "totalNumberOfAccounts": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PortfoliosDashboardInfo"
    },
    "PrimaryCompany": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "logoDocumentId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "postCode": {
          "type": "string"
        }
      },
      "title": "PrimaryCompany"
    },
    "PrimaryCompanyDocument": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentType": {
          "type": "string",
          "enum": [
            "LOGO"
          ]
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "PrimaryCompanyDocument"
    },
    "PrimaryCompanyRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "PrimaryCompanyRequest"
    },
    "Projections": {
      "type": "object",
      "properties": {
        "auditInfo": {
          "$ref": "#/definitions/AuditInfo"
        },
        "clientId": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "editable": {
          "type": "boolean"
        },
        "goalId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "negativeElement": {
          "$ref": "#/definitions/ProjectionsResultElement"
        },
        "normalElement": {
          "$ref": "#/definitions/ProjectionsResultElement"
        },
        "positiveElement": {
          "$ref": "#/definitions/ProjectionsResultElement"
        },
        "prototypeUuid": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/ProjectionsSettings"
        },
        "uuid": {
          "type": "string"
        }
      },
      "title": "Projections"
    },
    "ProjectionsInvestmentCalculateRequest": {
      "type": "object",
      "required": [
        "fees",
        "general",
        "newMoney",
        "target"
      ],
      "properties": {
        "elementList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsInvestmentSettingsInvestmentElement"
          }
        },
        "fees": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsFees"
        },
        "general": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsGeneral"
        },
        "giaExpectedExcessReturnPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "grossOtherIncomePerYear": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "isaAllowance": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsIsaAllowance"
        },
        "isaExpectedExcessReturnPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "newMoney": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsNewMoney"
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32",
          "minimum": 1.0,
          "maximum": 5.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "target": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsTarget"
        }
      },
      "title": "ProjectionsInvestmentCalculateRequest"
    },
    "ProjectionsInvestmentCreateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "prototypeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "ProjectionsInvestmentCreateRequest"
    },
    "ProjectionsInvestmentCreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "title": "ProjectionsInvestmentCreateResponse"
    },
    "ProjectionsInvestmentGetDefaultResponse": {
      "type": "object",
      "properties": {
        "elementList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsInvestmentSettingsInvestmentElement"
          }
        },
        "fees": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsFees"
        },
        "general": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsGeneral"
        },
        "giaExpectedExcessReturnPercentage": {
          "type": "number"
        },
        "grossOtherIncomePerYear": {
          "type": "number"
        },
        "isaAllowance": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsIsaAllowance"
        },
        "isaExpectedExcessReturnPercentage": {
          "type": "number"
        },
        "newMoney": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsNewMoney"
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32"
        },
        "target": {
          "$ref": "#/definitions/ProjectionsInvestmentSettingsTarget"
        }
      },
      "title": "ProjectionsInvestmentGetDefaultResponse"
    },
    "ProjectionsInvestmentResponse": {
      "type": "object",
      "properties": {
        "defaultSettings": {
          "$ref": "#/definitions/ProjectionsInvestmentGetDefaultResponse"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsInvestmentResultElement"
          }
        },
        "settings": {
          "$ref": "#/definitions/ProjectionsSettings"
        }
      },
      "title": "ProjectionsInvestmentResponse"
    },
    "ProjectionsInvestmentResultCashFlowElement": {
      "type": "object",
      "properties": {
        "adjustedContribution": {
          "type": "number"
        },
        "adjustedGiaContribution": {
          "type": "number"
        },
        "adjustedGiaPortfolioValue": {
          "type": "number"
        },
        "adjustedGiaPortfolioValueAtRedemption": {
          "type": "number"
        },
        "adjustedGiaWithdrawal": {
          "type": "number"
        },
        "adjustedIsaContribution": {
          "type": "number"
        },
        "adjustedIsaPortfolioValue": {
          "type": "number"
        },
        "adjustedIsaWithdrawal": {
          "type": "number"
        },
        "adjustedPortfolioValue": {
          "type": "number"
        },
        "adjustedPortfolioValueAtRedemption": {
          "type": "number"
        },
        "adjustedWithdrawal": {
          "type": "number"
        },
        "cashFlowDate": {
          "type": "string",
          "format": "date"
        },
        "contribution": {
          "type": "number"
        },
        "fees": {
          "type": "number"
        },
        "giaContribution": {
          "type": "number"
        },
        "giaPortfolioValue": {
          "type": "number"
        },
        "giaPortfolioValueAtRedemption": {
          "type": "number"
        },
        "giaWithdrawal": {
          "type": "number"
        },
        "isaContribution": {
          "type": "number"
        },
        "isaPortfolioValue": {
          "type": "number"
        },
        "isaWithdrawal": {
          "type": "number"
        },
        "portfolioValue": {
          "type": "number"
        },
        "portfolioValueAtRedemption": {
          "type": "number"
        },
        "taxAtRedemption": {
          "type": "number"
        },
        "taxPaid": {
          "type": "number"
        },
        "withdrawal": {
          "type": "number"
        }
      },
      "title": "ProjectionsInvestmentResultCashFlowElement"
    },
    "ProjectionsInvestmentResultElement": {
      "type": "object",
      "properties": {
        "accumulatedPortfolioValue": {
          "type": "number"
        },
        "cashFlowElementList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsInvestmentResultCashFlowElement"
          }
        },
        "lumpSum": {
          "type": "number"
        },
        "performanceLevel": {
          "type": "string",
          "enum": [
            "NEGATIVE",
            "NORMAL",
            "POSITIVE"
          ]
        },
        "requiredContribution": {
          "type": "number"
        },
        "requiredInitialInvestment": {
          "type": "number"
        },
        "requiredTimeHorizon": {
          "type": "string",
          "format": "date"
        },
        "targetReachable": {
          "type": "boolean"
        },
        "withdrawalTimeHorizon": {
          "type": "string",
          "format": "date"
        },
        "withdrawalYears": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ProjectionsInvestmentResultElement"
    },
    "ProjectionsInvestmentSettingsFees": {
      "type": "object",
      "required": [
        "giaInitialFeePercentage",
        "giaOngoingFeePercentage",
        "isaInitialFeePercentage",
        "isaOngoingFeePercentage"
      ],
      "properties": {
        "giaInitialFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "giaOngoingFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "isaInitialFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "isaOngoingFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        }
      },
      "title": "ProjectionsInvestmentSettingsFees"
    },
    "ProjectionsInvestmentSettingsGeneral": {
      "type": "object",
      "required": [
        "cashFlowIndexation",
        "cashFlowPeriodicity",
        "inflationRatePercentage",
        "rebalancingPeriodicity",
        "rebalancingRatePercentage"
      ],
      "properties": {
        "cashFlowIndexation": {
          "type": "string",
          "enum": [
            "NOMINAL",
            "REAL_TERMS_INFLATION"
          ]
        },
        "cashFlowPeriodicity": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "inflationRatePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "rebalancingPeriodicity": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "rebalancingRatePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        }
      },
      "title": "ProjectionsInvestmentSettingsGeneral"
    },
    "ProjectionsInvestmentSettingsInvestmentElement": {
      "type": "object",
      "required": [
        "contributionFrequency",
        "typeId"
      ],
      "properties": {
        "averageExpectedExcessReturnPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "contributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "ongoingFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "providerName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "regularContribution": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0,
          "maximum": 5.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "switchEnabled": {
          "type": "boolean"
        },
        "typeId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ProjectionsInvestmentSettingsInvestmentElement"
    },
    "ProjectionsInvestmentSettingsIsaAllowance": {
      "type": "object",
      "required": [
        "utiliseForNewInvestment"
      ],
      "properties": {
        "usedInThisYear": {
          "type": "number"
        },
        "utiliseForNewInvestment": {
          "type": "boolean"
        }
      },
      "title": "ProjectionsInvestmentSettingsIsaAllowance"
    },
    "ProjectionsInvestmentSettingsNewMoney": {
      "type": "object",
      "required": [
        "contributionFrequency",
        "contributionIndexation",
        "customContributionIndexationPercentage",
        "lumpSum",
        "regularContribution"
      ],
      "properties": {
        "contributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "contributionIndexation": {
          "type": "string",
          "enum": [
            "NOMINAL",
            "INFLATION",
            "RPI",
            "CPI",
            "CUSTOM"
          ]
        },
        "customContributionIndexationPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "lumpSum": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "regularContribution": {
          "type": "number",
          "minimum": 0,
          "maximum": 10000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        }
      },
      "title": "ProjectionsInvestmentSettingsNewMoney"
    },
    "ProjectionsInvestmentSettingsTarget": {
      "type": "object",
      "title": "ProjectionsInvestmentSettingsTarget"
    },
    "ProjectionsPageResponse": {
      "type": "object",
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/StringProjection"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ProjectionsPageResponse"
    },
    "ProjectionsPensionCalculateRequest": {
      "type": "object",
      "required": [
        "fees",
        "general",
        "newMoney",
        "withdrawal"
      ],
      "properties": {
        "elementList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsPensionSettingsPensionElement"
          }
        },
        "expectedExcessReturnPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "fees": {
          "$ref": "#/definitions/ProjectionsPensionSettingsFees"
        },
        "general": {
          "$ref": "#/definitions/ProjectionsPensionSettingsGeneral"
        },
        "grossOtherIncomePerYear": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "newMoney": {
          "$ref": "#/definitions/ProjectionsPensionSettingsNewMoney"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32",
          "minimum": 18.0,
          "exclusiveMinimum": false
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32",
          "minimum": 1.0,
          "maximum": 5.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "statePensionExpectedRetirementIncome": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "withdrawal": {
          "$ref": "#/definitions/ProjectionsPensionSettingsWithdrawal"
        }
      },
      "title": "ProjectionsPensionCalculateRequest"
    },
    "ProjectionsPensionCreateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "prototypeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "ProjectionsPensionCreateRequest"
    },
    "ProjectionsPensionCreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "title": "ProjectionsPensionCreateResponse"
    },
    "ProjectionsPensionGetDefaultResponse": {
      "type": "object",
      "properties": {
        "averageExpectedExcessReturnPercentage": {
          "type": "number"
        },
        "elementList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsPensionSettingsPensionElement"
          }
        },
        "fees": {
          "$ref": "#/definitions/ProjectionsPensionSettingsFees"
        },
        "general": {
          "$ref": "#/definitions/ProjectionsPensionSettingsGeneral"
        },
        "grossOtherIncomePerYear": {
          "type": "number"
        },
        "newMoney": {
          "$ref": "#/definitions/ProjectionsPensionSettingsNewMoney"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32"
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32"
        },
        "statePensionExpectedRetirementIncome": {
          "type": "number"
        },
        "withdrawalList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsPensionSettingsWithdrawal"
          }
        }
      },
      "title": "ProjectionsPensionGetDefaultResponse"
    },
    "ProjectionsPensionResponse": {
      "type": "object",
      "properties": {
        "defaultSettings": {
          "$ref": "#/definitions/ProjectionsPensionGetDefaultResponse"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsPensionResultElement"
          }
        },
        "settings": {
          "$ref": "#/definitions/ProjectionsSettings"
        }
      },
      "title": "ProjectionsPensionResponse"
    },
    "ProjectionsPensionResultCashFlowElement": {
      "type": "object",
      "properties": {
        "adjustedContribution": {
          "type": "number"
        },
        "adjustedEffectiveContribution": {
          "type": "number"
        },
        "adjustedGrossContribution": {
          "type": "number"
        },
        "adjustedPortfolioValue": {
          "type": "number"
        },
        "adjustedWithdrawal": {
          "type": "number"
        },
        "cashFlowDate": {
          "type": "string",
          "format": "date"
        },
        "contribution": {
          "type": "number"
        },
        "effectiveContribution": {
          "type": "number"
        },
        "fees": {
          "type": "number"
        },
        "grossContribution": {
          "type": "number"
        },
        "portfolioValue": {
          "type": "number"
        },
        "withdrawal": {
          "type": "number"
        }
      },
      "title": "ProjectionsPensionResultCashFlowElement"
    },
    "ProjectionsPensionResultElement": {
      "type": "object",
      "properties": {
        "accumulatedPortfolioValue": {
          "type": "number"
        },
        "cashFlowElementList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsPensionResultCashFlowElement"
          }
        },
        "lumpSum": {
          "type": "number"
        },
        "negativeAnnuityPension": {
          "type": "number"
        },
        "normalAnnuityPension": {
          "type": "number"
        },
        "performanceLevel": {
          "type": "string",
          "enum": [
            "NEGATIVE",
            "NORMAL",
            "POSITIVE"
          ]
        },
        "positiveAnnuityPension": {
          "type": "number"
        },
        "requiredContribution": {
          "type": "number"
        },
        "requiredInitialInvestment": {
          "type": "number"
        },
        "requiredTimeHorizon": {
          "type": "string",
          "format": "date"
        },
        "targetReachable": {
          "type": "boolean"
        },
        "withdrawalTimeHorizon": {
          "type": "string",
          "format": "date"
        },
        "withdrawalYears": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ProjectionsPensionResultElement"
    },
    "ProjectionsPensionSettingsFees": {
      "type": "object",
      "required": [
        "initialFeePercentage",
        "ongoingFeePercentage"
      ],
      "properties": {
        "initialFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "ongoingFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        }
      },
      "title": "ProjectionsPensionSettingsFees"
    },
    "ProjectionsPensionSettingsGeneral": {
      "type": "object",
      "required": [
        "cashFlowIndexation",
        "cashFlowPeriodicity",
        "inflationRatePercentage"
      ],
      "properties": {
        "cashFlowIndexation": {
          "type": "string",
          "enum": [
            "NOMINAL",
            "REAL_TERMS_INFLATION"
          ]
        },
        "cashFlowPeriodicity": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "inflationRatePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        }
      },
      "title": "ProjectionsPensionSettingsGeneral"
    },
    "ProjectionsPensionSettingsNewMoney": {
      "type": "object",
      "required": [
        "contributionFrequency",
        "contributionGrowthPeriodicity",
        "contributionIndexation",
        "customContributionIndexationPercentage",
        "lumpSum",
        "regularContribution"
      ],
      "properties": {
        "contributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "contributionGrowthPeriodicity": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "contributionIndexation": {
          "type": "string",
          "enum": [
            "NOMINAL",
            "INFLATION",
            "RPI",
            "CPI",
            "CUSTOM"
          ]
        },
        "customContributionIndexationPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "lumpSum": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "regularContribution": {
          "type": "number",
          "minimum": 0,
          "maximum": 10000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        }
      },
      "title": "ProjectionsPensionSettingsNewMoney"
    },
    "ProjectionsPensionSettingsPensionElement": {
      "type": "object",
      "required": [
        "contributionFrequency",
        "typeId"
      ],
      "properties": {
        "averageExpectedExcessReturnPercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "contributionFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY"
          ]
        },
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "maximum": 100000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "expectedRetirementIncome": {
          "type": "number"
        },
        "ongoingFeePercentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 99.99,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "providerName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([\\w \\p{Punct}])*$"
        },
        "regularContribution": {
          "type": "number",
          "minimum": 0,
          "maximum": 10000000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "riskLevel": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0,
          "maximum": 5.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "switchEnabled": {
          "type": "boolean"
        },
        "typeId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ProjectionsPensionSettingsPensionElement"
    },
    "ProjectionsPensionSettingsWithdrawal": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TARGET_AMOUNT",
            "REGULAR",
            "ANNUITY"
          ]
        }
      },
      "title": "ProjectionsPensionSettingsWithdrawal"
    },
    "ProjectionsPrototypeInvestmentCalculateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "title": "ProjectionsPrototypeInvestmentCalculateResponse"
    },
    "ProjectionsPrototypeInvestmentCalculateResultResponse": {
      "type": "object",
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsInvestmentResultElement"
          }
        }
      },
      "title": "ProjectionsPrototypeInvestmentCalculateResultResponse"
    },
    "ProjectionsPrototypePensionCalculateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "title": "ProjectionsPrototypePensionCalculateResponse"
    },
    "ProjectionsPrototypePensionCalculateResultResponse": {
      "type": "object",
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectionsPensionResultElement"
          }
        }
      },
      "title": "ProjectionsPrototypePensionCalculateResultResponse"
    },
    "ProjectionsResultElement": {
      "type": "object",
      "title": "ProjectionsResultElement"
    },
    "ProjectionsSettings": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "INVESTMENT",
            "PENSION"
          ]
        }
      },
      "title": "ProjectionsSettings"
    },
    "Property": {
      "type": "object",
      "properties": {
        "allowableValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "LONG",
            "DECIMAL",
            "BOOLEAN",
            "INTEGER",
            "LOCAL_DATE_TIME",
            "ENUM"
          ]
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Property"
    },
    "PropertyGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "PropertyGroup"
    },
    "Provider": {
      "type": "object",
      "required": [
        "assetType"
      ],
      "properties": {
        "addOtherPolicies": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "assetType": {
          "type": "string",
          "enum": [
            "Investment",
            "Pension"
          ]
        },
        "name": {
          "type": "string"
        },
        "policyNumbers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postCode": {
          "type": "string"
        }
      },
      "title": "Provider"
    },
    "ProviderDetails": {
      "type": "object",
      "properties": {
        "accountReferenceNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "address": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "contactName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "email": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "nameSchemaAdministrator": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "pensionSchemaTaxReference": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "ProviderDetails"
    },
    "ProviderInfo": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ProviderInfo"
    },
    "QuestionAnswer": {
      "type": "object",
      "properties": {
        "answerId": {
          "type": "string"
        },
        "questionId": {
          "type": "string"
        }
      },
      "title": "QuestionAnswer"
    },
    "QuestionAnswerRequest": {
      "type": "object",
      "properties": {
        "answerId": {
          "type": "string"
        }
      },
      "title": "QuestionAnswerRequest"
    },
    "RecommendationLetterInvestmentGoalParameters": {
      "type": "object",
      "properties": {
        "giaTransfer": {
          "type": "boolean"
        },
        "goalId": {
          "type": "string"
        },
        "isaTransfer": {
          "type": "boolean"
        },
        "newGia": {
          "type": "boolean"
        },
        "newIsa": {
          "type": "boolean"
        }
      },
      "title": "RecommendationLetterInvestmentGoalParameters"
    },
    "RecommendationLetterPensionGoalParameters": {
      "type": "object",
      "properties": {
        "goalId": {
          "type": "string"
        },
        "newSipp": {
          "type": "boolean"
        },
        "sippTransfer": {
          "type": "boolean"
        }
      },
      "title": "RecommendationLetterPensionGoalParameters"
    },
    "RecommendationLetterRequest": {
      "type": "object",
      "properties": {
        "documentTypeId": {
          "type": "integer",
          "format": "int64"
        },
        "initialServiceId": {
          "type": "string"
        },
        "investmentGoalParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecommendationLetterInvestmentGoalParameters"
          }
        },
        "ongoingServiceId": {
          "type": "string"
        },
        "pensionGoalParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecommendationLetterPensionGoalParameters"
          }
        }
      },
      "title": "RecommendationLetterRequest"
    },
    "RegularPaymentManagementRequest": {
      "type": "object",
      "required": [
        "amount",
        "date",
        "notTransferType",
        "periodicity"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "bankAccount": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "bankAccountName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "bankBranch": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "bankName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "notTransferType": {
          "type": "string",
          "enum": [
            "Contribution",
            "Withdrawal"
          ]
        },
        "periodicity": {
          "type": "string",
          "enum": [
            "Monthly",
            "Quaterly",
            "Yearly"
          ]
        },
        "policyNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "providerName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "sortCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "RegularPaymentManagementRequest"
    },
    "RescheduleConsultationRequest": {
      "type": "object",
      "required": [
        "clientId",
        "date",
        "ifaId"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "ifaId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "title": "RescheduleConsultationRequest"
    },
    "RetirementObjectives": {
      "type": "object",
      "required": [
        "retirementAge",
        "retirementCapitalAmount",
        "retirementIncome"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "otherAssets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetirementObjectivesOtherAsset"
          }
        },
        "otherAssetsEnabled": {
          "type": "boolean"
        },
        "retirementAge": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0,
          "exclusiveMinimum": false
        },
        "retirementCapitalAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "retirementIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "retirementLumpSumAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "statePensionEnabled": {
          "type": "boolean"
        },
        "stateRetirementAge": {
          "type": "integer",
          "format": "int32",
          "minimum": 55.0,
          "maximum": 100.0,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "stateRetirementIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        }
      },
      "title": "RetirementObjectives"
    },
    "RetirementObjectivesOtherAsset": {
      "type": "object",
      "properties": {
        "currentValuation": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "retirementIncome": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        }
      },
      "title": "RetirementObjectivesOtherAsset"
    },
    "RevenuesDashboardInfo": {
      "type": "object",
      "properties": {
        "currentMonth": {
          "type": "string",
          "enum": [
            "JANUARY",
            "FEBRUARY",
            "MARCH",
            "APRIL",
            "MAY",
            "JUNE",
            "JULY",
            "AUGUST",
            "SEPTEMBER",
            "OCTOBER",
            "NOVEMBER",
            "DECEMBER"
          ]
        },
        "feesHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TotalFeeDashboardEntry"
          }
        },
        "initialFees": {
          "type": "number"
        },
        "ongoingFees": {
          "type": "number"
        },
        "totalPreviousMonthsInitialFees": {
          "type": "number"
        },
        "totalPreviousMonthsOngoingFees": {
          "type": "number"
        }
      },
      "title": "RevenuesDashboardInfo"
    },
    "RiskAttitude": {
      "type": "object",
      "properties": {
        "confirmed": {
          "type": "boolean"
        },
        "drawdownLimit": {
          "type": "number",
          "format": "double"
        },
        "expectedReturn": {
          "type": "number",
          "format": "double"
        },
        "expectedVolume": {
          "type": "number",
          "format": "double"
        },
        "inconsistencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskProfilingInconsistency"
          }
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        }
      },
      "title": "RiskAttitude"
    },
    "RiskProfilingAnswer": {
      "type": "object",
      "properties": {
        "externalId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      },
      "title": "RiskProfilingAnswer"
    },
    "RiskProfilingAttempt": {
      "type": "object",
      "properties": {
        "answerInfo": {
          "$ref": "#/definitions/RiskProfilingQuestionAnswerInfo"
        },
        "goalId": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "managementInfo": {
          "$ref": "#/definitions/ManagementInfo"
        },
        "resultInfo": {
          "$ref": "#/definitions/RiskProfilingResultInfo"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "ACTIVE",
            "ARCHIVED"
          ]
        },
        "testId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "RiskProfilingAttempt"
    },
    "RiskProfilingAttemptConfirmRequest": {
      "type": "object",
      "required": [
        "riskLevel"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        }
      },
      "title": "RiskProfilingAttemptConfirmRequest"
    },
    "RiskProfilingAttemptResponse": {
      "type": "object",
      "properties": {
        "answerInfo": {
          "$ref": "#/definitions/RiskProfilingQuestionAnswerInfo"
        },
        "attemptId": {
          "type": "integer",
          "format": "int64"
        },
        "goal": {
          "$ref": "#/definitions/StringProjection"
        },
        "managedByMe": {
          "type": "boolean"
        },
        "questionInfo": {
          "$ref": "#/definitions/RiskProfilingQuestionInfo"
        },
        "resultInfo": {
          "$ref": "#/definitions/RiskProfilingResultInfo"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        },
        "riskLevelDescription": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "ACTIVE",
            "ARCHIVED"
          ]
        }
      },
      "title": "RiskProfilingAttemptResponse"
    },
    "RiskProfilingInconsistency": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswer"
          }
        },
        "externalId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "RiskProfilingInconsistency"
    },
    "RiskProfilingQuestion": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskProfilingAnswer"
          }
        },
        "externalId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      },
      "title": "RiskProfilingQuestion"
    },
    "RiskProfilingQuestionAnswerInfo": {
      "type": "object",
      "properties": {
        "capacityForLossAnswers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswer"
          }
        },
        "riskAttitudeAnswers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswer"
          }
        }
      },
      "title": "RiskProfilingQuestionAnswerInfo"
    },
    "RiskProfilingQuestionInfo": {
      "type": "object",
      "properties": {
        "capacityForLossQuestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskProfilingQuestion"
          }
        },
        "riskAttitudeQuestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskProfilingQuestion"
          }
        }
      },
      "title": "RiskProfilingQuestionInfo"
    },
    "RiskProfilingResultInfo": {
      "type": "object",
      "properties": {
        "capacityForLoss": {
          "$ref": "#/definitions/CapacityForLoss"
        },
        "comment": {
          "type": "string"
        },
        "confirmed": {
          "type": "boolean"
        },
        "riskAttitude": {
          "$ref": "#/definitions/RiskAttitude"
        },
        "riskLevel": {
          "type": "string",
          "enum": [
            "RISK_FREE",
            "LOW",
            "LOW_TO_MEDIUM",
            "MEDIUM",
            "MEDIUM_TO_HIGH",
            "HIGH"
          ]
        }
      },
      "title": "RiskProfilingResultInfo"
    },
    "Role": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "roleType": {
          "$ref": "#/definitions/RoleType"
        },
        "startPage": {
          "type": "string"
        }
      },
      "title": "Role"
    },
    "RoleProjection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "startPage": {
          "type": "string"
        }
      },
      "title": "RoleProjection"
    },
    "RoleRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "roleTypeId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "startPage": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "RoleRequest"
    },
    "RoleType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "RoleType"
    },
    "SavingPurpose": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "SavingPurpose"
    },
    "ScopedAuthority": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ScopedAuthority"
    },
    "SecclWebHookEvent": {
      "type": "object",
      "properties": {
        "firmId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "transactionType": {
          "type": "string"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "SecclWebHookEvent"
    },
    "SecclWebHookRequest": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecclWebHookEvent"
          }
        }
      },
      "title": "SecclWebHookRequest"
    },
    "SecuredEntityProjection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "title": "SecuredEntityProjection"
    },
    "Serializable": {
      "type": "object",
      "title": "Serializable"
    },
    "ServiceAgreementRequest": {
      "type": "object",
      "required": [
        "clientId",
        "ifaId"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "documentTemplateId": {
          "type": "integer",
          "format": "int64"
        },
        "feeStructure": {
          "$ref": "#/definitions/FeeAndServiceFeeStructure"
        },
        "ifaId": {
          "type": "string"
        },
        "serviceDescription": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        }
      },
      "title": "ServiceAgreementRequest"
    },
    "SettingsElement": {
      "type": "object",
      "title": "SettingsElement"
    },
    "Sort": {
      "type": "object",
      "properties": {
        "empty": {
          "type": "boolean"
        },
        "sorted": {
          "type": "boolean"
        },
        "unsorted": {
          "type": "boolean"
        }
      },
      "title": "Sort"
    },
    "StringListResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "StringListResponse"
    },
    "StringProjection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "StringProjection"
    },
    "SurflyAgent": {
      "type": "object",
      "properties": {
        "agent_email": {
          "type": "string"
        },
        "agent_id": {
          "type": "integer",
          "format": "int32"
        },
        "agent_name": {
          "type": "string"
        }
      },
      "title": "SurflyAgent"
    },
    "SurflyQueuedSession": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "start_url": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "SurflyQueuedSession"
    },
    "SurflySession": {
      "type": "object",
      "properties": {
        "agentId": {
          "type": "integer",
          "format": "int32"
        },
        "cobrowsingServerName": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "followerLink": {
          "type": "string"
        },
        "formattedId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "queueId": {
          "type": "integer",
          "format": "int32"
        },
        "sessionId": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "startUrl": {
          "type": "string"
        },
        "viewerLink": {
          "type": "string"
        }
      },
      "title": "SurflySession"
    },
    "SystemSettingsPageResponse": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "MixProjectionsDefaultSettings",
            "SippProjectionsDefaultSettings",
            "CalculatorBaseSettings",
            "CalculatorFeeSettings",
            "KycProfilesSettings",
            "DefaultSystemSettings",
            "SecclSettings"
          ]
        }
      },
      "title": "SystemSettingsPageResponse"
    },
    "SystemSettingsResponse": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/SettingsElement"
        }
      },
      "title": "SystemSettingsResponse"
    },
    "SystemSettingsUpdateRequest": {
      "type": "object",
      "required": [
        "settings"
      ],
      "properties": {
        "settings": {
          "$ref": "#/definitions/SettingsElement"
        }
      },
      "title": "SystemSettingsUpdateRequest"
    },
    "Task": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "status": {
          "type": "string",
          "enum": [
            "Open",
            "Closed",
            "Overdue"
          ]
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "title": "Task"
    },
    "TaskStatusRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Open",
            "Closed",
            "Overdue"
          ]
        }
      },
      "title": "TaskStatusRequest"
    },
    "TaskTemplate": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "assignee": {
          "type": "string",
          "enum": [
            "SYSTEM_ADMINISTRATOR",
            "COMPANY_ADMINISTRATOR",
            "ADVISER",
            "SUPPORT",
            "ASSISTANT"
          ]
        },
        "dueDays": {
          "type": "integer",
          "format": "int32"
        },
        "emailDuplication": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "CLIENT_REGISTRATION",
            "CONSULTATION_REQUESTED_BY_CLIENT",
            "CONSULTATION_CREATED_BY_IFA",
            "CONSULTATION_RESCHEDULED_BY_IFA",
            "DOCUMENT_UPLOADED_BY_CLIENT",
            "DOCUMENT_SIGNED_BY_CLIENT",
            "FINANCIAL_REVIEW_APPROVED_BY_CLIENT",
            "IFA_ASSIGNED_TO_CLIENT",
            "SYSTEM_SERVICE_WAS_UPDATED",
            "COMPANY_SERVICE_WAS_CREATED_OR_UPDATED",
            "SERVICE_ASSIGNED_TO_CLIENT",
            "CLIENT_SERVICE_SCHEDULED_DATE_IS_COMING",
            "CLIENT_KYC_CHECK_COMPLETE",
            "FINANCIAL_REVIEW_COMPLETED_BY_IFA",
            "INSUFFICIENT_FUNDS_ON_FEE_ACCOUNT",
            "APPROVE_BESPOKE_SERVICE",
            "BESPOKE_SERVICE_APPROVED",
            "BESPOKE_SERVICE_REJECTED",
            "CLIENT_SERVICE_PAID",
            "CLIENT_SERVICE_UPCOMING",
            "CLIENT_SERVICE_OVERDUE",
            "PAYMENT_FOR_SERVICE_LOCKED",
            "SERVICE_WAS_REJECTED_BY_CLIENT",
            "DD_MANDATE_WAS_CANCELLED_BY_CLIENT",
            "CLIENT_APPROVED_EXTERNAL_TRANSFER",
            "EXTERNAL_TRANSFER_FAILED",
            "FINANCIAL_REVIEW_COMPLETED_BY_CLIENT"
          ]
        }
      },
      "title": "TaskTemplate"
    },
    "TaskTemplateRequest": {
      "type": "object",
      "properties": {
        "emailDuplication": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      },
      "title": "TaskTemplateRequest"
    },
    "TaskTemplateStatusRequest": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        }
      },
      "title": "TaskTemplateStatusRequest"
    },
    "TaxPositionType": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "TaxPositionType"
    },
    "TemplateContext": {
      "type": "object",
      "title": "TemplateContext"
    },
    "TotalFeeDashboardEntry": {
      "type": "object",
      "properties": {
        "initialFees": {
          "type": "number"
        },
        "month": {
          "type": "string",
          "enum": [
            "JANUARY",
            "FEBRUARY",
            "MARCH",
            "APRIL",
            "MAY",
            "JUNE",
            "JULY",
            "AUGUST",
            "SEPTEMBER",
            "OCTOBER",
            "NOVEMBER",
            "DECEMBER"
          ]
        },
        "ongoingFees": {
          "type": "number"
        }
      },
      "title": "TotalFeeDashboardEntry"
    },
    "TransferInvestment": {
      "type": "object",
      "required": [
        "quantity"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "minimum": 1.0,
          "exclusiveMinimum": false
        },
        "referenceNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "TransferInvestment"
    },
    "TransferPaymentManagementRequest": {
      "type": "object",
      "required": [
        "amount",
        "date",
        "providerDetails",
        "transferMode",
        "transferType"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "crystalisedAmount": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": false
        },
        "date": {
          "type": "string",
          "format": "date"
        },
        "investments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferInvestment"
          }
        },
        "isaAccountType": {
          "type": "string",
          "enum": [
            "STOCK_AND_SHARES_ISA",
            "CASH_ISA",
            "LIFETIME_ISA"
          ]
        },
        "pensionLifetimeProtectionType": {
          "type": "string",
          "enum": [
            "no",
            "primary",
            "fixed",
            "enhanced",
            "individual"
          ]
        },
        "providerDetails": {
          "$ref": "#/definitions/ProviderDetails"
        },
        "raisedBySellingEquallyAcrossAllHoldings": {
          "type": "boolean"
        },
        "sippFundsTransferType": {
          "type": "string",
          "enum": [
            "ALREADY_ENTIRELY_IN_DRAWDOWN",
            "ALREADY_PARTIALLY_IN_DRAWDOWN",
            "NOT_IN_DRAWDOWN"
          ]
        },
        "sippTransferSchemeType": {
          "type": "string",
          "enum": [
            "OTHER",
            "DEFINED_BENEFIT",
            "EXECUTIVE_PENSION_PLAN",
            "GROUP_PERSONAL_PENSION",
            "MASTER_TRUST_PENSION",
            "SIPP",
            "SSAS",
            "STAKEHOLDER_PENSION",
            "PPP"
          ]
        },
        "transferMadeThroughOrigo": {
          "type": "boolean"
        },
        "transferMode": {
          "type": "string",
          "enum": [
            "FULL_TRANSFER",
            "PARTIAL_TRANSFER"
          ]
        },
        "transferType": {
          "type": "string",
          "enum": [
            "ISA",
            "GIA",
            "SIPP"
          ]
        }
      },
      "title": "TransferPaymentManagementRequest"
    },
    "UpdateApplicationDocumentRequest": {
      "type": "object",
      "required": [
        "comment",
        "generationSource"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "generationSource": {
          "type": "string",
          "enum": [
            "FILE_UPLOAD",
            "TEMPLATE_UPLOAD",
            "EXTERNAL",
            "PLATFORM_FILE",
            "PLATFORM_TEMPLATE"
          ]
        },
        "isMajor": {
          "type": "boolean"
        }
      },
      "title": "UpdateApplicationDocumentRequest"
    },
    "UpdateConsultationRequest": {
      "type": "object",
      "required": [
        "date",
        "subject"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "UpdateConsultationRequest"
    },
    "UpdateExternalDocumentsByLevelRequest": {
      "type": "object",
      "required": [
        "level"
      ],
      "properties": {
        "level": {
          "type": "string",
          "enum": [
            "FINANCIAL_REVIEW",
            "COMPANY",
            "SERVICE",
            "ACCOUNT",
            "REPORTS",
            "TRANSACTIONS",
            "PAYMENTS",
            "PLATFORM",
            "PENSION",
            "OTHER"
          ]
        }
      },
      "title": "UpdateExternalDocumentsByLevelRequest"
    },
    "UpdateExternalDocumentsRequest": {
      "type": "object",
      "required": [
        "documentTypes"
      ],
      "properties": {
        "documentTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VALUATION_STATEMENT",
              "CONTRACT_NOTE",
              "PENSION_ACCOUNT_CONFIRMATION",
              "ADVANCE_DIRECT_DEBIT_MANDATE_CONFIRMATION",
              "ADVANCE_DIRECT_DEBIT_MANDATE_NOTICE",
              "PENSION_ACCUMULATION_ILLUSTRATION_REPORT",
              "PENSION_WITHDRAWAL_ILLUSTRATION_REPORT"
            ]
          }
        }
      },
      "title": "UpdateExternalDocumentsRequest"
    },
    "UpdateModelPortfolioRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "UpdateModelPortfolioRequest"
    },
    "UpdateTaskRequest": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "dueDate": {
          "type": "string",
          "format": "date"
        },
        "userId": {
          "type": "string"
        }
      },
      "title": "UpdateTaskRequest"
    },
    "UsePreviousResultRequest": {
      "type": "object",
      "required": [
        "attemptId"
      ],
      "properties": {
        "attemptId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "UsePreviousResultRequest"
    },
    "User": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "avatarDocumentId": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/LongProjection"
        },
        "competencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LongProjection"
          }
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "lastName": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "personalIntro": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "primaryCompanyLogoDocumentId": {
          "type": "string"
        },
        "primaryCompanyName": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/Role"
        }
      },
      "title": "User"
    },
    "UserByCompetency": {
      "type": "object",
      "properties": {
        "competency": {
          "$ref": "#/definitions/LongProjection"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "title": "UserByCompetency"
    },
    "UserDocument": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "documentType": {
          "type": "string",
          "enum": [
            "AVATAR"
          ]
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "UserDocument"
    },
    "UserRequest": {
      "type": "object",
      "required": [
        "roleId"
      ],
      "properties": {
        "companyId": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "firstName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "lastName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^([a-zA-Z]+(([' -][a-zA-Z])?[a-zA-Z]*)*)|\\s*$"
        },
        "login": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "personalIntro": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "primaryCompanyId": {
          "type": "integer",
          "format": "int64"
        },
        "roleId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "UserRequest"
    },
    "UserTaskRequest": {
      "type": "object",
      "required": [
        "body",
        "type",
        "userId"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "dueDate": {
          "type": "string",
          "format": "date"
        },
        "duplicateByEmail": {
          "type": "boolean"
        },
        "payload": {
          "$ref": "#/definitions/TemplateContext"
        },
        "subject": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "CLIENT_REGISTRATION",
            "CONSULTATION_REQUESTED_BY_CLIENT",
            "CONSULTATION_CREATED_BY_IFA",
            "CONSULTATION_RESCHEDULED_BY_IFA",
            "DOCUMENT_UPLOADED_BY_CLIENT",
            "DOCUMENT_SIGNED_BY_CLIENT",
            "FINANCIAL_REVIEW_APPROVED_BY_CLIENT",
            "IFA_ASSIGNED_TO_CLIENT",
            "SYSTEM_SERVICE_WAS_UPDATED",
            "COMPANY_SERVICE_WAS_CREATED_OR_UPDATED",
            "SERVICE_ASSIGNED_TO_CLIENT",
            "CLIENT_SERVICE_SCHEDULED_DATE_IS_COMING",
            "CLIENT_KYC_CHECK_COMPLETE",
            "FINANCIAL_REVIEW_COMPLETED_BY_IFA",
            "INSUFFICIENT_FUNDS_ON_FEE_ACCOUNT",
            "APPROVE_BESPOKE_SERVICE",
            "BESPOKE_SERVICE_APPROVED",
            "BESPOKE_SERVICE_REJECTED",
            "CLIENT_SERVICE_PAID",
            "CLIENT_SERVICE_UPCOMING",
            "CLIENT_SERVICE_OVERDUE",
            "PAYMENT_FOR_SERVICE_LOCKED",
            "SERVICE_WAS_REJECTED_BY_CLIENT",
            "DD_MANDATE_WAS_CANCELLED_BY_CLIENT",
            "CLIENT_APPROVED_EXTERNAL_TRANSFER",
            "EXTERNAL_TRANSFER_FAILED",
            "FINANCIAL_REVIEW_COMPLETED_BY_CLIENT"
          ]
        },
        "userId": {
          "type": "string"
        }
      },
      "title": "UserTaskRequest"
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "ValidationError"
    },
    "ValidationResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityValidationError"
          }
        }
      },
      "title": "ValidationResponse"
    },
    "WebHookEvent": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "sequence_id": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "WebHookEvent"
    },
    "WebhookEvent": {
      "type": "object",
      "title": "WebhookEvent"
    },
    "WillAndTrust": {
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "owner": {
          "type": "string",
          "enum": [
            "FIRST_PERSON",
            "SECOND_PERSON",
            "BOTH"
          ]
        },
        "trustExists": {
          "type": "boolean"
        },
        "willActual": {
          "type": "boolean"
        },
        "willExists": {
          "type": "boolean"
        }
      },
      "title": "WillAndTrust"
    },
    "WillAndTrustInfo": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "minLength": 0,
          "maxLength": 900
        },
        "completed": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "DRAFT",
            "COMPLETED"
          ]
        },
        "willAndTrustList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WillAndTrust"
          }
        }
      },
      "title": "WillAndTrustInfo"
    }
  }
}